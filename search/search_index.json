{
    "docs": [
        {
            "location": "/", 
            "text": "Venngage Coding Guidelines\n\n\n\n\n\n\n\n\nJavascript Styleguide\n\n\n\n\nReact\n\n\nCSS in Javascript\n\n\n\n\n\n\n\n\nPHP Coding Standards\n\n\n\n\nStyleguide\n\n\nLogger Interface\n\n\nAutoloader\n\n\nCache\n\n\nHTTP Messages\n\n\n\n\n\n\nLicenses", 
            "title": "Home"
        }, 
        {
            "location": "/#venngage-coding-guidelines", 
            "text": "Javascript Styleguide   React  CSS in Javascript     PHP Coding Standards   Styleguide  Logger Interface  Autoloader  Cache  HTTP Messages    Licenses", 
            "title": "Venngage Coding Guidelines"
        }, 
        {
            "location": "/js/javascript/", 
            "text": "Venngage JavaScript Style Guide\n\n\nBased off of \nAirBnB's style guide.\n\n\nTable of Contents\n\n\nTypes\n\n\n\n\n1.1 Primitives\n\n\nWhen you access a primitive type you work directly on its value.\n\n\n\n\nstring\n\n\nnumber\n\n\nboolean\n\n\nnull\n\n\nundefined\n\n\n\n\nconst\n \nfoo\n \n=\n \n1\n;\n\n\nlet\n \nbar\n \n=\n \nfoo\n;\n\n\n\nbar\n \n=\n \n9\n;\n\n\n\nconsole\n.\nlog\n(\nfoo\n,\n \nbar\n);\n \n// =\n 1, 9\n\n\n\n\n\n\n1.2 Complex\n\n\nWhen you access a complex type you work on a reference to its value.\n\n\n\n\nobject\n\n\narray\n\n\nfunction\n\n\n\n\nconst\n \nfoo\n \n=\n \n[\n1\n,\n \n2\n];\n\n\nconst\n \nbar\n \n=\n \nfoo\n;\n\n\n\nbar\n[\n0\n]\n \n=\n \n9\n;\n\n\n\nconsole\n.\nlog\n(\nfoo\n[\n0\n],\n \nbar\n[\n0\n]);\n \n// =\n 9, 9\n\n\n\n\n\n\n\u2b06 back to top\n\n\nReferences\n\n\n\n\n2.1 \nconst\n\n\nUse \nconst\n for all of your references; avoid using \nvar\n. eslint: \nprefer-const\n, \nno-const-assign\n\n\n\n\nTip\n\n\nThis ensures that you can't reassign your references, which can lead to bugs and difficult to comprehend code.\n\n\n\n\n// bad\n\n\nvar\n \na\n \n=\n \n1\n;\n\n\nvar\n \nb\n \n=\n \n2\n;\n\n\n\n// good\n\n\nconst\n \na\n \n=\n \n1\n;\n\n\nconst\n \nb\n \n=\n \n2\n;\n\n\n\n\n\n\n2.2 \nlet\n\n\nIf you must reassign references, use \nlet\n instead of \nvar\n. eslint: \nno-var\n jscs: \ndisallowVar\n\n\n\n\nWhy? \nlet\n is block-scoped rather than function-scoped like \nvar\n.\n\n\n\n\n// bad\n\n\nvar\n \ncount\n \n=\n \n1\n;\n\n\nif\n \n(\ntrue\n)\n \n{\n\n\ncount\n \n+=\n \n1\n;\n\n\n}\n\n\n\n// good, use the let.\n\n\nlet\n \ncount\n \n=\n \n1\n;\n\n\nif\n \n(\ntrue\n)\n \n{\n\n\ncount\n \n+=\n \n1\n;\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nBoth \nlet\n and \nconst\n are block-scoped.\n\n\n\n\n// const and let only exist in the blocks they are defined in.\n\n\n{\n\n\nlet\n \na\n \n=\n \n1\n;\n\n\nconst\n \nb\n \n=\n \n1\n;\n\n\n}\n\n\nconsole\n.\nlog\n(\na\n);\n \n// ReferenceError\n\n\nconsole\n.\nlog\n(\nb\n);\n \n// ReferenceError\n\n\n\n\n\n\n\u2b06 back to top\n\n\nObjects\n\n\n\n\n3.1 Literal syntax\n\n\nUse the literal syntax for object creation. eslint: \nno-new-object\n\n\n// bad\n\n\nconst\n \nitem\n \n=\n \nnew\n \nObject\n();\n\n\n\n// good\n\n\nconst\n \nitem\n \n=\n \n{};\n\n\n\n\n\n\n3.2 Property names\n\n\nUse computed property names when creating objects with dynamic property names.\n\n\n\n\nWhy? They allow you to define all the properties of an object in one place.\n\n\n\n\nfunction\n \ngetKey\n(\nk\n)\n \n{\n\n\nreturn\n \n`a key named \n${\nk\n}\n`\n;\n\n\n}\n\n\n\n// bad\n\n\nconst\n \nobj\n \n=\n \n{\n\n\nid\n:\n \n5\n,\n\n\nname\n:\n \nSan Francisco\n,\n\n\n};\n\n\nobj\n[\ngetKey\n(\nenabled\n)]\n \n=\n \ntrue\n;\n\n\n\n// good\n\n\nconst\n \nobj\n \n=\n \n{\n\n\nid\n:\n \n5\n,\n\n\nname\n:\n \nSan Francisco\n,\n\n\n[\ngetKey\n(\nenabled\n)]\n:\n \ntrue\n,\n\n\n};\n\n\n\n\n\n\n3.3 Object method shorthand\n\n\nUse object method shorthand. eslint: \nobject-shorthand\n jscs: \nrequireEnhancedObjectLiterals\n\n\n// bad\n\n\nconst\n \natom\n \n=\n \n{\n\n\nvalue\n:\n \n1\n,\n\n\n\naddValue\n:\n \nfunction\n \n(\nvalue\n)\n \n{\n\n  \nreturn\n \natom\n.\nvalue\n \n+\n \nvalue\n;\n\n\n},\n\n\n};\n\n\n\n// good\n\n\nconst\n \natom\n \n=\n \n{\n\n\nvalue\n:\n \n1\n,\n\n\n\naddValue\n(\nvalue\n)\n \n{\n\n  \nreturn\n \natom\n.\nvalue\n \n+\n \nvalue\n;\n\n\n},\n\n\n};\n\n\n\n\n\n\n3.4 Property value shorthand\n\n\nUse property value shorthand. eslint: \nobject-shorthand\n jscs: \nrequireEnhancedObjectLiterals\n\n\n\n\nWhy? It is shorter to write and descriptive.\n\n\n\n\nconst\n \nlukeSkywalker\n \n=\n \nLuke Skywalker\n;\n\n\n\n// bad\n\n\nconst\n \nobj\n \n=\n \n{\n\n\nlukeSkywalker\n:\n \nlukeSkywalker\n,\n\n\n};\n\n\n\n// good\n\n\nconst\n \nobj\n \n=\n \n{\n\n\nlukeSkywalker\n,\n\n\n};\n\n\n\n\n\n\n3.5 shorthand properties\n\n\nGroup your shorthand properties at the beginning of your object declaration.\n\n\n\n\nWhy? It's easier to tell which properties are using the shorthand.\n\n\n\n\nconst\n \nanakinSkywalker\n \n=\n \nAnakin Skywalker\n;\n\n\nconst\n \nlukeSkywalker\n \n=\n \nLuke Skywalker\n;\n\n\n\n// bad\n\n\nconst\n \nobj\n \n=\n \n{\n\n  \nepisodeOne\n:\n \n1\n,\n\n  \ntwoJediWalkIntoACantina\n:\n \n2\n,\n\n  \nlukeSkywalker\n,\n\n  \nepisodeThree\n:\n \n3\n,\n\n  \nmayTheFourth\n:\n \n4\n,\n\n  \nanakinSkywalker\n,\n\n\n};\n\n\n\n// good\n\n\nconst\n \nobj\n \n=\n \n{\n\n  \nlukeSkywalker\n,\n\n  \nanakinSkywalker\n,\n\n  \nepisodeOne\n:\n \n1\n,\n\n  \ntwoJediWalkIntoACantina\n:\n \n2\n,\n\n  \nepisodeThree\n:\n \n3\n,\n\n  \nmayTheFourth\n:\n \n4\n,\n\n\n};\n\n\n\n\n\n\n3.6 Quoted properties\n\n\nOnly quote properties that are invalid identifiers. eslint: \nquote-props\n jscs: \ndisallowQuotedKeysInObjects\n\n\n\n\nWhy? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.\n\n\n\n\n// bad\n\n\nconst\n \nbad\n \n=\n \n{\n\n  \nfoo\n:\n \n3\n,\n\n  \nbar\n:\n \n4\n,\n\n  \ndata-blah\n:\n \n5\n,\n\n\n};\n\n\n\n// good\n\n\nconst\n \ngood\n \n=\n \n{\n\n  \nfoo\n:\n \n3\n,\n\n  \nbar\n:\n \n4\n,\n\n  \ndata-blah\n:\n \n5\n,\n\n\n};\n\n\n\n\n\n\n3.7 \nObject.prototype\n\n\nDo not call \nObject.prototype\n methods directly, such as \nhasOwnProperty\n, \npropertyIsEnumerable\n, and \nisPrototypeOf\n.\n\n\n\n\nWhy? These methods may be shadowed by properties on the object in question - consider \n{ hasOwnProperty: false }\n - or, the object may be a null object (\nObject.create(null)\n).\n\n\n\n\n// bad\n\n\nconsole\n.\nlog\n(\nobject\n.\nhasOwnProperty\n(\nkey\n));\n\n\n\n// good\n\n\nconsole\n.\nlog\n(\nObject\n.\nprototype\n.\nhasOwnProperty\n.\ncall\n(\nobject\n,\n \nkey\n));\n\n\n\n// best\n\n\nconst\n \nhas\n \n=\n \nObject\n.\nprototype\n.\nhasOwnProperty\n;\n \n// cache the lookup once, in module scope.\n\n\n/* or */\n\n\nimport\n \nhas\n \nfrom\n \nhas\n;\n\n\n// ...\n\n\nconsole\n.\nlog\n(\nhas\n.\ncall\n(\nobject\n,\n \nkey\n));\n\n\n\n\n\n\n3.8\n\n\nPrefer the object spread operator over \nObject.assign\n to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted.\n\n\n// very bad\n\n\nconst\n \noriginal\n \n=\n \n{\n \na\n:\n \n1\n,\n \nb\n:\n \n2\n \n};\n\n\nconst\n \ncopy\n \n=\n \nObject\n.\nassign\n(\noriginal\n,\n \n{\n \nc\n:\n \n3\n \n});\n \n// this mutates `original` \u0ca0_\u0ca0\n\n\ndelete\n \ncopy\n.\na\n;\n \n// so does this\n\n\n\n// bad\n\n\nconst\n \noriginal\n \n=\n \n{\n \na\n:\n \n1\n,\n \nb\n:\n \n2\n \n};\n\n\nconst\n \ncopy\n \n=\n \nObject\n.\nassign\n({},\n \noriginal\n,\n \n{\n \nc\n:\n \n3\n \n});\n \n// copy =\n { a: 1, b: 2, c: 3 }\n\n\n\n// good\n\n\nconst\n \noriginal\n \n=\n \n{\n \na\n:\n \n1\n,\n \nb\n:\n \n2\n \n};\n\n\nconst\n \ncopy\n \n=\n \n{\n \n...\noriginal\n,\n \nc\n:\n \n3\n \n};\n \n// copy =\n { a: 1, b: 2, c: 3 }\n\n\n\nconst\n \n{\n \na\n,\n \n...\nnoA\n \n}\n \n=\n \ncopy\n;\n \n// noA =\n { b: 2, c: 3 }\n\n\n\n\n\n\n\u2b06 back to top\n\n\nArrays\n\n\n\n\n4.1\n\n\nUse the literal syntax for array creation. eslint: \nno-array-constructor\n\n\n// bad\n\n\nconst\n \nitems\n \n=\n \nnew\n \nArray\n();\n\n\n\n// good\n\n\nconst\n \nitems\n \n=\n \n[];\n\n\n\n\n\n\n4.2 Push\n\n\nUse \nArray#push\n instead of direct assignment to add items to an array.\n\n\nconst\n \nsomeStack\n \n=\n \n[];\n\n\n\n// bad\n\n\nsomeStack\n[\nsomeStack\n.\nlength\n]\n \n=\n \nabracadabra\n;\n\n\n\n// good\n\n\nsomeStack\n.\npush\n(\nabracadabra\n);\n\n\n\n\n\n\n4.3 Spreads\n\n\nUse array spreads \n...\n to copy arrays.\n\n\n// bad\n\n\nconst\n \nlen\n \n=\n \nitems\n.\nlength\n;\n\n\nconst\n \nitemsCopy\n \n=\n \n[];\n\n\nlet\n \ni\n;\n\n\n\nfor\n \n(\ni\n \n=\n \n0\n;\n \ni\n \n \nlen\n;\n \ni\n \n+=\n \n1\n)\n \n{\n\n\nitemsCopy\n[\ni\n]\n \n=\n \nitems\n[\ni\n];\n\n\n}\n\n\n\n// good\n\n\nconst\n \nitemsCopy\n \n=\n \n[...\nitems\n];\n\n\n\n\n\n\n\n\n4.4\n To convert an array-like object to an array, use \nArray.from\n.\n\n\n\n\nconst\n \nfoo\n \n=\n \ndocument\n.\nquerySelectorAll\n(\n.foo\n);\n\n\nconst\n \nnodes\n \n=\n \nArray\n.\nfrom\n(\nfoo\n);\n\n\n\n\n\n\n\n\n4.5\n Use return statements in array method callbacks. It's ok to omit the return if the function body consists of a single statement following \n8.2\n. eslint: \narray-callback-return\n\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n((\nx\n)\n \n=\n \n{\n\n  \nconst\n \ny\n \n=\n \nx\n \n+\n \n1\n;\n\n  \nreturn\n \nx\n \n*\n \ny\n;\n\n\n});\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n(\nx\n \n=\n \nx\n \n+\n \n1\n);\n\n\n\n// bad\n\n\nconst\n \nflat\n \n=\n \n{};\n\n\n[[\n0\n,\n \n1\n],\n \n[\n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n]].\nreduce\n((\nmemo\n,\n \nitem\n,\n \nindex\n)\n \n=\n \n{\n\n  \nconst\n \nflatten\n \n=\n \nmemo\n.\nconcat\n(\nitem\n);\n\n  \nflat\n[\nindex\n]\n \n=\n \nflatten\n;\n\n\n});\n\n\n\n// good\n\n\nconst\n \nflat\n \n=\n \n{};\n\n\n[[\n0\n,\n \n1\n],\n \n[\n2\n,\n \n3\n],\n \n[\n4\n,\n \n5\n]].\nreduce\n((\nmemo\n,\n \nitem\n,\n \nindex\n)\n \n=\n \n{\n\n  \nconst\n \nflatten\n \n=\n \nmemo\n.\nconcat\n(\nitem\n);\n\n  \nflat\n[\nindex\n]\n \n=\n \nflatten\n;\n\n  \nreturn\n \nflatten\n;\n\n\n});\n\n\n\n// bad\n\n\ninbox\n.\nfilter\n((\nmsg\n)\n \n=\n \n{\n\n  \nconst\n \n{\n \nsubject\n,\n \nauthor\n \n}\n \n=\n \nmsg\n;\n\n  \nif\n \n(\nsubject\n \n===\n \nMockingbird\n)\n \n{\n\n    \nreturn\n \nauthor\n \n===\n \nHarper Lee\n;\n\n  \n}\n \nelse\n \n{\n\n    \nreturn\n \nfalse\n;\n\n  \n}\n\n\n});\n\n\n\n// good\n\n\ninbox\n.\nfilter\n((\nmsg\n)\n \n=\n \n{\n\n  \nconst\n \n{\n \nsubject\n,\n \nauthor\n \n}\n \n=\n \nmsg\n;\n\n  \nif\n \n(\nsubject\n \n===\n \nMockingbird\n)\n \n{\n\n    \nreturn\n \nauthor\n \n===\n \nHarper Lee\n;\n\n  \n}\n\n\n  \nreturn\n \nfalse\n;\n\n\n});\n\n\n\n\n\n\n\u2b06 back to top\n\n\nDestructuring\n\n\n\n\n\n\n5.1\n Use object destructuring when accessing and using multiple properties of an object. jscs: \nrequireObjectDestructuring\n\n\n\n\n\n\nWhy? Destructuring saves you from creating temporary references for those properties.\n\n\n\n\n// bad\n\n\nfunction\n \ngetFullName\n(\nuser\n)\n \n{\n\n  \nconst\n \nfirstName\n \n=\n \nuser\n.\nfirstName\n;\n\n  \nconst\n \nlastName\n \n=\n \nuser\n.\nlastName\n;\n\n\n  \nreturn\n \n`\n${\nfirstName\n}\n \n${\nlastName\n}\n`\n;\n\n\n}\n\n\n\n// good\n\n\nfunction\n \ngetFullName\n(\nuser\n)\n \n{\n\n  \nconst\n \n{\n \nfirstName\n,\n \nlastName\n \n}\n \n=\n \nuser\n;\n\n  \nreturn\n \n`\n${\nfirstName\n}\n \n${\nlastName\n}\n`\n;\n\n\n}\n\n\n\n// best\n\n\nfunction\n \ngetFullName\n({\n \nfirstName\n,\n \nlastName\n \n})\n \n{\n\n  \nreturn\n \n`\n${\nfirstName\n}\n \n${\nlastName\n}\n`\n;\n\n\n}\n\n\n\n\n\n\n\n\n5.2\n Use array destructuring. jscs: \nrequireArrayDestructuring\n\n\n\n\nconst\n \narr\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n];\n\n\n\n// bad\n\n\nconst\n \nfirst\n \n=\n \narr\n[\n0\n];\n\n\nconst\n \nsecond\n \n=\n \narr\n[\n1\n];\n\n\n\n// good\n\n\nconst\n \n[\nfirst\n,\n \nsecond\n]\n \n=\n \narr\n;\n\n\n\n\n\n\n\n\n5.3\n Use object destructuring for multiple return values, not array destructuring. jscs: \ndisallowArrayDestructuringReturn\n\n\n\n\n\n\nWhy? You can add new properties over time or change the order of things without breaking call sites.\n\n\n\n\n// bad\n\n\nfunction\n \nprocessInput\n(\ninput\n)\n \n{\n\n  \n// then a miracle occurs\n\n  \nreturn\n \n[\nleft\n,\n \nright\n,\n \ntop\n,\n \nbottom\n];\n\n\n}\n\n\n\n// the caller needs to think about the order of return data\n\n\nconst\n \n[\nleft\n,\n \n__\n,\n \ntop\n]\n \n=\n \nprocessInput\n(\ninput\n);\n\n\n\n// good\n\n\nfunction\n \nprocessInput\n(\ninput\n)\n \n{\n\n  \n// then a miracle occurs\n\n  \nreturn\n \n{\n \nleft\n,\n \nright\n,\n \ntop\n,\n \nbottom\n \n};\n\n\n}\n\n\n\n// the caller selects only the data they need\n\n\nconst\n \n{\n \nleft\n,\n \ntop\n \n}\n \n=\n \nprocessInput\n(\ninput\n);\n\n\n\n\n\n\n\u2b06 back to top\n\n\nStrings\n\n\n\n\n\n\n6.1\n Use single quotes \n''\n for strings. eslint: \nquotes\n jscs: \nvalidateQuoteMarks\n\n\n\n\n// bad\n\n\nconst\n \nname\n \n=\n \nCapt. Janeway\n;\n\n\n\n// bad - template literals should contain interpolation or newlines\n\n\nconst\n \nname\n \n=\n \n`Capt. Janeway`\n;\n\n\n\n// good\n\n\nconst\n \nname\n \n=\n \nCapt. Janeway\n;\n\n\n\n\n\n\n\n\n6.2\n Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.\n\n\n\n\n\n\nWhy? Broken strings are painful to work with and make code less searchable.\n\n\n\n\n// bad\n\n\nconst\n \nerrorMessage\n \n=\n \nThis is a super long error that was thrown because \\\n\n\nof Batman. When you stop to think about how Batman had anything to do \\\n\n\nwith this, you would get nowhere \\\n\n\nfast.\n;\n\n\n\n// bad\n\n\nconst\n \nerrorMessage\n \n=\n \nThis is a super long error that was thrown because \n \n+\n\n  \nof Batman. When you stop to think about how Batman had anything to do \n \n+\n\n  \nwith this, you would get nowhere fast.\n;\n\n\n\n// good\n\n\nconst\n \nerrorMessage\n \n=\n \nThis is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.\n;\n\n\n\n\n\n\n\n\n6.3\n When programmatically building up strings, use template strings instead of concatenation. eslint: \nprefer-template\n \ntemplate-curly-spacing\n jscs: \nrequireTemplateStrings\n\n\n\n\n\n\nWhy? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.\n\n\n\n\n// bad\n\n\nfunction\n \nsayHi\n(\nname\n)\n \n{\n\n  \nreturn\n \nHow are you, \n \n+\n \nname\n \n+\n \n?\n;\n\n\n}\n\n\n\n// bad\n\n\nfunction\n \nsayHi\n(\nname\n)\n \n{\n\n  \nreturn\n \n[\nHow are you, \n,\n \nname\n,\n \n?\n].\njoin\n();\n\n\n}\n\n\n\n// bad\n\n\nfunction\n \nsayHi\n(\nname\n)\n \n{\n\n  \nreturn\n \n`How are you, \n${\n \nname\n \n}\n?`\n;\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nsayHi\n(\nname\n)\n \n{\n\n  \nreturn\n \n`How are you, \n${\nname\n}\n?`\n;\n\n\n}\n\n\n\n\n\n\n\n\n\n\n6.4\n Never use \neval()\n on a string, it opens too many vulnerabilities.\n\n\n\n\n\n\n6.5\n Do not unnecessarily escape characters in strings. eslint: \nno-useless-escape\n\n\n\n\n\n\n\n\nWhy? Backslashes harm readability, thus they should only be present when necessary.\n\n\n\n\n// bad\n\n\nconst\n \nfoo\n \n=\n \n\\\nthis\\\n \\i\\s \\\nquoted\\\n;\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \n\\\nthis\\\n is \nquoted\n;\n\n\nconst\n \nfoo\n \n=\n \n`my name is \n${\nname\n}\n`\n;\n\n\n\n\n\n\n\u2b06 back to top\n\n\nFunctions\n\n\n\n\n\n\n7.1\n Use named function expressions instead of function declarations. eslint: \nfunc-style\n jscs: \ndisallowFunctionDeclarations\n\n\n\n\n\n\nWhy? Function declarations are hoisted, which means that it\u2019s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function\u2019s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it\u2019s time to extract it to its own module! Don\u2019t forget to name the expression - anonymous functions can make it harder to locate the problem in an Error's call stack. (\nDiscussion\n)\n\n\n\n\n// bad\n\n\nfunction\n \nfoo\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// bad\n\n\nconst\n \nfoo\n \n=\n \nfunction\n \n()\n \n{\n\n  \n// ...\n\n\n};\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \nfunction\n \nbar\n()\n \n{\n\n  \n// ...\n\n\n};\n\n\n\n\n\n\n\n\n7.2\n Wrap immediately invoked function expressions in parentheses. eslint: \nwrap-iife\n jscs: \nrequireParenthesesAroundIIFE\n\n\n\n\n\n\nWhy? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.\n\n\n\n\n// immediately-invoked function expression (IIFE)\n\n\n(\nfunction\n \n()\n \n{\n\n  \nconsole\n.\nlog\n(\nWelcome to the Internet. Please follow me.\n);\n\n\n}());\n\n\n\n\n\n\n\n\n\n\n7.3\n Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: \nno-loop-func\n\n\n\n\n\n\n7.4\n \nNote:\n ECMA-262 defines a \nblock\n as a list of statements. A function declaration is not a statement. \nRead ECMA-262's note on this issue\n.\n\n\n\n\n\n\n// bad\n\n\nif\n \n(\ncurrentUser\n)\n \n{\n\n  \nfunction\n \ntest\n()\n \n{\n\n    \nconsole\n.\nlog\n(\nNope.\n);\n\n  \n}\n\n\n}\n\n\n\n// good\n\n\nlet\n \ntest\n;\n\n\nif\n \n(\ncurrentUser\n)\n \n{\n\n  \ntest\n \n=\n \n()\n \n=\n \n{\n\n    \nconsole\n.\nlog\n(\nYup.\n);\n\n  \n};\n\n\n}\n\n\n\n\n\n\n\n\n7.5\n Never name a parameter \narguments\n. This will take precedence over the \narguments\n object that is given to every function scope.\n\n\n\n\n// bad\n\n\nfunction\n \nfoo\n(\nname\n,\n \noptions\n,\n \narguments\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nfoo\n(\nname\n,\n \noptions\n,\n \nargs\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n7.6\n Never use \narguments\n, opt to use rest syntax \n...\n instead. eslint: \nprefer-rest-params\n\n\n\n\n\n\nWhy? \n...\n is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like \narguments\n.\n\n\n\n\n// bad\n\n\nfunction\n \nconcatenateAll\n()\n \n{\n\n  \nconst\n \nargs\n \n=\n \nArray\n.\nprototype\n.\nslice\n.\ncall\n(\narguments\n);\n\n  \nreturn\n \nargs\n.\njoin\n(\n);\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nconcatenateAll\n(...\nargs\n)\n \n{\n\n  \nreturn\n \nargs\n.\njoin\n(\n);\n\n\n}\n\n\n\n\n\n\n\n\n7.7\n Use default parameter syntax rather than mutating function arguments.\n\n\n\n\n// really bad\n\n\nfunction\n \nhandleThings\n(\nopts\n)\n \n{\n\n  \n// No! We shouldn\nt mutate function arguments.\n\n  \n// Double bad: if opts is falsy it\nll be set to an object which may\n\n  \n// be what you want but it can introduce subtle bugs.\n\n  \nopts\n \n=\n \nopts\n \n||\n \n{};\n\n  \n// ...\n\n\n}\n\n\n\n// still bad\n\n\nfunction\n \nhandleThings\n(\nopts\n)\n \n{\n\n  \nif\n \n(\nopts\n \n===\n \nvoid\n \n0\n)\n \n{\n\n    \nopts\n \n=\n \n{};\n\n  \n}\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nhandleThings\n(\nopts\n \n=\n \n{})\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n7.8\n Avoid side effects with default parameters.\n\n\n\n\n\n\nWhy? They are confusing to reason about.\n\n\n\n\nvar\n \nb\n \n=\n \n1\n;\n\n\n// bad\n\n\nfunction\n \ncount\n(\na\n \n=\n \nb\n++\n)\n \n{\n\n  \nconsole\n.\nlog\n(\na\n);\n\n\n}\n\n\ncount\n();\n  \n// 1\n\n\ncount\n();\n  \n// 2\n\n\ncount\n(\n3\n);\n \n// 3\n\n\ncount\n();\n  \n// 3\n\n\n\n\n\n\n\n\n7.9\n Always put default parameters last.\n\n\n\n\n// bad\n\n\nfunction\n \nhandleThings\n(\nopts\n \n=\n \n{},\n \nname\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nhandleThings\n(\nname\n,\n \nopts\n \n=\n \n{})\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n7.10\n Never use the Function constructor to create a new function. eslint: \nno-new-func\n\n\n\n\n\n\nWhy? Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities.\n\n\n\n\n// bad\n\n\nvar\n \nadd\n \n=\n \nnew\n \nFunction\n(\na\n,\n \nb\n,\n \nreturn a + b\n);\n\n\n\n// still bad\n\n\nvar\n \nsubtract\n \n=\n \nFunction\n(\na\n,\n \nb\n,\n \nreturn a - b\n);\n\n\n\n\n\n\n\n\n7.11\n Spacing in a function signature. eslint: \nspace-before-function-paren\n \nspace-before-blocks\n\n\n\n\n\n\nWhy? Consistency is good, and you shouldn\u2019t have to add or remove a space when adding or removing a name.\n\n\n\n\n// bad\n\n\nconst\n \nf\n \n=\n \nfunction\n(){};\n\n\nconst\n \ng\n \n=\n \nfunction\n \n(){};\n\n\nconst\n \nh\n \n=\n \nfunction\n()\n \n{};\n\n\n\n// good\n\n\nconst\n \nx\n \n=\n \nfunction\n \n()\n \n{};\n\n\nconst\n \ny\n \n=\n \nfunction\n \na\n()\n \n{};\n\n\n\n\n\n\n\n\n7.12\n Never mutate parameters. eslint: \nno-param-reassign\n\n\n\n\n\n\nWhy? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.\n\n\n\n\n// bad\n\n\nfunction\n \nf1\n(\nobj\n)\n \n{\n\n  \nobj\n.\nkey\n \n=\n \n1\n;\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nf2\n(\nobj\n)\n \n{\n\n  \nconst\n \nkey\n \n=\n \nObject\n.\nprototype\n.\nhasOwnProperty\n.\ncall\n(\nobj\n,\n \nkey\n)\n \n?\n \nobj\n.\nkey\n \n:\n \n1\n;\n\n\n}\n\n\n\n\n\n\n\n\n7.13\n Never reassign parameters. eslint: \nno-param-reassign\n\n\n\n\n\n\nWhy? Reassigning parameters can lead to unexpected behavior, especially when accessing the \narguments\n object. It can also cause optimization issues, especially in V8.\n\n\n\n\n// bad\n\n\nfunction\n \nf1\n(\na\n)\n \n{\n\n  \na\n \n=\n \n1\n;\n\n  \n// ...\n\n\n}\n\n\n\nfunction\n \nf2\n(\na\n)\n \n{\n\n  \nif\n \n(\n!\na\n)\n \n{\n \na\n \n=\n \n1\n;\n \n}\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nf3\n(\na\n)\n \n{\n\n  \nconst\n \nb\n \n=\n \na\n \n||\n \n1\n;\n\n  \n// ...\n\n\n}\n\n\n\nfunction\n \nf4\n(\na\n \n=\n \n1\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n7.14\n Prefer the use of the spread operator \n...\n to call variadic functions. eslint: \nprefer-spread\n\n\n\n\n\n\nWhy? It's cleaner, you don't need to supply a context, and you can not easily compose \nnew\n with \napply\n.\n\n\n\n\n// bad\n\n\nconst\n \nx\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n];\n\n\nconsole\n.\nlog\n.\napply\n(\nconsole\n,\n \nx\n);\n\n\n\n// good\n\n\nconst\n \nx\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n];\n\n\nconsole\n.\nlog\n(...\nx\n);\n\n\n\n// bad\n\n\nnew\n \n(\nFunction\n.\nprototype\n.\nbind\n.\napply\n(\nDate\n,\n \n[\nnull\n,\n \n2016\n,\n \n8\n,\n \n5\n]));\n\n\n\n// good\n\n\nnew\n \nDate\n(...[\n2016\n,\n \n8\n,\n \n5\n]);\n\n\n\n\n\n\n\n\n7.15\n Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item.\n\n\n\n\n// bad\n\n\nfunction\n \nfoo\n(\nbar\n,\n\n             \nbaz\n,\n\n             \nquux\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nfoo\n(\n\n  \nbar\n,\n\n  \nbaz\n,\n\n  \nquux\n,\n\n\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// bad\n\n\nconsole\n.\nlog\n(\nfoo\n,\n\n  \nbar\n,\n\n  \nbaz\n);\n\n\n\n// good\n\n\nconsole\n.\nlog\n(\n\n  \nfoo\n,\n\n  \nbar\n,\n\n  \nbaz\n,\n\n\n);\n\n\n\n\n\n\n\u2b06 back to top\n\n\nArrow Functions\n\n\n\n\n\n\n8.1\n When you must use function expressions (as when passing an anonymous function), use arrow function notation. eslint: \nprefer-arrow-callback\n, \narrow-spacing\n jscs: \nrequireArrowFunctions\n\n\n\n\n\n\nWhy? It creates a version of the function that executes in the context of \nthis\n, which is usually what you want, and is a more concise syntax.\n\n\nWhy not? If you have a fairly complicated function, you might move that logic out into its own function declaration.\n\n\n\n\n// bad\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n(\nfunction\n \n(\nx\n)\n \n{\n\n  \nconst\n \ny\n \n=\n \nx\n \n+\n \n1\n;\n\n  \nreturn\n \nx\n \n*\n \ny\n;\n\n\n});\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n((\nx\n)\n \n=\n \n{\n\n  \nconst\n \ny\n \n=\n \nx\n \n+\n \n1\n;\n\n  \nreturn\n \nx\n \n*\n \ny\n;\n\n\n});\n\n\n\n\n\n\n\n\n8.2\n If the function body consists of a single expression, omit the braces and use the implicit return. Otherwise, keep the braces and use a \nreturn\n statement. eslint: \narrow-parens\n, \narrow-body-style\n jscs:  \ndisallowParenthesesAroundArrowParam\n, \nrequireShorthandArrowFunctions\n\n\n\n\n\n\nWhy? Syntactic sugar. It reads well when multiple functions are chained together.\n\n\n\n\n// bad\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n(\nnumber\n \n=\n \n{\n\n  \nconst\n \nnextNumber\n \n=\n \nnumber\n \n+\n \n1\n;\n\n  \n`A string containing the \n${\nnextNumber\n}\n.`\n;\n\n\n});\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n(\nnumber\n \n=\n \n`A string containing the \n${\nnumber\n}\n.`\n);\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n((\nnumber\n)\n \n=\n \n{\n\n  \nconst\n \nnextNumber\n \n=\n \nnumber\n \n+\n \n1\n;\n\n  \nreturn\n \n`A string containing the \n${\nnextNumber\n}\n.`\n;\n\n\n});\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n((\nnumber\n,\n \nindex\n)\n \n=\n \n({\n\n  \n[\nindex\n]\n:\n \nnumber\n,\n\n\n}));\n\n\n\n\n\n\n\n\n8.3\n In case the expression spans over multiple lines, wrap it in parentheses for better readability.\n\n\n\n\n\n\nWhy? It shows clearly where the function starts and ends.\n\n\n\n\n// bad\n\n\n[\nget\n,\n \npost\n,\n \nput\n].\nmap\n(\nhttpMethod\n \n=\n \nObject\n.\nprototype\n.\nhasOwnProperty\n.\ncall\n(\n\n    \nhttpMagicObjectWithAVeryLongName\n,\n\n    \nhttpMethod\n,\n\n  \n)\n\n\n);\n\n\n\n// good\n\n\n[\nget\n,\n \npost\n,\n \nput\n].\nmap\n(\nhttpMethod\n \n=\n \n(\n\n  \nObject\n.\nprototype\n.\nhasOwnProperty\n.\ncall\n(\n\n    \nhttpMagicObjectWithAVeryLongName\n,\n\n    \nhttpMethod\n,\n\n  \n)\n\n\n));\n\n\n\n\n\n\n\n\n8.4\n If your function takes a single argument and doesn\u2019t use braces, omit the parentheses. Otherwise, always include parentheses around arguments. eslint: \narrow-parens\n jscs:  \ndisallowParenthesesAroundArrowParam\n\n\n\n\n\n\nWhy? Less visual clutter.\n\n\n\n\n// bad\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n((\nx\n)\n \n=\n \nx\n \n*\n \nx\n);\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n(\nx\n \n=\n \nx\n \n*\n \nx\n);\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n(\nnumber\n \n=\n \n(\n\n  \n`A long string with the \n${\nnumber\n}\n. It\u2019s so long that we don\u2019t want it to take up space on the .map line!`\n\n\n));\n\n\n\n// bad\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n(\nx\n \n=\n \n{\n\n  \nconst\n \ny\n \n=\n \nx\n \n+\n \n1\n;\n\n  \nreturn\n \nx\n \n*\n \ny\n;\n\n\n});\n\n\n\n// good\n\n\n[\n1\n,\n \n2\n,\n \n3\n].\nmap\n((\nx\n)\n \n=\n \n{\n\n  \nconst\n \ny\n \n=\n \nx\n \n+\n \n1\n;\n\n  \nreturn\n \nx\n \n*\n \ny\n;\n\n\n});\n\n\n\n\n\n\n\n\n8.5\n Avoid confusing arrow function syntax (\n=\n) with comparison operators (\n=\n, \n=\n). eslint: \nno-confusing-arrow\n\n\n\n\n// bad\n\n\nconst\n \nitemHeight\n \n=\n \nitem\n \n=\n \nitem\n.\nheight\n \n \n256\n \n?\n \nitem\n.\nlargeSize\n \n:\n \nitem\n.\nsmallSize\n;\n\n\n\n// bad\n\n\nconst\n \nitemHeight\n \n=\n \n(\nitem\n)\n \n=\n \nitem\n.\nheight\n \n \n256\n \n?\n \nitem\n.\nlargeSize\n \n:\n \nitem\n.\nsmallSize\n;\n\n\n\n// good\n\n\nconst\n \nitemHeight\n \n=\n \nitem\n \n=\n \n(\nitem\n.\nheight\n \n \n256\n \n?\n \nitem\n.\nlargeSize\n \n:\n \nitem\n.\nsmallSize\n);\n\n\n\n// good\n\n\nconst\n \nitemHeight\n \n=\n \n(\nitem\n)\n \n=\n \n{\n\n  \nconst\n \n{\n \nheight\n,\n \nlargeSize\n,\n \nsmallSize\n \n}\n \n=\n \nitem\n;\n\n  \nreturn\n \nheight\n \n \n256\n \n?\n \nlargeSize\n \n:\n \nsmallSize\n;\n\n\n};\n\n\n\n\n\n\n\u2b06 back to top\n\n\nClasses \n Constructors\n\n\n\n\n\n\n9.1\n Always use \nclass\n. Avoid manipulating \nprototype\n directly.\n\n\n\n\n\n\nWhy? \nclass\n syntax is more concise and easier to reason about.\n\n\n\n\n// bad\n\n\nfunction\n \nQueue\n(\ncontents\n \n=\n \n[])\n \n{\n\n  \nthis\n.\nqueue\n \n=\n \n[...\ncontents\n];\n\n\n}\n\n\nQueue\n.\nprototype\n.\npop\n \n=\n \nfunction\n \n()\n \n{\n\n  \nconst\n \nvalue\n \n=\n \nthis\n.\nqueue\n[\n0\n];\n\n  \nthis\n.\nqueue\n.\nsplice\n(\n0\n,\n \n1\n);\n\n  \nreturn\n \nvalue\n;\n\n\n};\n\n\n\n\n// good\n\n\nclass\n \nQueue\n \n{\n\n  \nconstructor\n(\ncontents\n \n=\n \n[])\n \n{\n\n    \nthis\n.\nqueue\n \n=\n \n[...\ncontents\n];\n\n  \n}\n\n  \npop\n()\n \n{\n\n    \nconst\n \nvalue\n \n=\n \nthis\n.\nqueue\n[\n0\n];\n\n    \nthis\n.\nqueue\n.\nsplice\n(\n0\n,\n \n1\n);\n\n    \nreturn\n \nvalue\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n9.2\n Use \nextends\n for inheritance.\n\n\n\n\n\n\nWhy? It is a built-in way to inherit prototype functionality without breaking \ninstanceof\n.\n\n\n\n\n// bad\n\n\nconst\n \ninherits\n \n=\n \nrequire\n(\ninherits\n);\n\n\nfunction\n \nPeekableQueue\n(\ncontents\n)\n \n{\n\n  \nQueue\n.\napply\n(\nthis\n,\n \ncontents\n);\n\n\n}\n\n\ninherits\n(\nPeekableQueue\n,\n \nQueue\n);\n\n\nPeekableQueue\n.\nprototype\n.\npeek\n \n=\n \nfunction\n \n()\n \n{\n\n  \nreturn\n \nthis\n.\nqueue\n[\n0\n];\n\n\n};\n\n\n\n// good\n\n\nclass\n \nPeekableQueue\n \nextends\n \nQueue\n \n{\n\n  \npeek\n()\n \n{\n\n    \nreturn\n \nthis\n.\nqueue\n[\n0\n];\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n9.3\n Methods can return \nthis\n to help with method chaining.\n\n\n\n\n// bad\n\n\nJedi\n.\nprototype\n.\njump\n \n=\n \nfunction\n \n()\n \n{\n\n  \nthis\n.\njumping\n \n=\n \ntrue\n;\n\n  \nreturn\n \ntrue\n;\n\n\n};\n\n\n\nJedi\n.\nprototype\n.\nsetHeight\n \n=\n \nfunction\n \n(\nheight\n)\n \n{\n\n  \nthis\n.\nheight\n \n=\n \nheight\n;\n\n\n};\n\n\n\nconst\n \nluke\n \n=\n \nnew\n \nJedi\n();\n\n\nluke\n.\njump\n();\n \n// =\n true\n\n\nluke\n.\nsetHeight\n(\n20\n);\n \n// =\n undefined\n\n\n\n// good\n\n\nclass\n \nJedi\n \n{\n\n  \njump\n()\n \n{\n\n    \nthis\n.\njumping\n \n=\n \ntrue\n;\n\n    \nreturn\n \nthis\n;\n\n  \n}\n\n\n  \nsetHeight\n(\nheight\n)\n \n{\n\n    \nthis\n.\nheight\n \n=\n \nheight\n;\n\n    \nreturn\n \nthis\n;\n\n  \n}\n\n\n}\n\n\n\nconst\n \nluke\n \n=\n \nnew\n \nJedi\n();\n\n\n\nluke\n.\njump\n()\n\n  \n.\nsetHeight\n(\n20\n);\n\n\n\n\n\n\n\n\n9.4\n It's okay to write a custom toString() method, just make sure it works successfully and causes no side effects.\n\n\n\n\nclass\n \nJedi\n \n{\n\n  \nconstructor\n(\noptions\n \n=\n \n{})\n \n{\n\n    \nthis\n.\nname\n \n=\n \noptions\n.\nname\n \n||\n \nno name\n;\n\n  \n}\n\n\n  \ngetName\n()\n \n{\n\n    \nreturn\n \nthis\n.\nname\n;\n\n  \n}\n\n\n  \ntoString\n()\n \n{\n\n    \nreturn\n \n`Jedi - \n${\nthis\n.\ngetName\n()\n}\n`\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n9.5\n Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: \nno-useless-constructor\n\n\n\n\n// bad\n\n\nclass\n \nJedi\n \n{\n\n  \nconstructor\n()\n \n{}\n\n\n  \ngetName\n()\n \n{\n\n    \nreturn\n \nthis\n.\nname\n;\n\n  \n}\n\n\n}\n\n\n\n// bad\n\n\nclass\n \nRey\n \nextends\n \nJedi\n \n{\n\n  \nconstructor\n(...\nargs\n)\n \n{\n\n    \nsuper\n(...\nargs\n);\n\n  \n}\n\n\n}\n\n\n\n// good\n\n\nclass\n \nRey\n \nextends\n \nJedi\n \n{\n\n  \nconstructor\n(...\nargs\n)\n \n{\n\n    \nsuper\n(...\nargs\n);\n\n    \nthis\n.\nname\n \n=\n \nRey\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n9.6\n Avoid duplicate class members. eslint: \nno-dupe-class-members\n\n\n\n\n\n\nWhy? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.\n\n\n\n\n// bad\n\n\nclass\n \nFoo\n \n{\n\n  \nbar\n()\n \n{\n \nreturn\n \n1\n;\n \n}\n\n  \nbar\n()\n \n{\n \nreturn\n \n2\n;\n \n}\n\n\n}\n\n\n\n// good\n\n\nclass\n \nFoo\n \n{\n\n  \nbar\n()\n \n{\n \nreturn\n \n1\n;\n \n}\n\n\n}\n\n\n\n// good\n\n\nclass\n \nFoo\n \n{\n\n  \nbar\n()\n \n{\n \nreturn\n \n2\n;\n \n}\n\n\n}\n\n\n\n\n\n\n\u2b06 back to top\n\n\nModules\n\n\n\n\n\n\n10.1\n Always use modules (\nimport\n/\nexport\n) over a non-standard module system. You can always transpile to your preferred module system.\n\n\n\n\n\n\nWhy? Modules are the future, let's start using the future now.\n\n\n\n\n// bad\n\n\nconst\n \nAirbnbStyleGuide\n \n=\n \nrequire\n(\n./AirbnbStyleGuide\n);\n\n\nmodule\n.\nexports\n \n=\n \nAirbnbStyleGuide\n.\nes6\n;\n\n\n\n// ok\n\n\nimport\n \nAirbnbStyleGuide\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n\nexport\n \ndefault\n \nAirbnbStyleGuide\n.\nes6\n;\n\n\n\n// best\n\n\nimport\n \n{\n \nes6\n \n}\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n\nexport\n \ndefault\n \nes6\n;\n\n\n\n\n\n\n\n\n10.2\n Do not use wildcard imports.\n\n\n\n\n\n\nWhy? This makes sure you have a single default export.\n\n\n\n\n// bad\n\n\nimport\n \n*\n \nas\n \nAirbnbStyleGuide\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n\n\n// good\n\n\nimport\n \nAirbnbStyleGuide\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n\n\n\n\n\n\n\n10.3\n And do not export directly from an import.\n\n\n\n\n\n\nWhy? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.\n\n\n\n\n// bad\n\n\n// filename es6.js\n\n\nexport\n \n{\n \nes6\n \nas\n \ndefault\n \n}\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n\n\n// good\n\n\n// filename es6.js\n\n\nimport\n \n{\n \nes6\n \n}\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n\nexport\n \ndefault\n \nes6\n;\n\n\n\n\n\n\n\n\n10.4\n Only import from a path in one place.\neslint: \nno-duplicate-imports\n\n\nWhy? Having multiple lines that import from the same path can make code harder to maintain.\n\n\n\n\n\n\n\n\n// bad\n\n\nimport\n \nfoo\n \nfrom\n \nfoo\n;\n\n\n// \u2026 some other imports \u2026 //\n\n\nimport\n \n{\n \nnamed1\n,\n \nnamed2\n \n}\n \nfrom\n \nfoo\n;\n\n\n\n// good\n\n\nimport\n \nfoo\n,\n \n{\n \nnamed1\n,\n \nnamed2\n \n}\n \nfrom\n \nfoo\n;\n\n\n\n// good\n\n\nimport\n \nfoo\n,\n \n{\n\n  \nnamed1\n,\n\n  \nnamed2\n,\n\n\n}\n \nfrom\n \nfoo\n;\n\n\n\n\n\n\n\n\n10.5\n Do not export mutable bindings.\neslint: \nimport/no-mutable-exports\n\n\nWhy? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.\n\n\n\n\n\n\n\n\n// bad\n\n\nlet\n \nfoo\n \n=\n \n3\n;\n\n\nexport\n \n{\n \nfoo\n \n};\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \n3\n;\n\n\nexport\n \n{\n \nfoo\n \n};\n\n\n\n\n\n\n\n\n10.6\n In modules with a single export, prefer default export over named export.\neslint: \nimport/prefer-default-export\n\n\n\n\n// bad\n\n\nexport\n \nfunction\n \nfoo\n()\n \n{}\n\n\n\n// good\n\n\nexport\n \ndefault\n \nfunction\n \nfoo\n()\n \n{}\n\n\n\n\n\n\n\n\n10.7\n Put all \nimport\ns above non-import statements.\neslint: \nimport/first\n\n\nWhy? Since \nimport\ns are hoisted, keeping them all at the top prevents surprising behavior.\n\n\n\n\n\n\n\n\n// bad\n\n\nimport\n \nfoo\n \nfrom\n \nfoo\n;\n\n\nfoo\n.\ninit\n();\n\n\n\nimport\n \nbar\n \nfrom\n \nbar\n;\n\n\n\n// good\n\n\nimport\n \nfoo\n \nfrom\n \nfoo\n;\n\n\nimport\n \nbar\n \nfrom\n \nbar\n;\n\n\n\nfoo\n.\ninit\n();\n\n\n\n\n\n\n\n\n10.8\n Multiline imports should be indented just like multiline array and object literals.\n\n\n\n\n\n\nWhy? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.\n\n\n\n\n// bad\n\n\nimport\n \n{\nlongNameA\n,\n \nlongNameB\n,\n \nlongNameC\n,\n \nlongNameD\n,\n \nlongNameE\n}\n \nfrom\n \npath\n;\n\n\n\n// good\n\n\nimport\n \n{\n\n  \nlongNameA\n,\n\n  \nlongNameB\n,\n\n  \nlongNameC\n,\n\n  \nlongNameD\n,\n\n  \nlongNameE\n,\n\n\n}\n \nfrom\n \npath\n;\n\n\n\n\n\n\n\n\n10.9\n Disallow Webpack loader syntax in module import statements.\neslint: \nimport/no-webpack-loader-syntax\n\n\nWhy? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in \nwebpack.config.js\n.\n\n\n\n\n\n\n\n\n// bad\n\n\nimport\n \nfooSass\n \nfrom\n \ncss!sass!foo.scss\n;\n\n\nimport\n \nbarCss\n \nfrom\n \nstyle!css!bar.css\n;\n\n\n\n// good\n\n\nimport\n \nfooSass\n \nfrom\n \nfoo.scss\n;\n\n\nimport\n \nbarCss\n \nfrom\n \nbar.css\n;\n\n\n\n\n\n\n\u2b06 back to top\n\n\nIterators and Generators\n\n\n\n\n\n\n11.1\n Don't use iterators. Prefer JavaScript's higher-order functions instead of loops like \nfor-in\n or \nfor-of\n. eslint: \nno-iterator\n \nno-restricted-syntax\n\n\n\n\n\n\nWhy? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.\n\n\nUse \nmap()\n / \nevery()\n / \nfilter()\n / \nfind()\n / \nfindIndex()\n / \nreduce()\n / \nsome()\n / ... to iterate over arrays, and \nObject.keys()\n / \nObject.values()\n / \nObject.entries()\n to produce arrays so you can iterate over objects.\n\n\n\n\nconst\n \nnumbers\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n];\n\n\n\n// bad\n\n\nlet\n \nsum\n \n=\n \n0\n;\n\n\nfor\n \n(\nlet\n \nnum\n \nof\n \nnumbers\n)\n \n{\n\n  \nsum\n \n+=\n \nnum\n;\n\n\n}\n\n\nsum\n \n===\n \n15\n;\n\n\n\n// good\n\n\nlet\n \nsum\n \n=\n \n0\n;\n\n\nnumbers\n.\nforEach\n(\nnum\n \n=\n \nsum\n \n+=\n \nnum\n);\n\n\nsum\n \n===\n \n15\n;\n\n\n\n// best (use the functional force)\n\n\nconst\n \nsum\n \n=\n \nnumbers\n.\nreduce\n((\ntotal\n,\n \nnum\n)\n \n=\n \ntotal\n \n+\n \nnum\n,\n \n0\n);\n\n\nsum\n \n===\n \n15\n;\n\n\n\n// bad\n\n\nconst\n \nincreasedByOne\n \n=\n \n[];\n\n\nfor\n \n(\nlet\n \ni\n \n=\n \n0\n;\n \ni\n \n \nnumbers\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n  \nincreasedByOne\n.\npush\n(\nnumbers\n[\ni\n]\n \n+\n \n1\n);\n\n\n}\n\n\n\n// good\n\n\nconst\n \nincreasedByOne\n \n=\n \n[];\n\n\nnumbers\n.\nforEach\n(\nnum\n \n=\n \nincreasedByOne\n.\npush\n(\nnum\n \n+\n \n1\n));\n\n\n\n// best (keeping it functional)\n\n\nconst\n \nincreasedByOne\n \n=\n \nnumbers\n.\nmap\n(\nnum\n \n=\n \nnum\n \n+\n \n1\n);\n\n\n\n\n\n\n\n\n11.2\n Don't use generators for now.\n\n\n\n\n\n\nWhy? They don't transpile well to ES5.\n\n\n\n\n\n\n11.3\n If you must use generators, or if you disregard \nour advice\n, make sure their function signature is spaced properly. eslint: \ngenerator-star-spacing\n\n\n\n\n\n\nWhy? \nfunction\n and \n*\n are part of the same conceptual keyword - \n*\n is not a modifier for \nfunction\n, \nfunction*\n is a unique construct, different from \nfunction\n.\n\n\n\n\n// bad\n\n\nfunction\n \n*\n \nfoo\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// bad\n\n\nconst\n \nbar\n \n=\n \nfunction\n \n*\n \n()\n \n{\n\n  \n// ...\n\n\n};\n\n\n\n// bad\n\n\nconst\n \nbaz\n \n=\n \nfunction\n \n*\n()\n \n{\n\n  \n// ...\n\n\n};\n\n\n\n// bad\n\n\nconst\n \nquux\n \n=\n \nfunction\n*\n()\n \n{\n\n  \n// ...\n\n\n};\n\n\n\n// bad\n\n\nfunction\n*\nfoo\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// bad\n\n\nfunction\n \n*\nfoo\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// very bad\n\n\nfunction\n\n\n*\n\n\nfoo\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// very bad\n\n\nconst\n \nwat\n \n=\n \nfunction\n\n\n*\n\n\n()\n \n{\n\n  \n// ...\n\n\n};\n\n\n\n// good\n\n\nfunction\n*\n \nfoo\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \nfunction\n*\n \n()\n \n{\n\n  \n// ...\n\n\n};\n\n\n\n\n\n\n\u2b06 back to top\n\n\nProperties\n\n\n\n\n\n\n12.1\n Use dot notation when accessing properties. eslint: \ndot-notation\n jscs: \nrequireDotNotation\n\n\n\n\nconst\n \nluke\n \n=\n \n{\n\n  \njedi\n:\n \ntrue\n,\n\n  \nage\n:\n \n28\n,\n\n\n};\n\n\n\n// bad\n\n\nconst\n \nisJedi\n \n=\n \nluke\n[\njedi\n];\n\n\n\n// good\n\n\nconst\n \nisJedi\n \n=\n \nluke\n.\njedi\n;\n\n\n\n\n\n\n\n\n12.2\n Use bracket notation \n[]\n when accessing properties with a variable.\n\n\n\n\nconst\n \nluke\n \n=\n \n{\n\n  \njedi\n:\n \ntrue\n,\n\n  \nage\n:\n \n28\n,\n\n\n};\n\n\n\nfunction\n \ngetProp\n(\nprop\n)\n \n{\n\n  \nreturn\n \nluke\n[\nprop\n];\n\n\n}\n\n\n\nconst\n \nisJedi\n \n=\n \ngetProp\n(\njedi\n);\n\n\n\n\n\n\n\u2b06 back to top\n\n\nVariables\n\n\n\n\n\n\n13.1\n Always use \nconst\n to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: \nno-undef\n \nprefer-const\n\n\n\n\n// bad\n\n\nsuperPower\n \n=\n \nnew\n \nSuperPower\n();\n\n\n\n// good\n\n\nconst\n \nsuperPower\n \n=\n \nnew\n \nSuperPower\n();\n\n\n\n\n\n\n\n\n13.2\n Use one \nconst\n declaration per variable. eslint: \none-var\n jscs: \ndisallowMultipleVarDecl\n\n\n\n\n\n\nWhy? It's easier to add new variable declarations this way, and you never have to worry about swapping out a \n;\n for a \n,\n or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.\n\n\n\n\n// bad\n\n\nconst\n \nitems\n \n=\n \ngetItems\n(),\n\n    \ngoSportsTeam\n \n=\n \ntrue\n,\n\n    \ndragonball\n \n=\n \nz\n;\n\n\n\n// bad\n\n\n// (compare to above, and try to spot the mistake)\n\n\nconst\n \nitems\n \n=\n \ngetItems\n(),\n\n    \ngoSportsTeam\n \n=\n \ntrue\n;\n\n    \ndragonball\n \n=\n \nz\n;\n\n\n\n// good\n\n\nconst\n \nitems\n \n=\n \ngetItems\n();\n\n\nconst\n \ngoSportsTeam\n \n=\n \ntrue\n;\n\n\nconst\n \ndragonball\n \n=\n \nz\n;\n\n\n\n\n\n\n\n\n13.3\n Group all your \nconst\ns and then group all your \nlet\ns.\n\n\n\n\n\n\nWhy? This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.\n\n\n\n\n// bad\n\n\nlet\n \ni\n,\n \nlen\n,\n \ndragonball\n,\n\n    \nitems\n \n=\n \ngetItems\n(),\n\n    \ngoSportsTeam\n \n=\n \ntrue\n;\n\n\n\n// bad\n\n\nlet\n \ni\n;\n\n\nconst\n \nitems\n \n=\n \ngetItems\n();\n\n\nlet\n \ndragonball\n;\n\n\nconst\n \ngoSportsTeam\n \n=\n \ntrue\n;\n\n\nlet\n \nlen\n;\n\n\n\n// good\n\n\nconst\n \ngoSportsTeam\n \n=\n \ntrue\n;\n\n\nconst\n \nitems\n \n=\n \ngetItems\n();\n\n\nlet\n \ndragonball\n;\n\n\nlet\n \ni\n;\n\n\nlet\n \nlength\n;\n\n\n\n\n\n\n\n\n13.4\n Assign variables where you need them, but place them in a reasonable place.\n\n\n\n\n\n\nWhy? \nlet\n and \nconst\n are block scoped and not function scoped.\n\n\n\n\n// bad - unnecessary function call\n\n\nfunction\n \ncheckName\n(\nhasName\n)\n \n{\n\n  \nconst\n \nname\n \n=\n \ngetName\n();\n\n\n  \nif\n \n(\nhasName\n \n===\n \ntest\n)\n \n{\n\n    \nreturn\n \nfalse\n;\n\n  \n}\n\n\n  \nif\n \n(\nname\n \n===\n \ntest\n)\n \n{\n\n    \nthis\n.\nsetName\n(\n);\n\n    \nreturn\n \nfalse\n;\n\n  \n}\n\n\n  \nreturn\n \nname\n;\n\n\n}\n\n\n\n// good\n\n\nfunction\n \ncheckName\n(\nhasName\n)\n \n{\n\n  \nif\n \n(\nhasName\n \n===\n \ntest\n)\n \n{\n\n    \nreturn\n \nfalse\n;\n\n  \n}\n\n\n  \nconst\n \nname\n \n=\n \ngetName\n();\n\n\n  \nif\n \n(\nname\n \n===\n \ntest\n)\n \n{\n\n    \nthis\n.\nsetName\n(\n);\n\n    \nreturn\n \nfalse\n;\n\n  \n}\n\n\n  \nreturn\n \nname\n;\n\n\n}\n\n\n\n\n\n\n\n\nDon't chain variable assignments.\n\n\nChaining variable assignments creates implicit global variables.\n\n\n\n\n// bad\n\n\n(\nfunction\n \nexample\n()\n \n{\n\n  \n// JavaScript interprets this as\n\n  \n// let a = ( b = ( c = 1 ) );\n\n  \n// The let keyword only applies to variable a; variables b and c become\n\n  \n// global variables.\n\n  \nlet\n \na\n \n=\n \nb\n \n=\n \nc\n \n=\n \n1\n;\n\n\n}());\n\n\n\nconsole\n.\nlog\n(\na\n);\n \n// undefined\n\n\nconsole\n.\nlog\n(\nb\n);\n \n// 1\n\n\nconsole\n.\nlog\n(\nc\n);\n \n// 1\n\n\n\n// good\n\n\n(\nfunction\n \nexample\n()\n \n{\n\n  \nlet\n \na\n \n=\n \n1\n;\n\n  \nlet\n \nb\n \n=\n \na\n;\n\n  \nlet\n \nc\n \n=\n \na\n;\n\n\n}());\n\n\n\nconsole\n.\nlog\n(\na\n);\n \n// undefined\n\n\nconsole\n.\nlog\n(\nb\n);\n \n// undefined\n\n\nconsole\n.\nlog\n(\nc\n);\n \n// undefined\n\n\n\n// the same applies for `const`\n\n\n\n\n\n\n\n\n13.6\n Avoid using unary increments and decrements (++, --). eslint \nno-plusplus\n\n\n\n\n\n\nWhy? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like \nnum += 1\n instead of \nnum++\n or \nnum ++\n. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.\n\n\n\n\n// bad\n\n\n\nlet\n \narray\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n];\n\n\nlet\n \nnum\n \n=\n \n1\n;\n\n\nnum\n++\n;\n\n\n--\nnum\n;\n\n\n\nlet\n \nsum\n \n=\n \n0\n;\n\n\nlet\n \ntruthyCount\n \n=\n \n0\n;\n\n\nfor\n \n(\nlet\n \ni\n \n=\n \n0\n;\n \ni\n \n \narray\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n  \nlet\n \nvalue\n \n=\n \narray\n[\ni\n];\n\n  \nsum\n \n+=\n \nvalue\n;\n\n  \nif\n \n(\nvalue\n)\n \n{\n\n    \ntruthyCount\n++\n;\n\n  \n}\n\n\n}\n\n\n\n// good\n\n\n\nlet\n \narray\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n];\n\n\nlet\n \nnum\n \n=\n \n1\n;\n\n\nnum\n \n+=\n \n1\n;\n\n\nnum\n \n-=\n \n1\n;\n\n\n\nconst\n \nsum\n \n=\n \narray\n.\nreduce\n((\na\n,\n \nb\n)\n \n=\n \na\n \n+\n \nb\n,\n \n0\n);\n\n\nconst\n \ntruthyCount\n \n=\n \narray\n.\nfilter\n(\nBoolean\n).\nlength\n;\n\n\n\n\n\n\n\u2b06 back to top\n\n\nHoisting\n\n\n\n\n\n\n14.1\n \nvar\n declarations get hoisted to the top of their scope, their assignment does not. \nconst\n and \nlet\n declarations are blessed with a new concept called \nTemporal Dead Zones (TDZ)\n. It's important to know why \ntypeof is no longer safe\n.\n\n\n\n\n// we know this wouldn\nt work (assuming there\n\n\n// is no notDefined global variable)\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nnotDefined\n);\n \n// =\n throws a ReferenceError\n\n\n}\n\n\n\n// creating a variable declaration after you\n\n\n// reference the variable will work due to\n\n\n// variable hoisting. Note: the assignment\n\n\n// value of `true` is not hoisted.\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nconsole\n.\nlog\n(\ndeclaredButNotAssigned\n);\n \n// =\n undefined\n\n  \nvar\n \ndeclaredButNotAssigned\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n// the interpreter is hoisting the variable\n\n\n// declaration to the top of the scope,\n\n\n// which means our example could be rewritten as:\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nlet\n \ndeclaredButNotAssigned\n;\n\n  \nconsole\n.\nlog\n(\ndeclaredButNotAssigned\n);\n \n// =\n undefined\n\n  \ndeclaredButNotAssigned\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n// using const and let\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nconsole\n.\nlog\n(\ndeclaredButNotAssigned\n);\n \n// =\n throws a ReferenceError\n\n  \nconsole\n.\nlog\n(\ntypeof\n \ndeclaredButNotAssigned\n);\n \n// =\n throws a ReferenceError\n\n  \nconst\n \ndeclaredButNotAssigned\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\n\n\n14.2\n Anonymous function expressions hoist their variable name, but not the function assignment.\n\n\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nanonymous\n);\n \n// =\n undefined\n\n\n  \nanonymous\n();\n \n// =\n TypeError anonymous is not a function\n\n\n  \nvar\n \nanonymous\n \n=\n \nfunction\n \n()\n \n{\n\n    \nconsole\n.\nlog\n(\nanonymous function expression\n);\n\n  \n};\n\n\n}\n\n\n\n\n\n\n\n\n14.3\n Named function expressions hoist the variable name, not the function name or the function body.\n\n\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nnamed\n);\n \n// =\n undefined\n\n\n  \nnamed\n();\n \n// =\n TypeError named is not a function\n\n\n  \nsuperPower\n();\n \n// =\n ReferenceError superPower is not defined\n\n\n  \nvar\n \nnamed\n \n=\n \nfunction\n \nsuperPower\n()\n \n{\n\n    \nconsole\n.\nlog\n(\nFlying\n);\n\n  \n};\n\n\n}\n\n\n\n// the same is true when the function name\n\n\n// is the same as the variable name.\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nnamed\n);\n \n// =\n undefined\n\n\n  \nnamed\n();\n \n// =\n TypeError named is not a function\n\n\n  \nvar\n \nnamed\n \n=\n \nfunction\n \nnamed\n()\n \n{\n\n    \nconsole\n.\nlog\n(\nnamed\n);\n\n  \n};\n\n\n}\n\n\n\n\n\n\n\n\n14.4\n Function declarations hoist their name and the function body.\n\n\n\n\nfunction\n \nexample\n()\n \n{\n\n  \nsuperPower\n();\n \n// =\n Flying\n\n\n  \nfunction\n \nsuperPower\n()\n \n{\n\n    \nconsole\n.\nlog\n(\nFlying\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\nFor more information refer to \nJavaScript Scoping \n Hoisting\n by \nBen Cherry\n.\n\n\n\n\n\u2b06 back to top\n\n\nComparison Operators \n Equality\n\n\n\n\n\n\n\n\n15.1\n Use \n===\n and \n!==\n over \n==\n and \n!=\n. eslint: \neqeqeq\n\n\n\n\n\n\n15.2\n Conditional statements such as the \nif\n statement evaluate their expression using coercion with the \nToBoolean\n abstract method and always follow these simple rules:\n\n\n\n\n\n\nObjects\n evaluate to \ntrue\n\n\n\n\nUndefined\n evaluates to \nfalse\n\n\nNull\n evaluates to \nfalse\n\n\nBooleans\n evaluate to \nthe value of the boolean\n\n\nNumbers\n evaluate to \nfalse\n if \n+0, -0, or NaN\n, otherwise \ntrue\n\n\nStrings\n evaluate to \nfalse\n if an empty string \n''\n, otherwise \ntrue\n\n\n\n\nif\n \n([\n0\n]\n \n \n[])\n \n{\n\n  \n// true\n\n  \n// an array (even an empty one) is an object, objects will evaluate to true\n\n\n}\n\n\n\n\n\n\n\n\n15.3\n Use shortcuts for booleans, but explicit comparisons for strings and numbers.\n\n\n\n\n// bad\n\n\nif\n \n(\nisValid\n \n===\n \ntrue\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\nisValid\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// bad\n\n\nif\n \n(\nname\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\nname\n \n!==\n \n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// bad\n\n\nif\n \n(\ncollection\n.\nlength\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\ncollection\n.\nlength\n \n \n0\n)\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n\n\n15.4\n For more information see \nTruth Equality and JavaScript\n by Angus Croll.\n\n\n\n\n\n\n15.5\n Use braces to create blocks in \ncase\n and \ndefault\n clauses that contain lexical declarations (e.g. \nlet\n, \nconst\n, \nfunction\n, and \nclass\n).\n\n\n\n\n\n\n\n\nWhy? Lexical declarations are visible in the entire \nswitch\n block but only get initialized when assigned, which only happens when its \ncase\n is reached. This causes problems when multiple \ncase\n clauses attempt to define the same thing.\n\n\n\n\neslint rules: \nno-case-declarations\n.\n\n\n// bad\n\n\nswitch\n \n(\nfoo\n)\n \n{\n\n  \ncase\n \n1\n:\n\n    \nlet\n \nx\n \n=\n \n1\n;\n\n    \nbreak\n;\n\n  \ncase\n \n2\n:\n\n    \nconst\n \ny\n \n=\n \n2\n;\n\n    \nbreak\n;\n\n  \ncase\n \n3\n:\n\n    \nfunction\n \nf\n()\n \n{\n\n      \n// ...\n\n    \n}\n\n    \nbreak\n;\n\n  \ndefault\n:\n\n    \nclass\n \nC\n \n{}\n\n\n}\n\n\n\n// good\n\n\nswitch\n \n(\nfoo\n)\n \n{\n\n  \ncase\n \n1\n:\n \n{\n\n    \nlet\n \nx\n \n=\n \n1\n;\n\n    \nbreak\n;\n\n  \n}\n\n  \ncase\n \n2\n:\n \n{\n\n    \nconst\n \ny\n \n=\n \n2\n;\n\n    \nbreak\n;\n\n  \n}\n\n  \ncase\n \n3\n:\n \n{\n\n    \nfunction\n \nf\n()\n \n{\n\n      \n// ...\n\n    \n}\n\n    \nbreak\n;\n\n  \n}\n\n  \ncase\n \n4\n:\n\n    \nbar\n();\n\n    \nbreak\n;\n\n  \ndefault\n:\n \n{\n\n    \nclass\n \nC\n \n{}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n15.6\n Ternaries should not be nested and generally be single line expressions.\n\n\n\n\neslint rules: \nno-nested-ternary\n.\n\n\n// bad\n\n\nconst\n \nfoo\n \n=\n \nmaybe1\n \n \nmaybe2\n\n  \n?\n \nbar\n\n  \n:\n \nvalue1\n \n \nvalue2\n \n?\n \nbaz\n \n:\n \nnull\n;\n\n\n\n// better\n\n\nconst\n \nmaybeNull\n \n=\n \nvalue1\n \n \nvalue2\n \n?\n \nbaz\n \n:\n \nnull\n;\n\n\n\nconst\n \nfoo\n \n=\n \nmaybe1\n \n \nmaybe2\n\n  \n?\n \nbar\n\n  \n:\n \nmaybeNull\n;\n\n\n\n// best\n\n\nconst\n \nmaybeNull\n \n=\n \nvalue1\n \n \nvalue2\n \n?\n \nbaz\n \n:\n \nnull\n;\n\n\n\nconst\n \nfoo\n \n=\n \nmaybe1\n \n \nmaybe2\n \n?\n \nbar\n \n:\n \nmaybeNull\n;\n\n\n\n\n\n\n\n\n15.7\n Avoid unneeded ternary statements.\n\n\n\n\neslint rules: \nno-unneeded-ternary\n.\n\n\n// bad\n\n\nconst\n \nfoo\n \n=\n \na\n \n?\n \na\n \n:\n \nb\n;\n\n\nconst\n \nbar\n \n=\n \nc\n \n?\n \ntrue\n \n:\n \nfalse\n;\n\n\nconst\n \nbaz\n \n=\n \nc\n \n?\n \nfalse\n \n:\n \ntrue\n;\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \na\n \n||\n \nb\n;\n\n\nconst\n \nbar\n \n=\n \n!!\nc\n;\n\n\nconst\n \nbaz\n \n=\n \n!\nc\n;\n\n\n\n\n\n\n\u2b06 back to top\n\n\nBlocks\n\n\n\n\n\n\n16.1\n Use braces with all multi-line blocks.\n\n\n\n\n// bad\n\n\nif\n \n(\ntest\n)\n\n  \nreturn\n \nfalse\n;\n\n\n\n// good\n\n\nif\n \n(\ntest\n)\n \nreturn\n \nfalse\n;\n\n\n\n// good\n\n\nif\n \n(\ntest\n)\n \n{\n\n  \nreturn\n \nfalse\n;\n\n\n}\n\n\n\n// bad\n\n\nfunction\n \nfoo\n()\n \n{\n \nreturn\n \nfalse\n;\n \n}\n\n\n\n// good\n\n\nfunction\n \nbar\n()\n \n{\n\n  \nreturn\n \nfalse\n;\n\n\n}\n\n\n\n\n\n\n\n\n16.2\n If you're using multi-line blocks with \nif\n and \nelse\n, put \nelse\n on the same line as your \nif\n block's closing brace. eslint: \nbrace-style\n jscs:  \ndisallowNewlineBeforeBlockStatements\n\n\n\n\n// bad\n\n\nif\n \n(\ntest\n)\n \n{\n\n  \nthing1\n();\n\n  \nthing2\n();\n\n\n}\n\n\nelse\n \n{\n\n  \nthing3\n();\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\ntest\n)\n \n{\n\n  \nthing1\n();\n\n  \nthing2\n();\n\n\n}\n \nelse\n \n{\n\n  \nthing3\n();\n\n\n}\n\n\n\n\n\n\n\u2b06 back to top\n\n\nComments\n\n\n\n\n\n\n17.1\n Use \n/** ... */\n for multi-line comments.\n\n\n\n\n// bad\n\n\n// make() returns a new element\n\n\n// based on the passed in tag name\n\n\n//\n\n\n// @param {String} tag\n\n\n// @return {Element} element\n\n\nfunction\n \nmake\n(\ntag\n)\n \n{\n\n\n  \n// ...\n\n\n  \nreturn\n \nelement\n;\n\n\n}\n\n\n\n// good\n\n\n/**\n\n\n * make() returns a new element\n\n\n * based on the passed-in tag name\n\n\n */\n\n\nfunction\n \nmake\n(\ntag\n)\n \n{\n\n\n  \n// ...\n\n\n  \nreturn\n \nelement\n;\n\n\n}\n\n\n\n\n\n\n\n\n17.2\n Use \n//\n for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it's on the first line of a block.\n\n\n\n\n// bad\n\n\nconst\n \nactive\n \n=\n \ntrue\n;\n  \n// is current tab\n\n\n\n// good\n\n\n// is current tab\n\n\nconst\n \nactive\n \n=\n \ntrue\n;\n\n\n\n// bad\n\n\nfunction\n \ngetType\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nfetching type...\n);\n\n  \n// set the default type to \nno type\n\n  \nconst\n \ntype\n \n=\n \nthis\n.\ntype\n \n||\n \nno type\n;\n\n\n  \nreturn\n \ntype\n;\n\n\n}\n\n\n\n// good\n\n\nfunction\n \ngetType\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nfetching type...\n);\n\n\n  \n// set the default type to \nno type\n\n  \nconst\n \ntype\n \n=\n \nthis\n.\ntype\n \n||\n \nno type\n;\n\n\n  \nreturn\n \ntype\n;\n\n\n}\n\n\n\n// also good\n\n\nfunction\n \ngetType\n()\n \n{\n\n  \n// set the default type to \nno type\n\n  \nconst\n \ntype\n \n=\n \nthis\n.\ntype\n \n||\n \nno type\n;\n\n\n  \nreturn\n \ntype\n;\n\n\n}\n\n\n\n\n\n\n\n\n17.3\n Start all comments with a space to make it easier to read. eslint: \nspaced-comment\n\n\n\n\n// bad\n\n\n//is current tab\n\n\nconst\n \nactive\n \n=\n \ntrue\n;\n\n\n\n// good\n\n\n// is current tab\n\n\nconst\n \nactive\n \n=\n \ntrue\n;\n\n\n\n// bad\n\n\n/**\n\n\n *make() returns a new element\n\n\n *based on the passed-in tag name\n\n\n */\n\n\nfunction\n \nmake\n(\ntag\n)\n \n{\n\n\n  \n// ...\n\n\n  \nreturn\n \nelement\n;\n\n\n}\n\n\n\n// good\n\n\n/**\n\n\n * make() returns a new element\n\n\n * based on the passed-in tag name\n\n\n */\n\n\nfunction\n \nmake\n(\ntag\n)\n \n{\n\n\n  \n// ...\n\n\n  \nreturn\n \nelement\n;\n\n\n}\n\n\n\n\n\n\n\n\n\n\n17.4\n Prefixing your comments with \nFIXME\n or \nTODO\n helps other developers quickly understand if you're pointing out a problem that needs to be revisited, or if you're suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are \nFIXME: -- need to figure this out\n or \nTODO: -- need to implement\n.\n\n\n\n\n\n\n17.5\n Use \n// FIXME:\n to annotate problems.\n\n\n\n\n\n\nclass\n \nCalculator\n \nextends\n \nAbacus\n \n{\n\n  \nconstructor\n()\n \n{\n\n    \nsuper\n();\n\n\n    \n// FIXME: shouldn\nt use a global here\n\n    \ntotal\n \n=\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n17.6\n Use \n// TODO:\n to annotate solutions to problems.\n\n\n\n\nclass\n \nCalculator\n \nextends\n \nAbacus\n \n{\n\n  \nconstructor\n()\n \n{\n\n    \nsuper\n();\n\n\n    \n// TODO: total should be configurable by an options param\n\n    \nthis\n.\ntotal\n \n=\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\u2b06 back to top\n\n\nWhitespace\n\n\n\n\n\n\n18.1\n Use soft tabs set to 2 spaces. eslint: \nindent\n jscs: \nvalidateIndentation\n\n\n\n\n// bad\n\n\nfunction\n \nfoo\n()\n \n{\n\n\n\u2219\u2219\u2219\u2219\nlet\n \nname\n;\n\n\n}\n\n\n\n// bad\n\n\nfunction\n \nbar\n()\n \n{\n\n\n\u2219\nlet\n \nname\n;\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nbaz\n()\n \n{\n\n\n\u2219\u2219\nlet\n \nname\n;\n\n\n}\n\n\n\n\n\n\n\n\n18.2\n Place 1 space before the leading brace. eslint: \nspace-before-blocks\n jscs: \nrequireSpaceBeforeBlockStatements\n\n\n\n\n// bad\n\n\nfunction\n \ntest\n(){\n\n  \nconsole\n.\nlog\n(\ntest\n);\n\n\n}\n\n\n\n// good\n\n\nfunction\n \ntest\n()\n \n{\n\n  \nconsole\n.\nlog\n(\ntest\n);\n\n\n}\n\n\n\n// bad\n\n\ndog\n.\nset\n(\nattr\n,{\n\n  \nage\n:\n \n1 year\n,\n\n  \nbreed\n:\n \nBernese Mountain Dog\n,\n\n\n});\n\n\n\n// good\n\n\ndog\n.\nset\n(\nattr\n,\n \n{\n\n  \nage\n:\n \n1 year\n,\n\n  \nbreed\n:\n \nBernese Mountain Dog\n,\n\n\n});\n\n\n\n\n\n\n\n\n18.3\n Place 1 space before the opening parenthesis in control statements (\nif\n, \nwhile\n etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: \nkeyword-spacing\n jscs: \nrequireSpaceAfterKeywords\n\n\n\n\n// bad\n\n\nif\n(\nisJedi\n)\n \n{\n\n  \nfight\n \n();\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\nisJedi\n)\n \n{\n\n  \nfight\n();\n\n\n}\n\n\n\n// bad\n\n\nfunction\n \nfight\n \n()\n \n{\n\n  \nconsole\n.\nlog\n \n(\nSwooosh!\n);\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nfight\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nSwooosh!\n);\n\n\n}\n\n\n\n\n\n\n\n\n18.4\n Set off operators with spaces. eslint: \nspace-infix-ops\n jscs: \nrequireSpaceBeforeBinaryOperators\n, \nrequireSpaceAfterBinaryOperators\n\n\n\n\n// bad\n\n\nconst\n \nx\n=\ny\n+\n5\n;\n\n\n\n// good\n\n\nconst\n \nx\n \n=\n \ny\n \n+\n \n5\n;\n\n\n\n\n\n\n\n\n18.5\n End files with a single newline character. eslint: \neol-last\n\n\n\n\n// bad\n\n\nimport\n \n{\n \nes6\n \n}\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n  \n// ...\n\n\nexport\n \ndefault\n \nes6\n;\n\n\n\n\n\n\n// bad\n\n\nimport\n \n{\n \nes6\n \n}\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n  \n// ...\n\n\nexport\n \ndefault\n \nes6\n;\n\u21b5\n\n\n\u21b5\n\n\n\n\n\n\n// good\n\n\nimport\n \n{\n \nes6\n \n}\n \nfrom\n \n./AirbnbStyleGuide\n;\n\n  \n// ...\n\n\nexport\n \ndefault\n \nes6\n;\n\u21b5\n\n\n\n\n\n\n\n\n18.6\n Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which\nemphasizes that the line is a method call, not a new statement. eslint: \nnewline-per-chained-call\n \nno-whitespace-before-property\n\n\n\n\n// bad\n\n\n$\n(\n#items\n).\nfind\n(\n.selected\n).\nhighlight\n().\nend\n().\nfind\n(\n.open\n).\nupdateCount\n();\n\n\n\n// bad\n\n\n$\n(\n#items\n).\n\n  \nfind\n(\n.selected\n).\n\n    \nhighlight\n().\n\n    \nend\n().\n\n  \nfind\n(\n.open\n).\n\n    \nupdateCount\n();\n\n\n\n// good\n\n\n$\n(\n#items\n)\n\n  \n.\nfind\n(\n.selected\n)\n\n    \n.\nhighlight\n()\n\n    \n.\nend\n()\n\n  \n.\nfind\n(\n.open\n)\n\n    \n.\nupdateCount\n();\n\n\n\n// bad\n\n\nconst\n \nleds\n \n=\n \nstage\n.\nselectAll\n(\n.led\n).\ndata\n(\ndata\n).\nenter\n().\nappend\n(\nsvg:svg\n).\nclassed\n(\nled\n,\n \ntrue\n)\n\n    \n.\nattr\n(\nwidth\n,\n \n(\nradius\n \n+\n \nmargin\n)\n \n*\n \n2\n).\nappend\n(\nsvg:g\n)\n\n    \n.\nattr\n(\ntransform\n,\n \n`translate(\n${\nradius\n \n+\n \nmargin\n}\n,\n${\nradius\n \n+\n \nmargin\n}\n)`\n)\n\n    \n.\ncall\n(\ntron\n.\nled\n);\n\n\n\n// good\n\n\nconst\n \nleds\n \n=\n \nstage\n.\nselectAll\n(\n.led\n)\n\n    \n.\ndata\n(\ndata\n)\n\n  \n.\nenter\n().\nappend\n(\nsvg:svg\n)\n\n    \n.\nclassed\n(\nled\n,\n \ntrue\n)\n\n    \n.\nattr\n(\nwidth\n,\n \n(\nradius\n \n+\n \nmargin\n)\n \n*\n \n2\n)\n\n  \n.\nappend\n(\nsvg:g\n)\n\n    \n.\nattr\n(\ntransform\n,\n \n`translate(\n${\nradius\n \n+\n \nmargin\n}\n,\n${\nradius\n \n+\n \nmargin\n}\n)`\n)\n\n    \n.\ncall\n(\ntron\n.\nled\n);\n\n\n\n// good\n\n\nconst\n \nleds\n \n=\n \nstage\n.\nselectAll\n(\n.led\n).\ndata\n(\ndata\n);\n\n\n\n\n\n\n\n\n18.7\n Leave a blank line after blocks and before the next statement. jscs: \nrequirePaddingNewLinesAfterBlocks\n\n\n\n\n// bad\n\n\nif\n \n(\nfoo\n)\n \n{\n\n  \nreturn\n \nbar\n;\n\n\n}\n\n\nreturn\n \nbaz\n;\n\n\n\n// good\n\n\nif\n \n(\nfoo\n)\n \n{\n\n  \nreturn\n \nbar\n;\n\n\n}\n\n\n\nreturn\n \nbaz\n;\n\n\n\n// bad\n\n\nconst\n \nobj\n \n=\n \n{\n\n  \nfoo\n()\n \n{\n\n  \n},\n\n  \nbar\n()\n \n{\n\n  \n},\n\n\n};\n\n\nreturn\n \nobj\n;\n\n\n\n// good\n\n\nconst\n \nobj\n \n=\n \n{\n\n  \nfoo\n()\n \n{\n\n  \n},\n\n\n  \nbar\n()\n \n{\n\n  \n},\n\n\n};\n\n\n\nreturn\n \nobj\n;\n\n\n\n// bad\n\n\nconst\n \narr\n \n=\n \n[\n\n  \nfunction\n \nfoo\n()\n \n{\n\n  \n},\n\n  \nfunction\n \nbar\n()\n \n{\n\n  \n},\n\n\n];\n\n\nreturn\n \narr\n;\n\n\n\n// good\n\n\nconst\n \narr\n \n=\n \n[\n\n  \nfunction\n \nfoo\n()\n \n{\n\n  \n},\n\n\n  \nfunction\n \nbar\n()\n \n{\n\n  \n},\n\n\n];\n\n\n\nreturn\n \narr\n;\n\n\n\n\n\n\n\n\n18.8\n Do not pad your blocks with blank lines. eslint: \npadded-blocks\n jscs:  \ndisallowPaddingNewlinesInBlocks\n\n\n\n\n// bad\n\n\nfunction\n \nbar\n()\n \n{\n\n\n  \nconsole\n.\nlog\n(\nfoo\n);\n\n\n\n}\n\n\n\n// also bad\n\n\nif\n \n(\nbaz\n)\n \n{\n\n\n  \nconsole\n.\nlog\n(\nqux\n);\n\n\n}\n \nelse\n \n{\n\n  \nconsole\n.\nlog\n(\nfoo\n);\n\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nbar\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nfoo\n);\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\nbaz\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nqux\n);\n\n\n}\n \nelse\n \n{\n\n  \nconsole\n.\nlog\n(\nfoo\n);\n\n\n}\n\n\n\n\n\n\n\n\n18.9\n Do not add spaces inside parentheses. eslint: \nspace-in-parens\n jscs: \ndisallowSpacesInsideParentheses\n\n\n\n\n// bad\n\n\nfunction\n \nbar\n(\n \nfoo\n \n)\n \n{\n\n  \nreturn\n \nfoo\n;\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nbar\n(\nfoo\n)\n \n{\n\n  \nreturn\n \nfoo\n;\n\n\n}\n\n\n\n// bad\n\n\nif\n \n(\n \nfoo\n \n)\n \n{\n\n  \nconsole\n.\nlog\n(\nfoo\n);\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\nfoo\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nfoo\n);\n\n\n}\n\n\n\n\n\n\n\n\n18.10\n Do not add spaces inside brackets. eslint: \narray-bracket-spacing\n jscs: \ndisallowSpacesInsideArrayBrackets\n\n\n\n\n// bad\n\n\nconst\n \nfoo\n \n=\n \n[\n \n1\n,\n \n2\n,\n \n3\n \n];\n\n\nconsole\n.\nlog\n(\nfoo\n[\n \n0\n \n]);\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n];\n\n\nconsole\n.\nlog\n(\nfoo\n[\n0\n]);\n\n\n\n\n\n\n\n\n18.11\n Add spaces inside curly braces. eslint: \nobject-curly-spacing\n jscs: \nrequireSpacesInsideObjectBrackets\n\n\n\n\n// bad\n\n\nconst\n \nfoo\n \n=\n \n{\nclark\n:\n \nkent\n};\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \n{\n \nclark\n:\n \nkent\n \n};\n\n\n\n\n\n\n\n\n18.12\n Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per \nabove\n, long strings are exempt from this rule, and should not be broken up. eslint: \nmax-len\n jscs: \nmaximumLineLength\n\n\n\n\n\n\nWhy? This ensures readability and maintainability.\n\n\n\n\n// bad\n\n\nconst\n \nfoo\n \n=\n \njsonData\n \n \njsonData\n.\nfoo\n \n \njsonData\n.\nfoo\n.\nbar\n \n \njsonData\n.\nfoo\n.\nbar\n.\nbaz\n \n \njsonData\n.\nfoo\n.\nbar\n.\nbaz\n.\nquux\n \n \njsonData\n.\nfoo\n.\nbar\n.\nbaz\n.\nquux\n.\nxyzzy\n;\n\n\n\n// bad\n\n\n$\n.\najax\n({\n \nmethod\n:\n \nPOST\n,\n \nurl\n:\n \nhttps://airbnb.com/\n,\n \ndata\n:\n \n{\n \nname\n:\n \nJohn\n \n}\n \n}).\ndone\n(()\n \n=\n \nconsole\n.\nlog\n(\nCongratulations!\n)).\nfail\n(()\n \n=\n \nconsole\n.\nlog\n(\nYou have failed this city.\n));\n\n\n\n// good\n\n\nconst\n \nfoo\n \n=\n \njsonData\n\n  \n \njsonData\n.\nfoo\n\n  \n \njsonData\n.\nfoo\n.\nbar\n\n  \n \njsonData\n.\nfoo\n.\nbar\n.\nbaz\n\n  \n \njsonData\n.\nfoo\n.\nbar\n.\nbaz\n.\nquux\n\n  \n \njsonData\n.\nfoo\n.\nbar\n.\nbaz\n.\nquux\n.\nxyzzy\n;\n\n\n\n// good\n\n\n$\n.\najax\n({\n\n  \nmethod\n:\n \nPOST\n,\n\n  \nurl\n:\n \nhttps://airbnb.com/\n,\n\n  \ndata\n:\n \n{\n \nname\n:\n \nJohn\n \n},\n\n\n})\n\n  \n.\ndone\n(()\n \n=\n \nconsole\n.\nlog\n(\nCongratulations!\n))\n\n  \n.\nfail\n(()\n \n=\n \nconsole\n.\nlog\n(\nYou have failed this city.\n));\n\n\n\n\n\n\n\u2b06 back to top\n\n\nCommas\n\n\n\n\n\n\n19.1\n Leading commas: \nNope\n. eslint: \ncomma-style\n jscs: \nrequireCommaBeforeLineBreak\n\n\n\n\n// bad\n\n\nconst\n \nstory\n \n=\n \n[\n\n    \nonce\n\n  \n,\n \nupon\n\n  \n,\n \naTime\n\n\n];\n\n\n\n// good\n\n\nconst\n \nstory\n \n=\n \n[\n\n  \nonce\n,\n\n  \nupon\n,\n\n  \naTime\n,\n\n\n];\n\n\n\n// bad\n\n\nconst\n \nhero\n \n=\n \n{\n\n    \nfirstName\n:\n \nAda\n\n  \n,\n \nlastName\n:\n \nLovelace\n\n  \n,\n \nbirthYear\n:\n \n1815\n\n  \n,\n \nsuperPower\n:\n \ncomputers\n\n\n};\n\n\n\n// good\n\n\nconst\n \nhero\n \n=\n \n{\n\n  \nfirstName\n:\n \nAda\n,\n\n  \nlastName\n:\n \nLovelace\n,\n\n  \nbirthYear\n:\n \n1815\n,\n\n  \nsuperPower\n:\n \ncomputers\n,\n\n\n};\n\n\n\n\n\n\n\n\n19.2\n Additional trailing comma: \nYup.\n eslint: \ncomma-dangle\n jscs: \nrequireTrailingComma\n\n\n\n\n\n\nWhy? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don't have to worry about the \ntrailing comma problem\n in legacy browsers.\n\n\n\n\n// bad - git diff without trailing comma\nconst hero = {\n     firstName: \nFlorence\n,\n\n-    lastName: \nNightingale\n\n\n+    lastName: \nNightingale\n,\n\n\n+    inventorOf: [\ncoxcomb chart\n, \nmodern nursing\n]\n\n};\n\n// good - git diff with trailing comma\nconst hero = {\n     firstName: \nFlorence\n,\n     lastName: \nNightingale\n,\n\n+    inventorOf: [\ncoxcomb chart\n, \nmodern nursing\n],\n\n};\n\n\n\n\n\n// bad\n\n\nconst\n \nhero\n \n=\n \n{\n\n  \nfirstName\n:\n \nDana\n,\n\n  \nlastName\n:\n \nScully\n\n\n};\n\n\n\nconst\n \nheroes\n \n=\n \n[\n\n  \nBatman\n,\n\n  \nSuperman\n\n\n];\n\n\n\n// good\n\n\nconst\n \nhero\n \n=\n \n{\n\n  \nfirstName\n:\n \nDana\n,\n\n  \nlastName\n:\n \nScully\n,\n\n\n};\n\n\n\nconst\n \nheroes\n \n=\n \n[\n\n  \nBatman\n,\n\n  \nSuperman\n,\n\n\n];\n\n\n\n// bad\n\n\nfunction\n \ncreateHero\n(\n\n  \nfirstName\n,\n\n  \nlastName\n,\n\n  \ninventorOf\n\n\n)\n \n{\n\n  \n// does nothing\n\n\n}\n\n\n\n// good\n\n\nfunction\n \ncreateHero\n(\n\n  \nfirstName\n,\n\n  \nlastName\n,\n\n  \ninventorOf\n,\n\n\n)\n \n{\n\n  \n// does nothing\n\n\n}\n\n\n\n// good (note that a comma must not appear after a \nrest\n element)\n\n\nfunction\n \ncreateHero\n(\n\n  \nfirstName\n,\n\n  \nlastName\n,\n\n  \ninventorOf\n,\n\n  \n...\nheroArgs\n\n\n)\n \n{\n\n  \n// does nothing\n\n\n}\n\n\n\n// bad\n\n\ncreateHero\n(\n\n  \nfirstName\n,\n\n  \nlastName\n,\n\n  \ninventorOf\n\n\n);\n\n\n\n// good\n\n\ncreateHero\n(\n\n  \nfirstName\n,\n\n  \nlastName\n,\n\n  \ninventorOf\n,\n\n\n);\n\n\n\n// good (note that a comma must not appear after a \nrest\n element)\n\n\ncreateHero\n(\n\n  \nfirstName\n,\n\n  \nlastName\n,\n\n  \ninventorOf\n,\n\n  \n...\nheroArgs\n\n\n);\n\n\n\n\n\n\n\u2b06 back to top\n\n\nSemicolons\n\n\n\n\n\n\n20.1\n \nYup.\n eslint: \nsemi\n jscs: \nrequireSemicolons\n\n\n\n\n// bad\n\n\n(\nfunction\n \n()\n \n{\n\n  \nconst\n \nname\n \n=\n \nSkywalker\n\n  \nreturn\n \nname\n\n\n})()\n\n\n\n// good\n\n\n(\nfunction\n \n()\n \n{\n\n  \nconst\n \nname\n \n=\n \nSkywalker\n;\n\n  \nreturn\n \nname\n;\n\n\n}());\n\n\n\n// good, but legacy (guards against the function becoming an argument when two files with IIFEs are concatenated)\n\n\n;((()\n \n=\n \n{\n\n  \nconst\n \nname\n \n=\n \nSkywalker\n;\n\n  \nreturn\n \nname\n;\n\n\n})());\n\n\n\n\n\n\nRead more\n.\n\n\n\u2b06 back to top\n\n\nType Casting \n Coercion\n\n\n\n\n\n\n\n\n21.1\n Perform type coercion at the beginning of the statement.\n\n\n\n\n\n\n21.2\n  Strings:\n\n\n\n\n\n\n// =\n this.reviewScore = 9;\n\n\n\n// bad\n\n\nconst\n \ntotalScore\n \n=\n \nthis\n.\nreviewScore\n \n+\n \n;\n \n// invokes this.reviewScore.valueOf()\n\n\n\n// bad\n\n\nconst\n \ntotalScore\n \n=\n \nthis\n.\nreviewScore\n.\ntoString\n();\n \n// isn\nt guaranteed to return a string\n\n\n\n// good\n\n\nconst\n \ntotalScore\n \n=\n \nString\n(\nthis\n.\nreviewScore\n);\n\n\n\n\n\n\n\n\n21.3\n Numbers: Use \nNumber\n for type casting and \nparseInt\n always with a radix for parsing strings. eslint: \nradix\n\n\n\n\nconst\n \ninputValue\n \n=\n \n4\n;\n\n\n\n// bad\n\n\nconst\n \nval\n \n=\n \nnew\n \nNumber\n(\ninputValue\n);\n\n\n\n// bad\n\n\nconst\n \nval\n \n=\n \n+\ninputValue\n;\n\n\n\n// bad\n\n\nconst\n \nval\n \n=\n \ninputValue\n \n \n0\n;\n\n\n\n// bad\n\n\nconst\n \nval\n \n=\n \nparseInt\n(\ninputValue\n);\n\n\n\n// good\n\n\nconst\n \nval\n \n=\n \nNumber\n(\ninputValue\n);\n\n\n\n// good\n\n\nconst\n \nval\n \n=\n \nparseInt\n(\ninputValue\n,\n \n10\n);\n\n\n\n\n\n\n\n\n21.4\n If for whatever reason you are doing something wild and \nparseInt\n is your bottleneck and need to use Bitshift for \nperformance reasons\n, leave a comment explaining why and what you're doing.\n\n\n\n\n// good\n\n\n/**\n\n\n * parseInt was the reason my code was slow.\n\n\n * Bitshifting the String to coerce it to a\n\n\n * Number made it a lot faster.\n\n\n */\n\n\nconst\n \nval\n \n=\n \ninputValue\n \n \n0\n;\n\n\n\n\n\n\n\n\n21.5\n Be careful when using bitshift operations.\n\n\nNumbers are represented as \n64-bit values\n, but  bitshift operations always return a 32-bit integer (\nsource\n). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. \nDiscussion\n. Largest signed 32-bit Int is 2,147,483,647:\n\n\n\n\n2147483647\n \n \n0\n;\n \n// =\n 2147483647\n\n\n2147483648\n \n \n0\n;\n \n// =\n -2147483648\n\n\n2147483649\n \n \n0\n;\n \n// =\n -2147483647\n\n\n\n\n\n\n\n\n21.6\n Booleans:\n\n\n\n\nconst\n \nage\n \n=\n \n0\n;\n\n\n\n// bad\n\n\nconst\n \nhasAge\n \n=\n \nnew\n \nBoolean\n(\nage\n);\n\n\n\n// good\n\n\nconst\n \nhasAge\n \n=\n \nBoolean\n(\nage\n);\n\n\n\n// best\n\n\nconst\n \nhasAge\n \n=\n \n!!\nage\n;\n\n\n\n\n\n\n\u2b06 back to top\n\n\nNaming Conventions\n\n\n\n\n\n\n22.1\n Avoid single letter names. Be descriptive with your naming. eslint: \nid-length\n\n\n\n\n// bad\n\n\nfunction\n \nq\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nquery\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n22.2\n Use camelCase when naming objects, functions, and instances. eslint: \ncamelcase\n jscs: \nrequireCamelCaseOrUpperCaseIdentifiers\n\n\n\n\n// bad\n\n\nconst\n \nOBJEcttsssss\n \n=\n \n{};\n\n\nconst\n \nthis_is_my_object\n \n=\n \n{};\n\n\nfunction\n \nc\n()\n \n{}\n\n\n\n// good\n\n\nconst\n \nthisIsMyObject\n \n=\n \n{};\n\n\nfunction\n \nthisIsMyFunction\n()\n \n{}\n\n\n\n\n\n\n\n\n22.3\n Use PascalCase only when naming constructors or classes. eslint: \nnew-cap\n jscs: \nrequireCapitalizedConstructors\n\n\n\n\n// bad\n\n\nfunction\n \nuser\n(\noptions\n)\n \n{\n\n  \nthis\n.\nname\n \n=\n \noptions\n.\nname\n;\n\n\n}\n\n\n\nconst\n \nbad\n \n=\n \nnew\n \nuser\n({\n\n  \nname\n:\n \nnope\n,\n\n\n});\n\n\n\n// good\n\n\nclass\n \nUser\n \n{\n\n  \nconstructor\n(\noptions\n)\n \n{\n\n    \nthis\n.\nname\n \n=\n \noptions\n.\nname\n;\n\n  \n}\n\n\n}\n\n\n\nconst\n \ngood\n \n=\n \nnew\n \nUser\n({\n\n  \nname\n:\n \nyup\n,\n\n\n});\n\n\n\n\n\n\n\n- \n22.4\n Do not use trailing or leading underscores. eslint: \nno-underscore-dangle\n jscs: \ndisallowDanglingUnderscores\n\n\n\n\nWhy? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean \u201cprivate\u201d, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won't count as breaking, or that tests aren't needed. tl;dr: if you want something to be \u201cprivate\u201d, it must not be observably present.\n\n\n\n\n// bad\n\n\nthis\n.\n__firstName__\n \n=\n \nPanda\n;\n\n\nthis\n.\nfirstName_\n \n=\n \nPanda\n;\n\n\nthis\n.\n_firstName\n \n=\n \nPanda\n;\n\n\n\n// good\n\n\nthis\n.\nfirstName\n \n=\n \nPanda\n;\n\n\n\n\n\n\n\n- \n22.5\n Don't save references to \nthis\n. Use arrow functions or \nFunction#bind\n. jscs: \ndisallowNodeTypes\n\n\n// bad\n\n\nfunction\n \nfoo\n()\n \n{\n\n  \nconst\n \nself\n \n=\n \nthis\n;\n\n  \nreturn\n \nfunction\n \n()\n \n{\n\n    \nconsole\n.\nlog\n(\nself\n);\n\n  \n};\n\n\n}\n\n\n\n// bad\n\n\nfunction\n \nfoo\n()\n \n{\n\n  \nconst\n \nthat\n \n=\n \nthis\n;\n\n  \nreturn\n \nfunction\n \n()\n \n{\n\n    \nconsole\n.\nlog\n(\nthat\n);\n\n  \n};\n\n\n}\n\n\n\n// good\n\n\nfunction\n \nfoo\n()\n \n{\n\n  \nreturn\n \n()\n \n=\n \n{\n\n    \nconsole\n.\nlog\n(\nthis\n);\n\n  \n};\n\n\n}\n\n\n\n\n\n\n\n- \n22.6\n A base filename should exactly match the name of its default export.\n\n\n// file 1 contents\n\n\nclass\n \nCheckBox\n \n{\n\n  \n// ...\n\n\n}\n\n\nexport\n \ndefault\n \nCheckBox\n;\n\n\n\n// file 2 contents\n\n\nexport\n \ndefault\n \nfunction\n \nfortyTwo\n()\n \n{\n \nreturn\n \n42\n;\n \n}\n\n\n\n// file 3 contents\n\n\nexport\n \ndefault\n \nfunction\n \ninsideDirectory\n()\n \n{}\n\n\n\n// in some other file\n\n\n// bad\n\n\nimport\n \nCheckBox\n \nfrom\n \n./checkBox\n;\n \n// PascalCase import/export, camelCase filename\n\n\nimport\n \nFortyTwo\n \nfrom\n \n./FortyTwo\n;\n \n// PascalCase import/filename, camelCase export\n\n\nimport\n \nInsideDirectory\n \nfrom\n \n./InsideDirectory\n;\n \n// PascalCase import/filename, camelCase export\n\n\n\n// bad\n\n\nimport\n \nCheckBox\n \nfrom\n \n./check_box\n;\n \n// PascalCase import/export, snake_case filename\n\n\nimport\n \nforty_two\n \nfrom\n \n./forty_two\n;\n \n// snake_case import/filename, camelCase export\n\n\nimport\n \ninside_directory\n \nfrom\n \n./inside_directory\n;\n \n// snake_case import, camelCase export\n\n\nimport\n \nindex\n \nfrom\n \n./inside_directory/index\n;\n \n// requiring the index file explicitly\n\n\nimport\n \ninsideDirectory\n \nfrom\n \n./insideDirectory/index\n;\n \n// requiring the index file explicitly\n\n\n\n// good\n\n\nimport\n \nCheckBox\n \nfrom\n \n./CheckBox\n;\n \n// PascalCase export/import/filename\n\n\nimport\n \nfortyTwo\n \nfrom\n \n./fortyTwo\n;\n \n// camelCase export/import/filename\n\n\nimport\n \ninsideDirectory\n \nfrom\n \n./insideDirectory\n;\n \n// camelCase export/import/directory name/implicit \nindex\n\n\n// ^ supports both insideDirectory.js and insideDirectory/index.js\n\n\n\n\n\n\n\n- \n22.7\n Use camelCase when you export-default a function. Your filename should be identical to your function's name.\n\n\nfunction\n \nmakeStyleGuide\n()\n \n{\n\n  \n// ...\n\n\n}\n\n\n\nexport\n \ndefault\n \nmakeStyleGuide\n;\n\n\n\n\n\n\n\n- \n22.8\n Use PascalCase when you export a constructor / class / singleton / function library / bare object.\n\n\nconst\n \nAirbnbStyleGuide\n \n=\n \n{\n\n  \nes6\n:\n \n{\n\n  \n},\n\n\n};\n\n\n\nexport\n \ndefault\n \nAirbnbStyleGuide\n;\n\n\n\n\n\n\n\n- \n22.9\n Acronyms and initialisms should always be all capitalized, or all lowercased.\n\n\n\n\nWhy? Names are for readability, not to appease a computer algorithm.\n\n\n\n\n// bad\n\n\nimport\n \nSmsContainer\n \nfrom\n \n./containers/SmsContainer\n;\n\n\n\n// bad\n\n\nconst\n \nHttpRequests\n \n=\n \n[\n\n  \n// ...\n\n\n];\n\n\n\n// good\n\n\nimport\n \nSMSContainer\n \nfrom\n \n./containers/SMSContainer\n;\n\n\n\n// good\n\n\nconst\n \nHTTPRequests\n \n=\n \n[\n\n  \n// ...\n\n\n];\n\n\n\n// best\n\n\nimport\n \nTextMessageContainer\n \nfrom\n \n./containers/TextMessageContainer\n;\n\n\n\n// best\n\n\nconst\n \nRequests\n \n=\n \n[\n\n  \n// ...\n\n\n];\n\n\n\n\n\n\n\u2b06 back to top\n\n\nAccessors\n\n\n\n\n\n- \n23.1\n Accessor functions for properties are not required.\n\n\n\n- \n23.2\n Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal('hello').\n\n\n// bad\n\n\nclass\n \nDragon\n \n{\n\n  \nget\n \nage\n()\n \n{\n\n    \n// ...\n\n  \n}\n\n\n  \nset\n \nage\n(\nvalue\n)\n \n{\n\n    \n// ...\n\n  \n}\n\n\n}\n\n\n\n// good\n\n\nclass\n \nDragon\n \n{\n\n  \ngetAge\n()\n \n{\n\n    \n// ...\n\n  \n}\n\n\n  \nsetAge\n(\nvalue\n)\n \n{\n\n    \n// ...\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n- \n23.3\n If the property/method is a \nboolean\n, use \nisVal()\n or \nhasVal()\n.\n\n\n// bad\n\n\nif\n \n(\n!\ndragon\n.\nage\n())\n \n{\n\n  \nreturn\n \nfalse\n;\n\n\n}\n\n\n\n// good\n\n\nif\n \n(\n!\ndragon\n.\nhasAge\n())\n \n{\n\n  \nreturn\n \nfalse\n;\n\n\n}\n\n\n\n\n\n\n\n- \n23.4\n It's okay to create get() and set() functions, but be consistent.\n\n\nclass\n \nJedi\n \n{\n\n  \nconstructor\n(\noptions\n \n=\n \n{})\n \n{\n\n    \nconst\n \nlightsaber\n \n=\n \noptions\n.\nlightsaber\n \n||\n \nblue\n;\n\n    \nthis\n.\nset\n(\nlightsaber\n,\n \nlightsaber\n);\n\n  \n}\n\n\n  \nset\n(\nkey\n,\n \nval\n)\n \n{\n\n    \nthis\n[\nkey\n]\n \n=\n \nval\n;\n\n  \n}\n\n\n  \nget\n(\nkey\n)\n \n{\n\n    \nreturn\n \nthis\n[\nkey\n];\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\u2b06 back to top\n\n\nEvents\n\n\n\n\n\n- \n24.1\n When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:\n\n\n// bad\n\n\n$\n(\nthis\n).\ntrigger\n(\nlistingUpdated\n,\n \nlisting\n.\nid\n);\n\n\n\n// ...\n\n\n\n$\n(\nthis\n).\non\n(\nlistingUpdated\n,\n \n(\ne\n,\n \nlistingId\n)\n \n=\n \n{\n\n  \n// do something with listingId\n\n\n});\n\n\n\n\n\n\nprefer:\n\n\n// good\n\n\n$\n(\nthis\n).\ntrigger\n(\nlistingUpdated\n,\n \n{\n \nlistingId\n:\n \nlisting\n.\nid\n \n});\n\n\n\n// ...\n\n\n\n$\n(\nthis\n).\non\n(\nlistingUpdated\n,\n \n(\ne\n,\n \ndata\n)\n \n=\n \n{\n\n  \n// do something with data.listingId\n\n\n});\n\n\n\n\n\n\n\u2b06 back to top\n\n\n\n\nECMAScript 6+ (ES 2015+) Styles\n\n\n\n\n\n\n\n\n27.1\n This is a collection of links to the various ES6 features.\n\n\n\n\n\n\nArrow Functions\n\n\n\n\nClasses\n\n\nObject Shorthand\n\n\nObject Concise\n\n\nObject Computed Properties\n\n\nTemplate Strings\n\n\nDestructuring\n\n\nDefault Parameters\n\n\nRest\n\n\nArray Spreads\n\n\nLet and Const\n\n\nIterators and Generators\n\n\nModules\n\n\n\n\n\n\nDo not use \nTC39 proposals\n that have not reached stage 3.\n\n\nThey are not finalized\n, and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.\n\n\n\n\n\u2b06 back to top\n\n\nTesting\n\n\n\n\n\n\n28.1\n \nYup.\n\n\n\n\nfunction\n \nfoo\n()\n \n{\n\n  \nreturn\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\n\n\n28.2\n \nNo, but seriously\n:\n\n\nWhichever testing framework you use, you should be writing tests!\n\n\nStrive to write many small pure functions, and minimize where mutations occur.\n\n\nBe cautious about stubs and mocks - they can make your tests more brittle.\n\n\nWe primarily use \nmocha\n at Airbnb. \ntape\n is also used occasionally for small, separate modules.\n\n\n100% test coverage is a good goal to strive for, even if it's not always practical to reach it.\n\n\nWhenever you fix a bug, \nwrite a regression test\n. A bug fixed without a regression test is almost certainly going to break again in the future.\n\n\n\n\n\n\n\n\n\u2b06 back to top\n\n\nPerformance\n\n\n\n\n\n\nOn Layout \n Web Performance\n\n\nString vs Array Concat\n\n\nTry/Catch Cost In a Loop\n\n\nBang Function\n\n\njQuery Find vs Context, Selector\n\n\ninnerHTML vs textContent for script text\n\n\nLong String Concatenation\n\n\nAre Javascript functions like \nmap()\n, \nreduce()\n, and \nfilter()\n optimized for traversing arrays?\n\n\nLoading...\n\n\n\n\n\u2b06 back to top\n\n\nResources\n\n\n\n\nLearning ES6\n\n\n\n\nDraft ECMA 2015 (ES6) Spec\n\n\nExploringJS\n\n\nES6 Compatibility Table\n\n\nComprehensive Overview of ES6 Features\n\n\n\n\nRead This\n\n\n\n\nStandard ECMA-262\n\n\n\n\nTools\n\n\n\n\nCode Style Linters\n\n\nESlint\n - \nAirbnb Style .eslintrc\n\n\nJSHint\n - \nAirbnb Style .jshintrc\n\n\nJSCS\n - \nAirbnb Style Preset\n\n\n\n\nOther Style Guides\n\n\n\n\nGoogle JavaScript Style Guide\n\n\njQuery Core Style Guidelines\n\n\nPrinciples of Writing Consistent, Idiomatic JavaScript\n\n\n\n\nOther Styles\n\n\n\n\nNaming this in nested functions\n - Christian Johansen\n\n\nConditional Callbacks\n - Ross Allen\n\n\nPopular JavaScript Coding Conventions on GitHub\n - JeongHoon Byun\n\n\nMultiple var statements in JavaScript, not superfluous\n - Ben Alman\n\n\n\n\nFurther Reading\n\n\n\n\nUnderstanding JavaScript Closures\n - Angus Croll\n\n\nBasic JavaScript for the impatient programmer\n - Dr. Axel Rauschmayer\n\n\nYou Might Not Need jQuery\n - Zack Bloom \n Adam Schwartz\n\n\nES6 Features\n - Luke Hoban\n\n\nFrontend Guidelines\n - Benjamin De Cock\n\n\n\n\nBooks\n\n\n\n\nJavaScript: The Good Parts\n - Douglas Crockford\n\n\nJavaScript Patterns\n - Stoyan Stefanov\n\n\nPro JavaScript Design Patterns\n  - Ross Harmes and Dustin Diaz\n\n\nHigh Performance Web Sites: Essential Knowledge for Front-End Engineers\n - Steve Souders\n\n\nMaintainable JavaScript\n - Nicholas C. Zakas\n\n\nJavaScript Web Applications\n - Alex MacCaw\n\n\nPro JavaScript Techniques\n - John Resig\n\n\nSmashing Node.js: JavaScript Everywhere\n - Guillermo Rauch\n\n\nSecrets of the JavaScript Ninja\n - John Resig and Bear Bibeault\n\n\nHuman JavaScript\n - Henrik Joreteg\n\n\nSuperhero.js\n - Kim Joar Bekkelund, Mads Mob\u00e6k, \n Olav Bjorkoy\n\n\nJSBooks\n - Julien Bouquillon\n\n\nThird Party JavaScript\n - Ben Vinegar and Anton Kovalyov\n\n\nEffective JavaScript: 68 Specific Ways to Harness the Power of JavaScript\n - David Herman\n\n\nEloquent JavaScript\n - Marijn Haverbeke\n\n\nYou Don't Know JS: ES6 \n Beyond\n - Kyle Simpson\n\n\n\n\nBlogs\n\n\n\n\nJavaScript Weekly\n\n\nJavaScript, JavaScript...\n\n\nBocoup Weblog\n\n\nAdequately Good\n\n\nNCZOnline\n\n\nPerfection Kills\n\n\nBen Alman\n\n\nDmitry Baranovskiy\n\n\nDustin Diaz\n\n\nnettuts\n\n\n\n\nPodcasts\n\n\n\n\nJavaScript Air\n\n\nJavaScript Jabber\n\n\n\n\n\u2b06 back to top", 
            "title": "Basic Coding Standard"
        }, 
        {
            "location": "/js/javascript/#venngage-javascript-style-guide", 
            "text": "Based off of  AirBnB's style guide.", 
            "title": "Venngage JavaScript Style Guide"
        }, 
        {
            "location": "/js/javascript/#table-of-contents", 
            "text": "", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/js/javascript/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/js/javascript/#11-primitives", 
            "text": "When you access a primitive type you work directly on its value.   string  number  boolean  null  undefined   const   foo   =   1 ;  let   bar   =   foo ;  bar   =   9 ;  console . log ( foo ,   bar );   // =  1, 9", 
            "title": "1.1 Primitives"
        }, 
        {
            "location": "/js/javascript/#12-complex", 
            "text": "When you access a complex type you work on a reference to its value.   object  array  function   const   foo   =   [ 1 ,   2 ];  const   bar   =   foo ;  bar [ 0 ]   =   9 ;  console . log ( foo [ 0 ],   bar [ 0 ]);   // =  9, 9   \u2b06 back to top", 
            "title": "1.2 Complex"
        }, 
        {
            "location": "/js/javascript/#references", 
            "text": "", 
            "title": "References"
        }, 
        {
            "location": "/js/javascript/#21-const", 
            "text": "Use  const  for all of your references; avoid using  var . eslint:  prefer-const ,  no-const-assign   Tip  This ensures that you can't reassign your references, which can lead to bugs and difficult to comprehend code.   // bad  var   a   =   1 ;  var   b   =   2 ;  // good  const   a   =   1 ;  const   b   =   2 ;", 
            "title": "2.1 const"
        }, 
        {
            "location": "/js/javascript/#22-let", 
            "text": "If you must reassign references, use  let  instead of  var . eslint:  no-var  jscs:  disallowVar   Why?  let  is block-scoped rather than function-scoped like  var .   // bad  var   count   =   1 ;  if   ( true )   {  count   +=   1 ;  }  // good, use the let.  let   count   =   1 ;  if   ( true )   {  count   +=   1 ;  }    Note  Both  let  and  const  are block-scoped.   // const and let only exist in the blocks they are defined in.  {  let   a   =   1 ;  const   b   =   1 ;  }  console . log ( a );   // ReferenceError  console . log ( b );   // ReferenceError   \u2b06 back to top", 
            "title": "2.2 let"
        }, 
        {
            "location": "/js/javascript/#objects", 
            "text": "", 
            "title": "Objects"
        }, 
        {
            "location": "/js/javascript/#31-literal-syntax", 
            "text": "Use the literal syntax for object creation. eslint:  no-new-object  // bad  const   item   =   new   Object ();  // good  const   item   =   {};", 
            "title": "3.1 Literal syntax"
        }, 
        {
            "location": "/js/javascript/#32-property-names", 
            "text": "Use computed property names when creating objects with dynamic property names.   Why? They allow you to define all the properties of an object in one place.   function   getKey ( k )   {  return   `a key named  ${ k } ` ;  }  // bad  const   obj   =   {  id :   5 ,  name :   San Francisco ,  };  obj [ getKey ( enabled )]   =   true ;  // good  const   obj   =   {  id :   5 ,  name :   San Francisco ,  [ getKey ( enabled )] :   true ,  };", 
            "title": "3.2 Property names"
        }, 
        {
            "location": "/js/javascript/#33-object-method-shorthand", 
            "text": "Use object method shorthand. eslint:  object-shorthand  jscs:  requireEnhancedObjectLiterals  // bad  const   atom   =   {  value :   1 ,  addValue :   function   ( value )   { \n   return   atom . value   +   value ;  },  };  // good  const   atom   =   {  value :   1 ,  addValue ( value )   { \n   return   atom . value   +   value ;  },  };", 
            "title": "3.3 Object method shorthand"
        }, 
        {
            "location": "/js/javascript/#34-property-value-shorthand", 
            "text": "Use property value shorthand. eslint:  object-shorthand  jscs:  requireEnhancedObjectLiterals   Why? It is shorter to write and descriptive.   const   lukeSkywalker   =   Luke Skywalker ;  // bad  const   obj   =   {  lukeSkywalker :   lukeSkywalker ,  };  // good  const   obj   =   {  lukeSkywalker ,  };", 
            "title": "3.4 Property value shorthand"
        }, 
        {
            "location": "/js/javascript/#35-shorthand-properties", 
            "text": "Group your shorthand properties at the beginning of your object declaration.   Why? It's easier to tell which properties are using the shorthand.   const   anakinSkywalker   =   Anakin Skywalker ;  const   lukeSkywalker   =   Luke Skywalker ;  // bad  const   obj   =   { \n   episodeOne :   1 , \n   twoJediWalkIntoACantina :   2 , \n   lukeSkywalker , \n   episodeThree :   3 , \n   mayTheFourth :   4 , \n   anakinSkywalker ,  };  // good  const   obj   =   { \n   lukeSkywalker , \n   anakinSkywalker , \n   episodeOne :   1 , \n   twoJediWalkIntoACantina :   2 , \n   episodeThree :   3 , \n   mayTheFourth :   4 ,  };", 
            "title": "3.5 shorthand properties"
        }, 
        {
            "location": "/js/javascript/#36-quoted-properties", 
            "text": "Only quote properties that are invalid identifiers. eslint:  quote-props  jscs:  disallowQuotedKeysInObjects   Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.   // bad  const   bad   =   { \n   foo :   3 , \n   bar :   4 , \n   data-blah :   5 ,  };  // good  const   good   =   { \n   foo :   3 , \n   bar :   4 , \n   data-blah :   5 ,  };", 
            "title": "3.6 Quoted properties"
        }, 
        {
            "location": "/js/javascript/#37-objectprototype", 
            "text": "Do not call  Object.prototype  methods directly, such as  hasOwnProperty ,  propertyIsEnumerable , and  isPrototypeOf .   Why? These methods may be shadowed by properties on the object in question - consider  { hasOwnProperty: false }  - or, the object may be a null object ( Object.create(null) ).   // bad  console . log ( object . hasOwnProperty ( key ));  // good  console . log ( Object . prototype . hasOwnProperty . call ( object ,   key ));  // best  const   has   =   Object . prototype . hasOwnProperty ;   // cache the lookup once, in module scope.  /* or */  import   has   from   has ;  // ...  console . log ( has . call ( object ,   key ));", 
            "title": "3.7 Object.prototype"
        }, 
        {
            "location": "/js/javascript/#38", 
            "text": "Prefer the object spread operator over  Object.assign  to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted.  // very bad  const   original   =   {   a :   1 ,   b :   2   };  const   copy   =   Object . assign ( original ,   {   c :   3   });   // this mutates `original` \u0ca0_\u0ca0  delete   copy . a ;   // so does this  // bad  const   original   =   {   a :   1 ,   b :   2   };  const   copy   =   Object . assign ({},   original ,   {   c :   3   });   // copy =  { a: 1, b: 2, c: 3 }  // good  const   original   =   {   a :   1 ,   b :   2   };  const   copy   =   {   ... original ,   c :   3   };   // copy =  { a: 1, b: 2, c: 3 }  const   {   a ,   ... noA   }   =   copy ;   // noA =  { b: 2, c: 3 }   \u2b06 back to top", 
            "title": "3.8"
        }, 
        {
            "location": "/js/javascript/#arrays", 
            "text": "", 
            "title": "Arrays"
        }, 
        {
            "location": "/js/javascript/#41", 
            "text": "Use the literal syntax for array creation. eslint:  no-array-constructor  // bad  const   items   =   new   Array ();  // good  const   items   =   [];", 
            "title": "4.1"
        }, 
        {
            "location": "/js/javascript/#42-push", 
            "text": "Use  Array#push  instead of direct assignment to add items to an array.  const   someStack   =   [];  // bad  someStack [ someStack . length ]   =   abracadabra ;  // good  someStack . push ( abracadabra );", 
            "title": "4.2 Push"
        }, 
        {
            "location": "/js/javascript/#43-spreads", 
            "text": "Use array spreads  ...  to copy arrays.  // bad  const   len   =   items . length ;  const   itemsCopy   =   [];  let   i ;  for   ( i   =   0 ;   i     len ;   i   +=   1 )   {  itemsCopy [ i ]   =   items [ i ];  }  // good  const   itemsCopy   =   [... items ];    4.4  To convert an array-like object to an array, use  Array.from .   const   foo   =   document . querySelectorAll ( .foo );  const   nodes   =   Array . from ( foo );    4.5  Use return statements in array method callbacks. It's ok to omit the return if the function body consists of a single statement following  8.2 . eslint:  array-callback-return   // good  [ 1 ,   2 ,   3 ]. map (( x )   =   { \n   const   y   =   x   +   1 ; \n   return   x   *   y ;  });  // good  [ 1 ,   2 ,   3 ]. map ( x   =   x   +   1 );  // bad  const   flat   =   {};  [[ 0 ,   1 ],   [ 2 ,   3 ],   [ 4 ,   5 ]]. reduce (( memo ,   item ,   index )   =   { \n   const   flatten   =   memo . concat ( item ); \n   flat [ index ]   =   flatten ;  });  // good  const   flat   =   {};  [[ 0 ,   1 ],   [ 2 ,   3 ],   [ 4 ,   5 ]]. reduce (( memo ,   item ,   index )   =   { \n   const   flatten   =   memo . concat ( item ); \n   flat [ index ]   =   flatten ; \n   return   flatten ;  });  // bad  inbox . filter (( msg )   =   { \n   const   {   subject ,   author   }   =   msg ; \n   if   ( subject   ===   Mockingbird )   { \n     return   author   ===   Harper Lee ; \n   }   else   { \n     return   false ; \n   }  });  // good  inbox . filter (( msg )   =   { \n   const   {   subject ,   author   }   =   msg ; \n   if   ( subject   ===   Mockingbird )   { \n     return   author   ===   Harper Lee ; \n   } \n\n   return   false ;  });   \u2b06 back to top", 
            "title": "4.3 Spreads"
        }, 
        {
            "location": "/js/javascript/#destructuring", 
            "text": "5.1  Use object destructuring when accessing and using multiple properties of an object. jscs:  requireObjectDestructuring    Why? Destructuring saves you from creating temporary references for those properties.   // bad  function   getFullName ( user )   { \n   const   firstName   =   user . firstName ; \n   const   lastName   =   user . lastName ; \n\n   return   ` ${ firstName }   ${ lastName } ` ;  }  // good  function   getFullName ( user )   { \n   const   {   firstName ,   lastName   }   =   user ; \n   return   ` ${ firstName }   ${ lastName } ` ;  }  // best  function   getFullName ({   firstName ,   lastName   })   { \n   return   ` ${ firstName }   ${ lastName } ` ;  }    5.2  Use array destructuring. jscs:  requireArrayDestructuring   const   arr   =   [ 1 ,   2 ,   3 ,   4 ];  // bad  const   first   =   arr [ 0 ];  const   second   =   arr [ 1 ];  // good  const   [ first ,   second ]   =   arr ;    5.3  Use object destructuring for multiple return values, not array destructuring. jscs:  disallowArrayDestructuringReturn    Why? You can add new properties over time or change the order of things without breaking call sites.   // bad  function   processInput ( input )   { \n   // then a miracle occurs \n   return   [ left ,   right ,   top ,   bottom ];  }  // the caller needs to think about the order of return data  const   [ left ,   __ ,   top ]   =   processInput ( input );  // good  function   processInput ( input )   { \n   // then a miracle occurs \n   return   {   left ,   right ,   top ,   bottom   };  }  // the caller selects only the data they need  const   {   left ,   top   }   =   processInput ( input );   \u2b06 back to top", 
            "title": "Destructuring"
        }, 
        {
            "location": "/js/javascript/#strings", 
            "text": "6.1  Use single quotes  ''  for strings. eslint:  quotes  jscs:  validateQuoteMarks   // bad  const   name   =   Capt. Janeway ;  // bad - template literals should contain interpolation or newlines  const   name   =   `Capt. Janeway` ;  // good  const   name   =   Capt. Janeway ;    6.2  Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.    Why? Broken strings are painful to work with and make code less searchable.   // bad  const   errorMessage   =   This is a super long error that was thrown because \\  of Batman. When you stop to think about how Batman had anything to do \\  with this, you would get nowhere \\  fast. ;  // bad  const   errorMessage   =   This is a super long error that was thrown because    + \n   of Batman. When you stop to think about how Batman had anything to do    + \n   with this, you would get nowhere fast. ;  // good  const   errorMessage   =   This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast. ;    6.3  When programmatically building up strings, use template strings instead of concatenation. eslint:  prefer-template   template-curly-spacing  jscs:  requireTemplateStrings    Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.   // bad  function   sayHi ( name )   { \n   return   How are you,    +   name   +   ? ;  }  // bad  function   sayHi ( name )   { \n   return   [ How are you,  ,   name ,   ? ]. join ();  }  // bad  function   sayHi ( name )   { \n   return   `How are you,  ${   name   } ?` ;  }  // good  function   sayHi ( name )   { \n   return   `How are you,  ${ name } ?` ;  }     6.4  Never use  eval()  on a string, it opens too many vulnerabilities.    6.5  Do not unnecessarily escape characters in strings. eslint:  no-useless-escape     Why? Backslashes harm readability, thus they should only be present when necessary.   // bad  const   foo   =   \\ this\\  \\i\\s \\ quoted\\ ;  // good  const   foo   =   \\ this\\  is  quoted ;  const   foo   =   `my name is  ${ name } ` ;   \u2b06 back to top", 
            "title": "Strings"
        }, 
        {
            "location": "/js/javascript/#functions", 
            "text": "7.1  Use named function expressions instead of function declarations. eslint:  func-style  jscs:  disallowFunctionDeclarations    Why? Function declarations are hoisted, which means that it\u2019s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function\u2019s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it\u2019s time to extract it to its own module! Don\u2019t forget to name the expression - anonymous functions can make it harder to locate the problem in an Error's call stack. ( Discussion )   // bad  function   foo ()   { \n   // ...  }  // bad  const   foo   =   function   ()   { \n   // ...  };  // good  const   foo   =   function   bar ()   { \n   // ...  };    7.2  Wrap immediately invoked function expressions in parentheses. eslint:  wrap-iife  jscs:  requireParenthesesAroundIIFE    Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.   // immediately-invoked function expression (IIFE)  ( function   ()   { \n   console . log ( Welcome to the Internet. Please follow me. );  }());     7.3  Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint:  no-loop-func    7.4   Note:  ECMA-262 defines a  block  as a list of statements. A function declaration is not a statement.  Read ECMA-262's note on this issue .    // bad  if   ( currentUser )   { \n   function   test ()   { \n     console . log ( Nope. ); \n   }  }  // good  let   test ;  if   ( currentUser )   { \n   test   =   ()   =   { \n     console . log ( Yup. ); \n   };  }    7.5  Never name a parameter  arguments . This will take precedence over the  arguments  object that is given to every function scope.   // bad  function   foo ( name ,   options ,   arguments )   { \n   // ...  }  // good  function   foo ( name ,   options ,   args )   { \n   // ...  }    7.6  Never use  arguments , opt to use rest syntax  ...  instead. eslint:  prefer-rest-params    Why?  ...  is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like  arguments .   // bad  function   concatenateAll ()   { \n   const   args   =   Array . prototype . slice . call ( arguments ); \n   return   args . join ( );  }  // good  function   concatenateAll (... args )   { \n   return   args . join ( );  }    7.7  Use default parameter syntax rather than mutating function arguments.   // really bad  function   handleThings ( opts )   { \n   // No! We shouldn t mutate function arguments. \n   // Double bad: if opts is falsy it ll be set to an object which may \n   // be what you want but it can introduce subtle bugs. \n   opts   =   opts   ||   {}; \n   // ...  }  // still bad  function   handleThings ( opts )   { \n   if   ( opts   ===   void   0 )   { \n     opts   =   {}; \n   } \n   // ...  }  // good  function   handleThings ( opts   =   {})   { \n   // ...  }    7.8  Avoid side effects with default parameters.    Why? They are confusing to reason about.   var   b   =   1 ;  // bad  function   count ( a   =   b ++ )   { \n   console . log ( a );  }  count ();    // 1  count ();    // 2  count ( 3 );   // 3  count ();    // 3    7.9  Always put default parameters last.   // bad  function   handleThings ( opts   =   {},   name )   { \n   // ...  }  // good  function   handleThings ( name ,   opts   =   {})   { \n   // ...  }    7.10  Never use the Function constructor to create a new function. eslint:  no-new-func    Why? Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities.   // bad  var   add   =   new   Function ( a ,   b ,   return a + b );  // still bad  var   subtract   =   Function ( a ,   b ,   return a - b );    7.11  Spacing in a function signature. eslint:  space-before-function-paren   space-before-blocks    Why? Consistency is good, and you shouldn\u2019t have to add or remove a space when adding or removing a name.   // bad  const   f   =   function (){};  const   g   =   function   (){};  const   h   =   function ()   {};  // good  const   x   =   function   ()   {};  const   y   =   function   a ()   {};    7.12  Never mutate parameters. eslint:  no-param-reassign    Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.   // bad  function   f1 ( obj )   { \n   obj . key   =   1 ;  }  // good  function   f2 ( obj )   { \n   const   key   =   Object . prototype . hasOwnProperty . call ( obj ,   key )   ?   obj . key   :   1 ;  }    7.13  Never reassign parameters. eslint:  no-param-reassign    Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the  arguments  object. It can also cause optimization issues, especially in V8.   // bad  function   f1 ( a )   { \n   a   =   1 ; \n   // ...  }  function   f2 ( a )   { \n   if   ( ! a )   {   a   =   1 ;   } \n   // ...  }  // good  function   f3 ( a )   { \n   const   b   =   a   ||   1 ; \n   // ...  }  function   f4 ( a   =   1 )   { \n   // ...  }    7.14  Prefer the use of the spread operator  ...  to call variadic functions. eslint:  prefer-spread    Why? It's cleaner, you don't need to supply a context, and you can not easily compose  new  with  apply .   // bad  const   x   =   [ 1 ,   2 ,   3 ,   4 ,   5 ];  console . log . apply ( console ,   x );  // good  const   x   =   [ 1 ,   2 ,   3 ,   4 ,   5 ];  console . log (... x );  // bad  new   ( Function . prototype . bind . apply ( Date ,   [ null ,   2016 ,   8 ,   5 ]));  // good  new   Date (...[ 2016 ,   8 ,   5 ]);    7.15  Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item.   // bad  function   foo ( bar , \n              baz , \n              quux )   { \n   // ...  }  // good  function   foo ( \n   bar , \n   baz , \n   quux ,  )   { \n   // ...  }  // bad  console . log ( foo , \n   bar , \n   baz );  // good  console . log ( \n   foo , \n   bar , \n   baz ,  );   \u2b06 back to top", 
            "title": "Functions"
        }, 
        {
            "location": "/js/javascript/#arrow-functions", 
            "text": "8.1  When you must use function expressions (as when passing an anonymous function), use arrow function notation. eslint:  prefer-arrow-callback ,  arrow-spacing  jscs:  requireArrowFunctions    Why? It creates a version of the function that executes in the context of  this , which is usually what you want, and is a more concise syntax.  Why not? If you have a fairly complicated function, you might move that logic out into its own function declaration.   // bad  [ 1 ,   2 ,   3 ]. map ( function   ( x )   { \n   const   y   =   x   +   1 ; \n   return   x   *   y ;  });  // good  [ 1 ,   2 ,   3 ]. map (( x )   =   { \n   const   y   =   x   +   1 ; \n   return   x   *   y ;  });    8.2  If the function body consists of a single expression, omit the braces and use the implicit return. Otherwise, keep the braces and use a  return  statement. eslint:  arrow-parens ,  arrow-body-style  jscs:   disallowParenthesesAroundArrowParam ,  requireShorthandArrowFunctions    Why? Syntactic sugar. It reads well when multiple functions are chained together.   // bad  [ 1 ,   2 ,   3 ]. map ( number   =   { \n   const   nextNumber   =   number   +   1 ; \n   `A string containing the  ${ nextNumber } .` ;  });  // good  [ 1 ,   2 ,   3 ]. map ( number   =   `A string containing the  ${ number } .` );  // good  [ 1 ,   2 ,   3 ]. map (( number )   =   { \n   const   nextNumber   =   number   +   1 ; \n   return   `A string containing the  ${ nextNumber } .` ;  });  // good  [ 1 ,   2 ,   3 ]. map (( number ,   index )   =   ({ \n   [ index ] :   number ,  }));    8.3  In case the expression spans over multiple lines, wrap it in parentheses for better readability.    Why? It shows clearly where the function starts and ends.   // bad  [ get ,   post ,   put ]. map ( httpMethod   =   Object . prototype . hasOwnProperty . call ( \n     httpMagicObjectWithAVeryLongName , \n     httpMethod , \n   )  );  // good  [ get ,   post ,   put ]. map ( httpMethod   =   ( \n   Object . prototype . hasOwnProperty . call ( \n     httpMagicObjectWithAVeryLongName , \n     httpMethod , \n   )  ));    8.4  If your function takes a single argument and doesn\u2019t use braces, omit the parentheses. Otherwise, always include parentheses around arguments. eslint:  arrow-parens  jscs:   disallowParenthesesAroundArrowParam    Why? Less visual clutter.   // bad  [ 1 ,   2 ,   3 ]. map (( x )   =   x   *   x );  // good  [ 1 ,   2 ,   3 ]. map ( x   =   x   *   x );  // good  [ 1 ,   2 ,   3 ]. map ( number   =   ( \n   `A long string with the  ${ number } . It\u2019s so long that we don\u2019t want it to take up space on the .map line!`  ));  // bad  [ 1 ,   2 ,   3 ]. map ( x   =   { \n   const   y   =   x   +   1 ; \n   return   x   *   y ;  });  // good  [ 1 ,   2 ,   3 ]. map (( x )   =   { \n   const   y   =   x   +   1 ; \n   return   x   *   y ;  });    8.5  Avoid confusing arrow function syntax ( = ) with comparison operators ( = ,  = ). eslint:  no-confusing-arrow   // bad  const   itemHeight   =   item   =   item . height     256   ?   item . largeSize   :   item . smallSize ;  // bad  const   itemHeight   =   ( item )   =   item . height     256   ?   item . largeSize   :   item . smallSize ;  // good  const   itemHeight   =   item   =   ( item . height     256   ?   item . largeSize   :   item . smallSize );  // good  const   itemHeight   =   ( item )   =   { \n   const   {   height ,   largeSize ,   smallSize   }   =   item ; \n   return   height     256   ?   largeSize   :   smallSize ;  };   \u2b06 back to top", 
            "title": "Arrow Functions"
        }, 
        {
            "location": "/js/javascript/#classes-constructors", 
            "text": "9.1  Always use  class . Avoid manipulating  prototype  directly.    Why?  class  syntax is more concise and easier to reason about.   // bad  function   Queue ( contents   =   [])   { \n   this . queue   =   [... contents ];  }  Queue . prototype . pop   =   function   ()   { \n   const   value   =   this . queue [ 0 ]; \n   this . queue . splice ( 0 ,   1 ); \n   return   value ;  };  // good  class   Queue   { \n   constructor ( contents   =   [])   { \n     this . queue   =   [... contents ]; \n   } \n   pop ()   { \n     const   value   =   this . queue [ 0 ]; \n     this . queue . splice ( 0 ,   1 ); \n     return   value ; \n   }  }    9.2  Use  extends  for inheritance.    Why? It is a built-in way to inherit prototype functionality without breaking  instanceof .   // bad  const   inherits   =   require ( inherits );  function   PeekableQueue ( contents )   { \n   Queue . apply ( this ,   contents );  }  inherits ( PeekableQueue ,   Queue );  PeekableQueue . prototype . peek   =   function   ()   { \n   return   this . queue [ 0 ];  };  // good  class   PeekableQueue   extends   Queue   { \n   peek ()   { \n     return   this . queue [ 0 ]; \n   }  }    9.3  Methods can return  this  to help with method chaining.   // bad  Jedi . prototype . jump   =   function   ()   { \n   this . jumping   =   true ; \n   return   true ;  };  Jedi . prototype . setHeight   =   function   ( height )   { \n   this . height   =   height ;  };  const   luke   =   new   Jedi ();  luke . jump ();   // =  true  luke . setHeight ( 20 );   // =  undefined  // good  class   Jedi   { \n   jump ()   { \n     this . jumping   =   true ; \n     return   this ; \n   } \n\n   setHeight ( height )   { \n     this . height   =   height ; \n     return   this ; \n   }  }  const   luke   =   new   Jedi ();  luke . jump () \n   . setHeight ( 20 );    9.4  It's okay to write a custom toString() method, just make sure it works successfully and causes no side effects.   class   Jedi   { \n   constructor ( options   =   {})   { \n     this . name   =   options . name   ||   no name ; \n   } \n\n   getName ()   { \n     return   this . name ; \n   } \n\n   toString ()   { \n     return   `Jedi -  ${ this . getName () } ` ; \n   }  }    9.5  Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint:  no-useless-constructor   // bad  class   Jedi   { \n   constructor ()   {} \n\n   getName ()   { \n     return   this . name ; \n   }  }  // bad  class   Rey   extends   Jedi   { \n   constructor (... args )   { \n     super (... args ); \n   }  }  // good  class   Rey   extends   Jedi   { \n   constructor (... args )   { \n     super (... args ); \n     this . name   =   Rey ; \n   }  }    9.6  Avoid duplicate class members. eslint:  no-dupe-class-members    Why? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.   // bad  class   Foo   { \n   bar ()   {   return   1 ;   } \n   bar ()   {   return   2 ;   }  }  // good  class   Foo   { \n   bar ()   {   return   1 ;   }  }  // good  class   Foo   { \n   bar ()   {   return   2 ;   }  }   \u2b06 back to top", 
            "title": "Classes &amp; Constructors"
        }, 
        {
            "location": "/js/javascript/#modules", 
            "text": "10.1  Always use modules ( import / export ) over a non-standard module system. You can always transpile to your preferred module system.    Why? Modules are the future, let's start using the future now.   // bad  const   AirbnbStyleGuide   =   require ( ./AirbnbStyleGuide );  module . exports   =   AirbnbStyleGuide . es6 ;  // ok  import   AirbnbStyleGuide   from   ./AirbnbStyleGuide ;  export   default   AirbnbStyleGuide . es6 ;  // best  import   {   es6   }   from   ./AirbnbStyleGuide ;  export   default   es6 ;    10.2  Do not use wildcard imports.    Why? This makes sure you have a single default export.   // bad  import   *   as   AirbnbStyleGuide   from   ./AirbnbStyleGuide ;  // good  import   AirbnbStyleGuide   from   ./AirbnbStyleGuide ;    10.3  And do not export directly from an import.    Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.   // bad  // filename es6.js  export   {   es6   as   default   }   from   ./AirbnbStyleGuide ;  // good  // filename es6.js  import   {   es6   }   from   ./AirbnbStyleGuide ;  export   default   es6 ;    10.4  Only import from a path in one place.\neslint:  no-duplicate-imports  Why? Having multiple lines that import from the same path can make code harder to maintain.     // bad  import   foo   from   foo ;  // \u2026 some other imports \u2026 //  import   {   named1 ,   named2   }   from   foo ;  // good  import   foo ,   {   named1 ,   named2   }   from   foo ;  // good  import   foo ,   { \n   named1 , \n   named2 ,  }   from   foo ;    10.5  Do not export mutable bindings.\neslint:  import/no-mutable-exports  Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.     // bad  let   foo   =   3 ;  export   {   foo   };  // good  const   foo   =   3 ;  export   {   foo   };    10.6  In modules with a single export, prefer default export over named export.\neslint:  import/prefer-default-export   // bad  export   function   foo ()   {}  // good  export   default   function   foo ()   {}    10.7  Put all  import s above non-import statements.\neslint:  import/first  Why? Since  import s are hoisted, keeping them all at the top prevents surprising behavior.     // bad  import   foo   from   foo ;  foo . init ();  import   bar   from   bar ;  // good  import   foo   from   foo ;  import   bar   from   bar ;  foo . init ();    10.8  Multiline imports should be indented just like multiline array and object literals.    Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.   // bad  import   { longNameA ,   longNameB ,   longNameC ,   longNameD ,   longNameE }   from   path ;  // good  import   { \n   longNameA , \n   longNameB , \n   longNameC , \n   longNameD , \n   longNameE ,  }   from   path ;    10.9  Disallow Webpack loader syntax in module import statements.\neslint:  import/no-webpack-loader-syntax  Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in  webpack.config.js .     // bad  import   fooSass   from   css!sass!foo.scss ;  import   barCss   from   style!css!bar.css ;  // good  import   fooSass   from   foo.scss ;  import   barCss   from   bar.css ;   \u2b06 back to top", 
            "title": "Modules"
        }, 
        {
            "location": "/js/javascript/#iterators-and-generators", 
            "text": "11.1  Don't use iterators. Prefer JavaScript's higher-order functions instead of loops like  for-in  or  for-of . eslint:  no-iterator   no-restricted-syntax    Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.  Use  map()  /  every()  /  filter()  /  find()  /  findIndex()  /  reduce()  /  some()  / ... to iterate over arrays, and  Object.keys()  /  Object.values()  /  Object.entries()  to produce arrays so you can iterate over objects.   const   numbers   =   [ 1 ,   2 ,   3 ,   4 ,   5 ];  // bad  let   sum   =   0 ;  for   ( let   num   of   numbers )   { \n   sum   +=   num ;  }  sum   ===   15 ;  // good  let   sum   =   0 ;  numbers . forEach ( num   =   sum   +=   num );  sum   ===   15 ;  // best (use the functional force)  const   sum   =   numbers . reduce (( total ,   num )   =   total   +   num ,   0 );  sum   ===   15 ;  // bad  const   increasedByOne   =   [];  for   ( let   i   =   0 ;   i     numbers . length ;   i ++ )   { \n   increasedByOne . push ( numbers [ i ]   +   1 );  }  // good  const   increasedByOne   =   [];  numbers . forEach ( num   =   increasedByOne . push ( num   +   1 ));  // best (keeping it functional)  const   increasedByOne   =   numbers . map ( num   =   num   +   1 );    11.2  Don't use generators for now.    Why? They don't transpile well to ES5.    11.3  If you must use generators, or if you disregard  our advice , make sure their function signature is spaced properly. eslint:  generator-star-spacing    Why?  function  and  *  are part of the same conceptual keyword -  *  is not a modifier for  function ,  function*  is a unique construct, different from  function .   // bad  function   *   foo ()   { \n   // ...  }  // bad  const   bar   =   function   *   ()   { \n   // ...  };  // bad  const   baz   =   function   * ()   { \n   // ...  };  // bad  const   quux   =   function * ()   { \n   // ...  };  // bad  function * foo ()   { \n   // ...  }  // bad  function   * foo ()   { \n   // ...  }  // very bad  function  *  foo ()   { \n   // ...  }  // very bad  const   wat   =   function  *  ()   { \n   // ...  };  // good  function *   foo ()   { \n   // ...  }  // good  const   foo   =   function *   ()   { \n   // ...  };   \u2b06 back to top", 
            "title": "Iterators and Generators"
        }, 
        {
            "location": "/js/javascript/#properties", 
            "text": "12.1  Use dot notation when accessing properties. eslint:  dot-notation  jscs:  requireDotNotation   const   luke   =   { \n   jedi :   true , \n   age :   28 ,  };  // bad  const   isJedi   =   luke [ jedi ];  // good  const   isJedi   =   luke . jedi ;    12.2  Use bracket notation  []  when accessing properties with a variable.   const   luke   =   { \n   jedi :   true , \n   age :   28 ,  };  function   getProp ( prop )   { \n   return   luke [ prop ];  }  const   isJedi   =   getProp ( jedi );   \u2b06 back to top", 
            "title": "Properties"
        }, 
        {
            "location": "/js/javascript/#variables", 
            "text": "13.1  Always use  const  to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint:  no-undef   prefer-const   // bad  superPower   =   new   SuperPower ();  // good  const   superPower   =   new   SuperPower ();    13.2  Use one  const  declaration per variable. eslint:  one-var  jscs:  disallowMultipleVarDecl    Why? It's easier to add new variable declarations this way, and you never have to worry about swapping out a  ;  for a  ,  or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.   // bad  const   items   =   getItems (), \n     goSportsTeam   =   true , \n     dragonball   =   z ;  // bad  // (compare to above, and try to spot the mistake)  const   items   =   getItems (), \n     goSportsTeam   =   true ; \n     dragonball   =   z ;  // good  const   items   =   getItems ();  const   goSportsTeam   =   true ;  const   dragonball   =   z ;    13.3  Group all your  const s and then group all your  let s.    Why? This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.   // bad  let   i ,   len ,   dragonball , \n     items   =   getItems (), \n     goSportsTeam   =   true ;  // bad  let   i ;  const   items   =   getItems ();  let   dragonball ;  const   goSportsTeam   =   true ;  let   len ;  // good  const   goSportsTeam   =   true ;  const   items   =   getItems ();  let   dragonball ;  let   i ;  let   length ;    13.4  Assign variables where you need them, but place them in a reasonable place.    Why?  let  and  const  are block scoped and not function scoped.   // bad - unnecessary function call  function   checkName ( hasName )   { \n   const   name   =   getName (); \n\n   if   ( hasName   ===   test )   { \n     return   false ; \n   } \n\n   if   ( name   ===   test )   { \n     this . setName ( ); \n     return   false ; \n   } \n\n   return   name ;  }  // good  function   checkName ( hasName )   { \n   if   ( hasName   ===   test )   { \n     return   false ; \n   } \n\n   const   name   =   getName (); \n\n   if   ( name   ===   test )   { \n     this . setName ( ); \n     return   false ; \n   } \n\n   return   name ;  }    Don't chain variable assignments.  Chaining variable assignments creates implicit global variables.   // bad  ( function   example ()   { \n   // JavaScript interprets this as \n   // let a = ( b = ( c = 1 ) ); \n   // The let keyword only applies to variable a; variables b and c become \n   // global variables. \n   let   a   =   b   =   c   =   1 ;  }());  console . log ( a );   // undefined  console . log ( b );   // 1  console . log ( c );   // 1  // good  ( function   example ()   { \n   let   a   =   1 ; \n   let   b   =   a ; \n   let   c   =   a ;  }());  console . log ( a );   // undefined  console . log ( b );   // undefined  console . log ( c );   // undefined  // the same applies for `const`    13.6  Avoid using unary increments and decrements (++, --). eslint  no-plusplus    Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like  num += 1  instead of  num++  or  num ++ . Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.   // bad  let   array   =   [ 1 ,   2 ,   3 ];  let   num   =   1 ;  num ++ ;  -- num ;  let   sum   =   0 ;  let   truthyCount   =   0 ;  for   ( let   i   =   0 ;   i     array . length ;   i ++ )   { \n   let   value   =   array [ i ]; \n   sum   +=   value ; \n   if   ( value )   { \n     truthyCount ++ ; \n   }  }  // good  let   array   =   [ 1 ,   2 ,   3 ];  let   num   =   1 ;  num   +=   1 ;  num   -=   1 ;  const   sum   =   array . reduce (( a ,   b )   =   a   +   b ,   0 );  const   truthyCount   =   array . filter ( Boolean ). length ;   \u2b06 back to top", 
            "title": "Variables"
        }, 
        {
            "location": "/js/javascript/#hoisting", 
            "text": "14.1   var  declarations get hoisted to the top of their scope, their assignment does not.  const  and  let  declarations are blessed with a new concept called  Temporal Dead Zones (TDZ) . It's important to know why  typeof is no longer safe .   // we know this wouldn t work (assuming there  // is no notDefined global variable)  function   example ()   { \n   console . log ( notDefined );   // =  throws a ReferenceError  }  // creating a variable declaration after you  // reference the variable will work due to  // variable hoisting. Note: the assignment  // value of `true` is not hoisted.  function   example ()   { \n   console . log ( declaredButNotAssigned );   // =  undefined \n   var   declaredButNotAssigned   =   true ;  }  // the interpreter is hoisting the variable  // declaration to the top of the scope,  // which means our example could be rewritten as:  function   example ()   { \n   let   declaredButNotAssigned ; \n   console . log ( declaredButNotAssigned );   // =  undefined \n   declaredButNotAssigned   =   true ;  }  // using const and let  function   example ()   { \n   console . log ( declaredButNotAssigned );   // =  throws a ReferenceError \n   console . log ( typeof   declaredButNotAssigned );   // =  throws a ReferenceError \n   const   declaredButNotAssigned   =   true ;  }    14.2  Anonymous function expressions hoist their variable name, but not the function assignment.   function   example ()   { \n   console . log ( anonymous );   // =  undefined \n\n   anonymous ();   // =  TypeError anonymous is not a function \n\n   var   anonymous   =   function   ()   { \n     console . log ( anonymous function expression ); \n   };  }    14.3  Named function expressions hoist the variable name, not the function name or the function body.   function   example ()   { \n   console . log ( named );   // =  undefined \n\n   named ();   // =  TypeError named is not a function \n\n   superPower ();   // =  ReferenceError superPower is not defined \n\n   var   named   =   function   superPower ()   { \n     console . log ( Flying ); \n   };  }  // the same is true when the function name  // is the same as the variable name.  function   example ()   { \n   console . log ( named );   // =  undefined \n\n   named ();   // =  TypeError named is not a function \n\n   var   named   =   function   named ()   { \n     console . log ( named ); \n   };  }    14.4  Function declarations hoist their name and the function body.   function   example ()   { \n   superPower ();   // =  Flying \n\n   function   superPower ()   { \n     console . log ( Flying ); \n   }  }    For more information refer to  JavaScript Scoping   Hoisting  by  Ben Cherry .   \u2b06 back to top", 
            "title": "Hoisting"
        }, 
        {
            "location": "/js/javascript/#comparison-operators-equality", 
            "text": "15.1  Use  ===  and  !==  over  ==  and  != . eslint:  eqeqeq    15.2  Conditional statements such as the  if  statement evaluate their expression using coercion with the  ToBoolean  abstract method and always follow these simple rules:    Objects  evaluate to  true   Undefined  evaluates to  false  Null  evaluates to  false  Booleans  evaluate to  the value of the boolean  Numbers  evaluate to  false  if  +0, -0, or NaN , otherwise  true  Strings  evaluate to  false  if an empty string  '' , otherwise  true   if   ([ 0 ]     [])   { \n   // true \n   // an array (even an empty one) is an object, objects will evaluate to true  }    15.3  Use shortcuts for booleans, but explicit comparisons for strings and numbers.   // bad  if   ( isValid   ===   true )   { \n   // ...  }  // good  if   ( isValid )   { \n   // ...  }  // bad  if   ( name )   { \n   // ...  }  // good  if   ( name   !==   )   { \n   // ...  }  // bad  if   ( collection . length )   { \n   // ...  }  // good  if   ( collection . length     0 )   { \n   // ...  }     15.4  For more information see  Truth Equality and JavaScript  by Angus Croll.    15.5  Use braces to create blocks in  case  and  default  clauses that contain lexical declarations (e.g.  let ,  const ,  function , and  class ).     Why? Lexical declarations are visible in the entire  switch  block but only get initialized when assigned, which only happens when its  case  is reached. This causes problems when multiple  case  clauses attempt to define the same thing.   eslint rules:  no-case-declarations .  // bad  switch   ( foo )   { \n   case   1 : \n     let   x   =   1 ; \n     break ; \n   case   2 : \n     const   y   =   2 ; \n     break ; \n   case   3 : \n     function   f ()   { \n       // ... \n     } \n     break ; \n   default : \n     class   C   {}  }  // good  switch   ( foo )   { \n   case   1 :   { \n     let   x   =   1 ; \n     break ; \n   } \n   case   2 :   { \n     const   y   =   2 ; \n     break ; \n   } \n   case   3 :   { \n     function   f ()   { \n       // ... \n     } \n     break ; \n   } \n   case   4 : \n     bar (); \n     break ; \n   default :   { \n     class   C   {} \n   }  }    15.6  Ternaries should not be nested and generally be single line expressions.   eslint rules:  no-nested-ternary .  // bad  const   foo   =   maybe1     maybe2 \n   ?   bar \n   :   value1     value2   ?   baz   :   null ;  // better  const   maybeNull   =   value1     value2   ?   baz   :   null ;  const   foo   =   maybe1     maybe2 \n   ?   bar \n   :   maybeNull ;  // best  const   maybeNull   =   value1     value2   ?   baz   :   null ;  const   foo   =   maybe1     maybe2   ?   bar   :   maybeNull ;    15.7  Avoid unneeded ternary statements.   eslint rules:  no-unneeded-ternary .  // bad  const   foo   =   a   ?   a   :   b ;  const   bar   =   c   ?   true   :   false ;  const   baz   =   c   ?   false   :   true ;  // good  const   foo   =   a   ||   b ;  const   bar   =   !! c ;  const   baz   =   ! c ;   \u2b06 back to top", 
            "title": "Comparison Operators &amp; Equality"
        }, 
        {
            "location": "/js/javascript/#blocks", 
            "text": "16.1  Use braces with all multi-line blocks.   // bad  if   ( test ) \n   return   false ;  // good  if   ( test )   return   false ;  // good  if   ( test )   { \n   return   false ;  }  // bad  function   foo ()   {   return   false ;   }  // good  function   bar ()   { \n   return   false ;  }    16.2  If you're using multi-line blocks with  if  and  else , put  else  on the same line as your  if  block's closing brace. eslint:  brace-style  jscs:   disallowNewlineBeforeBlockStatements   // bad  if   ( test )   { \n   thing1 (); \n   thing2 ();  }  else   { \n   thing3 ();  }  // good  if   ( test )   { \n   thing1 (); \n   thing2 ();  }   else   { \n   thing3 ();  }   \u2b06 back to top", 
            "title": "Blocks"
        }, 
        {
            "location": "/js/javascript/#comments", 
            "text": "17.1  Use  /** ... */  for multi-line comments.   // bad  // make() returns a new element  // based on the passed in tag name  //  // @param {String} tag  // @return {Element} element  function   make ( tag )   { \n\n   // ... \n\n   return   element ;  }  // good  /**   * make() returns a new element   * based on the passed-in tag name   */  function   make ( tag )   { \n\n   // ... \n\n   return   element ;  }    17.2  Use  //  for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it's on the first line of a block.   // bad  const   active   =   true ;    // is current tab  // good  // is current tab  const   active   =   true ;  // bad  function   getType ()   { \n   console . log ( fetching type... ); \n   // set the default type to  no type \n   const   type   =   this . type   ||   no type ; \n\n   return   type ;  }  // good  function   getType ()   { \n   console . log ( fetching type... ); \n\n   // set the default type to  no type \n   const   type   =   this . type   ||   no type ; \n\n   return   type ;  }  // also good  function   getType ()   { \n   // set the default type to  no type \n   const   type   =   this . type   ||   no type ; \n\n   return   type ;  }    17.3  Start all comments with a space to make it easier to read. eslint:  spaced-comment   // bad  //is current tab  const   active   =   true ;  // good  // is current tab  const   active   =   true ;  // bad  /**   *make() returns a new element   *based on the passed-in tag name   */  function   make ( tag )   { \n\n   // ... \n\n   return   element ;  }  // good  /**   * make() returns a new element   * based on the passed-in tag name   */  function   make ( tag )   { \n\n   // ... \n\n   return   element ;  }     17.4  Prefixing your comments with  FIXME  or  TODO  helps other developers quickly understand if you're pointing out a problem that needs to be revisited, or if you're suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are  FIXME: -- need to figure this out  or  TODO: -- need to implement .    17.5  Use  // FIXME:  to annotate problems.    class   Calculator   extends   Abacus   { \n   constructor ()   { \n     super (); \n\n     // FIXME: shouldn t use a global here \n     total   =   0 ; \n   }  }    17.6  Use  // TODO:  to annotate solutions to problems.   class   Calculator   extends   Abacus   { \n   constructor ()   { \n     super (); \n\n     // TODO: total should be configurable by an options param \n     this . total   =   0 ; \n   }  }   \u2b06 back to top", 
            "title": "Comments"
        }, 
        {
            "location": "/js/javascript/#whitespace", 
            "text": "18.1  Use soft tabs set to 2 spaces. eslint:  indent  jscs:  validateIndentation   // bad  function   foo ()   {  \u2219\u2219\u2219\u2219 let   name ;  }  // bad  function   bar ()   {  \u2219 let   name ;  }  // good  function   baz ()   {  \u2219\u2219 let   name ;  }    18.2  Place 1 space before the leading brace. eslint:  space-before-blocks  jscs:  requireSpaceBeforeBlockStatements   // bad  function   test (){ \n   console . log ( test );  }  // good  function   test ()   { \n   console . log ( test );  }  // bad  dog . set ( attr ,{ \n   age :   1 year , \n   breed :   Bernese Mountain Dog ,  });  // good  dog . set ( attr ,   { \n   age :   1 year , \n   breed :   Bernese Mountain Dog ,  });    18.3  Place 1 space before the opening parenthesis in control statements ( if ,  while  etc.). Place no space between the argument list and the function name in function calls and declarations. eslint:  keyword-spacing  jscs:  requireSpaceAfterKeywords   // bad  if ( isJedi )   { \n   fight   ();  }  // good  if   ( isJedi )   { \n   fight ();  }  // bad  function   fight   ()   { \n   console . log   ( Swooosh! );  }  // good  function   fight ()   { \n   console . log ( Swooosh! );  }    18.4  Set off operators with spaces. eslint:  space-infix-ops  jscs:  requireSpaceBeforeBinaryOperators ,  requireSpaceAfterBinaryOperators   // bad  const   x = y + 5 ;  // good  const   x   =   y   +   5 ;    18.5  End files with a single newline character. eslint:  eol-last   // bad  import   {   es6   }   from   ./AirbnbStyleGuide ; \n   // ...  export   default   es6 ;   // bad  import   {   es6   }   from   ./AirbnbStyleGuide ; \n   // ...  export   default   es6 ; \u21b5  \u21b5   // good  import   {   es6   }   from   ./AirbnbStyleGuide ; \n   // ...  export   default   es6 ; \u21b5    18.6  Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which\nemphasizes that the line is a method call, not a new statement. eslint:  newline-per-chained-call   no-whitespace-before-property   // bad  $ ( #items ). find ( .selected ). highlight (). end (). find ( .open ). updateCount ();  // bad  $ ( #items ). \n   find ( .selected ). \n     highlight (). \n     end (). \n   find ( .open ). \n     updateCount ();  // good  $ ( #items ) \n   . find ( .selected ) \n     . highlight () \n     . end () \n   . find ( .open ) \n     . updateCount ();  // bad  const   leds   =   stage . selectAll ( .led ). data ( data ). enter (). append ( svg:svg ). classed ( led ,   true ) \n     . attr ( width ,   ( radius   +   margin )   *   2 ). append ( svg:g ) \n     . attr ( transform ,   `translate( ${ radius   +   margin } , ${ radius   +   margin } )` ) \n     . call ( tron . led );  // good  const   leds   =   stage . selectAll ( .led ) \n     . data ( data ) \n   . enter (). append ( svg:svg ) \n     . classed ( led ,   true ) \n     . attr ( width ,   ( radius   +   margin )   *   2 ) \n   . append ( svg:g ) \n     . attr ( transform ,   `translate( ${ radius   +   margin } , ${ radius   +   margin } )` ) \n     . call ( tron . led );  // good  const   leds   =   stage . selectAll ( .led ). data ( data );    18.7  Leave a blank line after blocks and before the next statement. jscs:  requirePaddingNewLinesAfterBlocks   // bad  if   ( foo )   { \n   return   bar ;  }  return   baz ;  // good  if   ( foo )   { \n   return   bar ;  }  return   baz ;  // bad  const   obj   =   { \n   foo ()   { \n   }, \n   bar ()   { \n   },  };  return   obj ;  // good  const   obj   =   { \n   foo ()   { \n   }, \n\n   bar ()   { \n   },  };  return   obj ;  // bad  const   arr   =   [ \n   function   foo ()   { \n   }, \n   function   bar ()   { \n   },  ];  return   arr ;  // good  const   arr   =   [ \n   function   foo ()   { \n   }, \n\n   function   bar ()   { \n   },  ];  return   arr ;    18.8  Do not pad your blocks with blank lines. eslint:  padded-blocks  jscs:   disallowPaddingNewlinesInBlocks   // bad  function   bar ()   { \n\n   console . log ( foo );  }  // also bad  if   ( baz )   { \n\n   console . log ( qux );  }   else   { \n   console . log ( foo );  }  // good  function   bar ()   { \n   console . log ( foo );  }  // good  if   ( baz )   { \n   console . log ( qux );  }   else   { \n   console . log ( foo );  }    18.9  Do not add spaces inside parentheses. eslint:  space-in-parens  jscs:  disallowSpacesInsideParentheses   // bad  function   bar (   foo   )   { \n   return   foo ;  }  // good  function   bar ( foo )   { \n   return   foo ;  }  // bad  if   (   foo   )   { \n   console . log ( foo );  }  // good  if   ( foo )   { \n   console . log ( foo );  }    18.10  Do not add spaces inside brackets. eslint:  array-bracket-spacing  jscs:  disallowSpacesInsideArrayBrackets   // bad  const   foo   =   [   1 ,   2 ,   3   ];  console . log ( foo [   0   ]);  // good  const   foo   =   [ 1 ,   2 ,   3 ];  console . log ( foo [ 0 ]);    18.11  Add spaces inside curly braces. eslint:  object-curly-spacing  jscs:  requireSpacesInsideObjectBrackets   // bad  const   foo   =   { clark :   kent };  // good  const   foo   =   {   clark :   kent   };    18.12  Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per  above , long strings are exempt from this rule, and should not be broken up. eslint:  max-len  jscs:  maximumLineLength    Why? This ensures readability and maintainability.   // bad  const   foo   =   jsonData     jsonData . foo     jsonData . foo . bar     jsonData . foo . bar . baz     jsonData . foo . bar . baz . quux     jsonData . foo . bar . baz . quux . xyzzy ;  // bad  $ . ajax ({   method :   POST ,   url :   https://airbnb.com/ ,   data :   {   name :   John   }   }). done (()   =   console . log ( Congratulations! )). fail (()   =   console . log ( You have failed this city. ));  // good  const   foo   =   jsonData \n     jsonData . foo \n     jsonData . foo . bar \n     jsonData . foo . bar . baz \n     jsonData . foo . bar . baz . quux \n     jsonData . foo . bar . baz . quux . xyzzy ;  // good  $ . ajax ({ \n   method :   POST , \n   url :   https://airbnb.com/ , \n   data :   {   name :   John   },  }) \n   . done (()   =   console . log ( Congratulations! )) \n   . fail (()   =   console . log ( You have failed this city. ));   \u2b06 back to top", 
            "title": "Whitespace"
        }, 
        {
            "location": "/js/javascript/#commas", 
            "text": "19.1  Leading commas:  Nope . eslint:  comma-style  jscs:  requireCommaBeforeLineBreak   // bad  const   story   =   [ \n     once \n   ,   upon \n   ,   aTime  ];  // good  const   story   =   [ \n   once , \n   upon , \n   aTime ,  ];  // bad  const   hero   =   { \n     firstName :   Ada \n   ,   lastName :   Lovelace \n   ,   birthYear :   1815 \n   ,   superPower :   computers  };  // good  const   hero   =   { \n   firstName :   Ada , \n   lastName :   Lovelace , \n   birthYear :   1815 , \n   superPower :   computers ,  };    19.2  Additional trailing comma:  Yup.  eslint:  comma-dangle  jscs:  requireTrailingComma    Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don't have to worry about the  trailing comma problem  in legacy browsers.   // bad - git diff without trailing comma\nconst hero = {\n     firstName:  Florence , -    lastName:  Nightingale  +    lastName:  Nightingale ,  +    inventorOf: [ coxcomb chart ,  modern nursing ] \n};\n\n// good - git diff with trailing comma\nconst hero = {\n     firstName:  Florence ,\n     lastName:  Nightingale , +    inventorOf: [ coxcomb chart ,  modern nursing ], \n};  // bad  const   hero   =   { \n   firstName :   Dana , \n   lastName :   Scully  };  const   heroes   =   [ \n   Batman , \n   Superman  ];  // good  const   hero   =   { \n   firstName :   Dana , \n   lastName :   Scully ,  };  const   heroes   =   [ \n   Batman , \n   Superman ,  ];  // bad  function   createHero ( \n   firstName , \n   lastName , \n   inventorOf  )   { \n   // does nothing  }  // good  function   createHero ( \n   firstName , \n   lastName , \n   inventorOf ,  )   { \n   // does nothing  }  // good (note that a comma must not appear after a  rest  element)  function   createHero ( \n   firstName , \n   lastName , \n   inventorOf , \n   ... heroArgs  )   { \n   // does nothing  }  // bad  createHero ( \n   firstName , \n   lastName , \n   inventorOf  );  // good  createHero ( \n   firstName , \n   lastName , \n   inventorOf ,  );  // good (note that a comma must not appear after a  rest  element)  createHero ( \n   firstName , \n   lastName , \n   inventorOf , \n   ... heroArgs  );   \u2b06 back to top", 
            "title": "Commas"
        }, 
        {
            "location": "/js/javascript/#semicolons", 
            "text": "20.1   Yup.  eslint:  semi  jscs:  requireSemicolons   // bad  ( function   ()   { \n   const   name   =   Skywalker \n   return   name  })()  // good  ( function   ()   { \n   const   name   =   Skywalker ; \n   return   name ;  }());  // good, but legacy (guards against the function becoming an argument when two files with IIFEs are concatenated)  ;((()   =   { \n   const   name   =   Skywalker ; \n   return   name ;  })());   Read more .  \u2b06 back to top", 
            "title": "Semicolons"
        }, 
        {
            "location": "/js/javascript/#type-casting-coercion", 
            "text": "21.1  Perform type coercion at the beginning of the statement.    21.2   Strings:    // =  this.reviewScore = 9;  // bad  const   totalScore   =   this . reviewScore   +   ;   // invokes this.reviewScore.valueOf()  // bad  const   totalScore   =   this . reviewScore . toString ();   // isn t guaranteed to return a string  // good  const   totalScore   =   String ( this . reviewScore );    21.3  Numbers: Use  Number  for type casting and  parseInt  always with a radix for parsing strings. eslint:  radix   const   inputValue   =   4 ;  // bad  const   val   =   new   Number ( inputValue );  // bad  const   val   =   + inputValue ;  // bad  const   val   =   inputValue     0 ;  // bad  const   val   =   parseInt ( inputValue );  // good  const   val   =   Number ( inputValue );  // good  const   val   =   parseInt ( inputValue ,   10 );    21.4  If for whatever reason you are doing something wild and  parseInt  is your bottleneck and need to use Bitshift for  performance reasons , leave a comment explaining why and what you're doing.   // good  /**   * parseInt was the reason my code was slow.   * Bitshifting the String to coerce it to a   * Number made it a lot faster.   */  const   val   =   inputValue     0 ;    21.5  Be careful when using bitshift operations.  Numbers are represented as  64-bit values , but  bitshift operations always return a 32-bit integer ( source ). Bitshift can lead to unexpected behavior for integer values larger than 32 bits.  Discussion . Largest signed 32-bit Int is 2,147,483,647:   2147483647     0 ;   // =  2147483647  2147483648     0 ;   // =  -2147483648  2147483649     0 ;   // =  -2147483647    21.6  Booleans:   const   age   =   0 ;  // bad  const   hasAge   =   new   Boolean ( age );  // good  const   hasAge   =   Boolean ( age );  // best  const   hasAge   =   !! age ;   \u2b06 back to top", 
            "title": "Type Casting &amp; Coercion"
        }, 
        {
            "location": "/js/javascript/#naming-conventions", 
            "text": "22.1  Avoid single letter names. Be descriptive with your naming. eslint:  id-length   // bad  function   q ()   { \n   // ...  }  // good  function   query ()   { \n   // ...  }    22.2  Use camelCase when naming objects, functions, and instances. eslint:  camelcase  jscs:  requireCamelCaseOrUpperCaseIdentifiers   // bad  const   OBJEcttsssss   =   {};  const   this_is_my_object   =   {};  function   c ()   {}  // good  const   thisIsMyObject   =   {};  function   thisIsMyFunction ()   {}    22.3  Use PascalCase only when naming constructors or classes. eslint:  new-cap  jscs:  requireCapitalizedConstructors   // bad  function   user ( options )   { \n   this . name   =   options . name ;  }  const   bad   =   new   user ({ \n   name :   nope ,  });  // good  class   User   { \n   constructor ( options )   { \n     this . name   =   options . name ; \n   }  }  const   good   =   new   User ({ \n   name :   yup ,  });   \n-  22.4  Do not use trailing or leading underscores. eslint:  no-underscore-dangle  jscs:  disallowDanglingUnderscores   Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean \u201cprivate\u201d, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won't count as breaking, or that tests aren't needed. tl;dr: if you want something to be \u201cprivate\u201d, it must not be observably present.   // bad  this . __firstName__   =   Panda ;  this . firstName_   =   Panda ;  this . _firstName   =   Panda ;  // good  this . firstName   =   Panda ;   \n-  22.5  Don't save references to  this . Use arrow functions or  Function#bind . jscs:  disallowNodeTypes  // bad  function   foo ()   { \n   const   self   =   this ; \n   return   function   ()   { \n     console . log ( self ); \n   };  }  // bad  function   foo ()   { \n   const   that   =   this ; \n   return   function   ()   { \n     console . log ( that ); \n   };  }  // good  function   foo ()   { \n   return   ()   =   { \n     console . log ( this ); \n   };  }   \n-  22.6  A base filename should exactly match the name of its default export.  // file 1 contents  class   CheckBox   { \n   // ...  }  export   default   CheckBox ;  // file 2 contents  export   default   function   fortyTwo ()   {   return   42 ;   }  // file 3 contents  export   default   function   insideDirectory ()   {}  // in some other file  // bad  import   CheckBox   from   ./checkBox ;   // PascalCase import/export, camelCase filename  import   FortyTwo   from   ./FortyTwo ;   // PascalCase import/filename, camelCase export  import   InsideDirectory   from   ./InsideDirectory ;   // PascalCase import/filename, camelCase export  // bad  import   CheckBox   from   ./check_box ;   // PascalCase import/export, snake_case filename  import   forty_two   from   ./forty_two ;   // snake_case import/filename, camelCase export  import   inside_directory   from   ./inside_directory ;   // snake_case import, camelCase export  import   index   from   ./inside_directory/index ;   // requiring the index file explicitly  import   insideDirectory   from   ./insideDirectory/index ;   // requiring the index file explicitly  // good  import   CheckBox   from   ./CheckBox ;   // PascalCase export/import/filename  import   fortyTwo   from   ./fortyTwo ;   // camelCase export/import/filename  import   insideDirectory   from   ./insideDirectory ;   // camelCase export/import/directory name/implicit  index  // ^ supports both insideDirectory.js and insideDirectory/index.js   \n-  22.7  Use camelCase when you export-default a function. Your filename should be identical to your function's name.  function   makeStyleGuide ()   { \n   // ...  }  export   default   makeStyleGuide ;   \n-  22.8  Use PascalCase when you export a constructor / class / singleton / function library / bare object.  const   AirbnbStyleGuide   =   { \n   es6 :   { \n   },  };  export   default   AirbnbStyleGuide ;   \n-  22.9  Acronyms and initialisms should always be all capitalized, or all lowercased.   Why? Names are for readability, not to appease a computer algorithm.   // bad  import   SmsContainer   from   ./containers/SmsContainer ;  // bad  const   HttpRequests   =   [ \n   // ...  ];  // good  import   SMSContainer   from   ./containers/SMSContainer ;  // good  const   HTTPRequests   =   [ \n   // ...  ];  // best  import   TextMessageContainer   from   ./containers/TextMessageContainer ;  // best  const   Requests   =   [ \n   // ...  ];   \u2b06 back to top", 
            "title": "Naming Conventions"
        }, 
        {
            "location": "/js/javascript/#accessors", 
            "text": "-  23.1  Accessor functions for properties are not required.  \n-  23.2  Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal('hello').  // bad  class   Dragon   { \n   get   age ()   { \n     // ... \n   } \n\n   set   age ( value )   { \n     // ... \n   }  }  // good  class   Dragon   { \n   getAge ()   { \n     // ... \n   } \n\n   setAge ( value )   { \n     // ... \n   }  }   \n-  23.3  If the property/method is a  boolean , use  isVal()  or  hasVal() .  // bad  if   ( ! dragon . age ())   { \n   return   false ;  }  // good  if   ( ! dragon . hasAge ())   { \n   return   false ;  }   \n-  23.4  It's okay to create get() and set() functions, but be consistent.  class   Jedi   { \n   constructor ( options   =   {})   { \n     const   lightsaber   =   options . lightsaber   ||   blue ; \n     this . set ( lightsaber ,   lightsaber ); \n   } \n\n   set ( key ,   val )   { \n     this [ key ]   =   val ; \n   } \n\n   get ( key )   { \n     return   this [ key ]; \n   }  }   \u2b06 back to top", 
            "title": "Accessors"
        }, 
        {
            "location": "/js/javascript/#events", 
            "text": "-  24.1  When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:  // bad  $ ( this ). trigger ( listingUpdated ,   listing . id );  // ...  $ ( this ). on ( listingUpdated ,   ( e ,   listingId )   =   { \n   // do something with listingId  });   prefer:  // good  $ ( this ). trigger ( listingUpdated ,   {   listingId :   listing . id   });  // ...  $ ( this ). on ( listingUpdated ,   ( e ,   data )   =   { \n   // do something with data.listingId  });   \u2b06 back to top", 
            "title": "Events"
        }, 
        {
            "location": "/js/javascript/#ecmascript-6-es-2015-styles", 
            "text": "27.1  This is a collection of links to the various ES6 features.    Arrow Functions   Classes  Object Shorthand  Object Concise  Object Computed Properties  Template Strings  Destructuring  Default Parameters  Rest  Array Spreads  Let and Const  Iterators and Generators  Modules    Do not use  TC39 proposals  that have not reached stage 3.  They are not finalized , and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.   \u2b06 back to top", 
            "title": "ECMAScript 6+ (ES 2015+) Styles"
        }, 
        {
            "location": "/js/javascript/#testing", 
            "text": "28.1   Yup.   function   foo ()   { \n   return   true ;  }    28.2   No, but seriously :  Whichever testing framework you use, you should be writing tests!  Strive to write many small pure functions, and minimize where mutations occur.  Be cautious about stubs and mocks - they can make your tests more brittle.  We primarily use  mocha  at Airbnb.  tape  is also used occasionally for small, separate modules.  100% test coverage is a good goal to strive for, even if it's not always practical to reach it.  Whenever you fix a bug,  write a regression test . A bug fixed without a regression test is almost certainly going to break again in the future.     \u2b06 back to top", 
            "title": "Testing"
        }, 
        {
            "location": "/js/javascript/#performance", 
            "text": "On Layout   Web Performance  String vs Array Concat  Try/Catch Cost In a Loop  Bang Function  jQuery Find vs Context, Selector  innerHTML vs textContent for script text  Long String Concatenation  Are Javascript functions like  map() ,  reduce() , and  filter()  optimized for traversing arrays?  Loading...   \u2b06 back to top", 
            "title": "Performance"
        }, 
        {
            "location": "/js/javascript/#resources", 
            "text": "Learning ES6   Draft ECMA 2015 (ES6) Spec  ExploringJS  ES6 Compatibility Table  Comprehensive Overview of ES6 Features   Read This   Standard ECMA-262   Tools   Code Style Linters  ESlint  -  Airbnb Style .eslintrc  JSHint  -  Airbnb Style .jshintrc  JSCS  -  Airbnb Style Preset   Other Style Guides   Google JavaScript Style Guide  jQuery Core Style Guidelines  Principles of Writing Consistent, Idiomatic JavaScript   Other Styles   Naming this in nested functions  - Christian Johansen  Conditional Callbacks  - Ross Allen  Popular JavaScript Coding Conventions on GitHub  - JeongHoon Byun  Multiple var statements in JavaScript, not superfluous  - Ben Alman   Further Reading   Understanding JavaScript Closures  - Angus Croll  Basic JavaScript for the impatient programmer  - Dr. Axel Rauschmayer  You Might Not Need jQuery  - Zack Bloom   Adam Schwartz  ES6 Features  - Luke Hoban  Frontend Guidelines  - Benjamin De Cock   Books   JavaScript: The Good Parts  - Douglas Crockford  JavaScript Patterns  - Stoyan Stefanov  Pro JavaScript Design Patterns   - Ross Harmes and Dustin Diaz  High Performance Web Sites: Essential Knowledge for Front-End Engineers  - Steve Souders  Maintainable JavaScript  - Nicholas C. Zakas  JavaScript Web Applications  - Alex MacCaw  Pro JavaScript Techniques  - John Resig  Smashing Node.js: JavaScript Everywhere  - Guillermo Rauch  Secrets of the JavaScript Ninja  - John Resig and Bear Bibeault  Human JavaScript  - Henrik Joreteg  Superhero.js  - Kim Joar Bekkelund, Mads Mob\u00e6k,   Olav Bjorkoy  JSBooks  - Julien Bouquillon  Third Party JavaScript  - Ben Vinegar and Anton Kovalyov  Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript  - David Herman  Eloquent JavaScript  - Marijn Haverbeke  You Don't Know JS: ES6   Beyond  - Kyle Simpson   Blogs   JavaScript Weekly  JavaScript, JavaScript...  Bocoup Weblog  Adequately Good  NCZOnline  Perfection Kills  Ben Alman  Dmitry Baranovskiy  Dustin Diaz  nettuts   Podcasts   JavaScript Air  JavaScript Jabber   \u2b06 back to top", 
            "title": "Resources"
        }, 
        {
            "location": "/js/react/", 
            "text": "Venngage React/JSX Style Guide\n\n\nA mostly reasonable approach to React and JSX\n\n\nTable of Contents\n\n\n\n\nBasic Rules\n\n\nClass vs \nReact.createClass\n vs stateless\n\n\nNaming\n\n\nDeclaration\n\n\nAlignment\n\n\nQuotes\n\n\nSpacing\n\n\nProps\n\n\nRefs\n\n\nParentheses\n\n\nTags\n\n\nMethods\n\n\nOrdering\n\n\nisMounted\n\n\n\n\nBasic Rules\n\n\n\n\nOnly include one React component per file.\n\n\nHowever, multiple \nStateless, or Pure, Components\n are allowed per file. eslint: \nreact/no-multi-comp\n.\n\n\nAlways use JSX syntax.\n\n\nDo not use \nReact.createElement\n unless you're initializing the app from a file that is not JSX.\n\n\n\n\nClass vs \nReact.createClass\n vs stateless\n\n\n\n\nIf you have internal state and/or refs, prefer \nclass extends React.Component\n over \nReact.createClass\n unless you have a very good reason to use mixins. eslint: \nreact/prefer-es6-class\n \nreact/prefer-stateless-function\n\n\n\n\n// bad\nconst Listing = React.createClass({\n  // ...\n  render() {\n    return \ndiv\n{this.state.hello}\n/div\n;\n  }\n});\n\n// good\nclass Listing extends React.Component {\n  // ...\n  render() {\n    return \ndiv\n{this.state.hello}\n/div\n;\n  }\n}\n\n\n\n\n\nAnd if you don't have state or refs, prefer normal functions (not arrow functions) over classes:\n\n\n// bad\nclass Listing extends React.Component {\n  render() {\n    return \ndiv\n{this.props.hello}\n/div\n;\n  }\n}\n\n// bad (relying on function name inference is discouraged)\nconst Listing = ({ hello }) =\n (\n  \ndiv\n{hello}\n/div\n\n);\n\n// good\nfunction Listing({ hello }) {\n  return \ndiv\n{hello}\n/div\n;\n}\n\n\n\n\n\nNaming\n\n\n\n\nExtensions\n: Use \n.jsx\n extension for React components.\n\n\nFilename\n: Use PascalCase for filenames. E.g., \nReservationCard.jsx\n.\n\n\nReference Naming\n: Use PascalCase for React components and camelCase for their instances. eslint: \nreact/jsx-pascal-case\n\n\n\n\n// bad\nimport reservationCard from \n./ReservationCard\n;\n\n// good\nimport ReservationCard from \n./ReservationCard\n;\n\n// bad\nconst ReservationItem = \nReservationCard /\n;\n\n// good\nconst reservationItem = \nReservationCard /\n;\n\n\n\n\n\n\n\nComponent Naming\n: Use the filename as the component name. For example, \nReservationCard.jsx\n should have a reference name of \nReservationCard\n. However, for root components of a directory, use \nindex.jsx\n as the filename and use the directory name as the component name:\n\n\n\n\n// bad\nimport Footer from \n./Footer/Footer\n;\n\n// bad\nimport Footer from \n./Footer/index\n;\n\n// good\nimport Footer from \n./Footer\n;\n\n\n\n\n\n\n\nHigher-order Component Naming\n: Use a composite of the higher-order component's name and the passed-in component's name as the \ndisplayName\n on the generated component. For example, the higher-order component \nwithFoo()\n, when passed a component \nBar\n should produce a component with a \ndisplayName\n of \nwithFoo(Bar)\n.\n\n\n\n\n\n\nWhy? A component's \ndisplayName\n may be used by developer tools or in error messages, and having a value that clearly expresses this relationship helps people understand what is happening.\n\n\n\n\n// bad\nexport default function withFoo(WrappedComponent) {\n  return function WithFoo(props) {\n    return \nWrappedComponent {...props} foo /\n;\n  }\n}\n\n// good\nexport default function withFoo(WrappedComponent) {\n  function WithFoo(props) {\n    return \nWrappedComponent {...props} foo /\n;\n  }\n\n  const wrappedComponentName = WrappedComponent.displayName\n    || WrappedComponent.name\n    || \nComponent\n;\n\n  WithFoo.displayName = `withFoo(${wrappedComponentName})`;\n  return WithFoo;\n}\n\n\n\n\n\n\n\nProps Naming\n: Avoid using DOM component prop names for different purposes.\n\n\n\n\n\n\nWhy? People expect props like \nstyle\n and \nclassName\n to mean one specific thing. Varying this API for a subset of your app makes the code less readable and less maintainable, and may cause bugs.\n\n\n\n\n// bad\n\nMyComponent style=\nfancy\n /\n\n\n// good\n\nMyComponent variant=\nfancy\n /\n\n\n\n\n\n\nDeclaration\n\n\n\n\nDo not use \ndisplayName\n for naming components. Instead, name the component by reference.\n\n\n\n\n// bad\nexport default React.createClass({\n  displayName: \nReservationCard\n,\n  // stuff goes here\n});\n\n// good\nexport default class ReservationCard extends React.Component {\n}\n\n\n\n\n\nAlignment\n\n\n\n\nFollow these alignment styles for JSX syntax. eslint: \nreact/jsx-closing-bracket-location\n\n\n\n\n// bad\n\nFoo superLongParam=\nbar\n\n     anotherSuperLongParam=\nbaz\n /\n\n\n// good\n\nFoo\n  superLongParam=\nbar\n\n  anotherSuperLongParam=\nbaz\n\n/\n\n\n// if props fit in one line then keep it on the same line\n\nFoo bar=\nbar\n /\n\n\n// children get indented normally\n\nFoo\n  superLongParam=\nbar\n\n  anotherSuperLongParam=\nbaz\n\n\n\n  \nQuux /\n\n\n/Foo\n\n\n\n\n\n\nQuotes\n\n\n\n\nAlways use double quotes (\n\"\n) for JSX attributes, but single quotes (\n'\n) for all other JS. eslint: \njsx-quotes\n\n\n\n\n\n\nWhy? Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention.\n\n\n\n\n// bad\n\nFoo bar=\nbar\n /\n\n\n// good\n\nFoo bar=\nbar\n /\n\n\n// bad\n\nFoo style={{ left: \n20px\n }} /\n\n\n// good\n\nFoo style={{ left: \n20px\n }} /\n\n\n\n\n\n\nSpacing\n\n\n\n\nAlways include a single space in your self-closing tag. eslint: \nno-multi-spaces\n, \nreact/jsx-space-before-closing\n\n\n\n\n// bad\n\nFoo/\n\n\n// very bad\n\nFoo                 /\n\n\n// bad\n\nFoo\n /\n\n\n// good\n\nFoo /\n\n\n\n\n\n\n\n\nDo not pad JSX curly braces with spaces. eslint: \nreact/jsx-curly-spacing\n\n\n\n\n// bad\n\nFoo bar={ baz } /\n\n\n// good\n\nFoo bar={baz} /\n\n\n\n\n\n\nProps\n\n\n\n\nAlways use camelCase for prop names.\n\n\n\n\n  // bad\n  \nFoo\n    UserName=\nhello\n\n    phone_number={12345678}\n  /\n\n\n  // good\n  \nFoo\n    userName=\nhello\n\n    phoneNumber={12345678}\n  /\n\n\n\n\n\n\n\n\nOmit the value of the prop when it is explicitly \ntrue\n. eslint: \nreact/jsx-boolean-value\n\n\n\n\n  // bad\n  \nFoo\n    hidden={true}\n  /\n\n\n  // good\n  \nFoo\n    hidden\n  /\n\n\n\n\n\n\n\n\nAlways include an \nalt\n prop on \nimg\n tags. If the image is presentational, \nalt\n can be an empty string or the \nimg\n must have \nrole=\"presentation\"\n. eslint: \njsx-a11y/img-has-alt\n\n\n\n\n// bad\n\nimg src=\nhello.jpg\n /\n\n\n// good\n\nimg src=\nhello.jpg\n alt=\nMe waving hello\n /\n\n\n// good\n\nimg src=\nhello.jpg\n alt=\n /\n\n\n// good\n\nimg src=\nhello.jpg\n role=\npresentation\n /\n\n\n\n\n\n\n\n\nDo not use words like \"image\", \"photo\", or \"picture\" in \nimg\n \nalt\n props. eslint: \njsx-a11y/img-redundant-alt\n\n\n\n\n\n\nWhy? Screenreaders already announce \nimg\n elements as images, so there is no need to include this information in the alt text.\n\n\n\n\n// bad\n\nimg src=\nhello.jpg\n alt=\nPicture of me waving hello\n /\n\n\n// good\n\nimg src=\nhello.jpg\n alt=\nMe waving hello\n /\n\n\n\n\n\n\n\n\nUse only valid, non-abstract \nARIA roles\n. eslint: \njsx-a11y/aria-role\n\n\n\n\n// bad - not an ARIA role\n\ndiv role=\ndatepicker\n /\n\n\n// bad - abstract ARIA role\n\ndiv role=\nrange\n /\n\n\n// good\n\ndiv role=\nbutton\n /\n\n\n\n\n\n\n\n\nDo not use \naccessKey\n on elements. eslint: \njsx-a11y/no-access-key\n\n\n\n\n\n\nWhy? Inconsistencies between keyboard shortcuts and keyboard commands used by people using screenreaders and keyboards complicate accessibility.\n\n\n\n\n// bad\n\ndiv accessKey=\nh\n /\n\n\n// good\n\ndiv /\n\n\n\n\n\n\n\n\nAvoid using an array index as \nkey\n prop, prefer a unique ID. (\nwhy?\n)\n\n\n\n\n// bad\n{todos.map((todo, index) =\n\n\nTodo\n  {...todo}\n  key={index}\n/\n\n)}\n\n// good\n{todos.map(todo =\n (\n\nTodo\n  {...todo}\n  key={todo.id}\n/\n\n))}\n\n\n\n\n\n\n\nAlways define explicit defaultProps for all non-required props.\n\n\n\n\n\n\nWhy? propTypes are a form of documentation, and providing defaultProps means the reader of your code doesn\u2019t have to assume as much. In addition, it can mean that your code can omit certain type checks.\n\n\n\n\n// bad\nfunction SFC({ foo, bar, children }) {\nreturn \ndiv\n{foo}{bar}{children}\n/div\n;\n}\nSFC.propTypes = {\nfoo: PropTypes.number.isRequired,\nbar: PropTypes.string,\nchildren: PropTypes.node,\n};\n\n// good\nfunction SFC({ foo, bar }) {\nreturn \ndiv\n{foo}{bar}\n/div\n;\n}\nSFC.propTypes = {\nfoo: PropTypes.number.isRequired,\nbar: PropTypes.string,\nchildren: PropTypes.node,\n};\nSFC.defaultProps = {\nbar: \n,\nchildren: null,\n};\n\n\n\n\n\nRefs\n\n\n\n\nAlways use ref callbacks. eslint: \nreact/no-string-refs\n\n\n\n\n// bad\n\nFoo\n  ref=\nmyRef\n\n/\n\n\n// good\n\nFoo\n  ref={(ref) =\n { this.myRef = ref; }}\n/\n\n\n\n\n\n\nParentheses\n\n\n\n\nWrap JSX tags in parentheses when they span more than one line. eslint: \nreact/wrap-multilines\n\n\n\n\n// bad\nrender() {\n  return \nMyComponent className=\nlong body\n foo=\nbar\n\n           \nMyChild /\n\n         \n/MyComponent\n;\n}\n\n// good\nrender() {\n  return (\n    \nMyComponent className=\nlong body\n foo=\nbar\n\n      \nMyChild /\n\n    \n/MyComponent\n\n  );\n}\n\n// good, when single line\nrender() {\n  const body = \ndiv\nhello\n/div\n;\n  return \nMyComponent\n{body}\n/MyComponent\n;\n}\n\n\n\n\n\nTags\n\n\n\n\nAlways self-close tags that have no children. eslint: \nreact/self-closing-comp\n\n\n\n\n// bad\n\nFoo className=\nstuff\n/Foo\n\n\n// good\n\nFoo className=\nstuff\n /\n\n\n\n\n\n\n\n\nIf your component has multi-line properties, close its tag on a new line. eslint: \nreact/jsx-closing-bracket-location\n\n\n\n\n// bad\n\nFoo\n  bar=\nbar\n\n  baz=\nbaz\n /\n\n\n// good\n\nFoo\n  bar=\nbar\n\n  baz=\nbaz\n\n/\n\n\n\n\n\n\nMethods\n\n\n\n\nUse arrow functions to close over local variables.\n\n\n\n\nfunction ItemList(props) {\n  return (\n    \nul\n\n      {props.items.map((item, index) =\n (\n        \nItem\n          key={item.key}\n          onClick={() =\n doSomethingWith(item.name, index)}\n        /\n\n      ))}\n    \n/ul\n\n  );\n}\n\n\n\n\n\n\n\nBind event handlers for the render method in the constructor. eslint: \nreact/jsx-no-bind\n\n\n\n\n\n\nWhy? A bind call in the render path creates a brand new function on every single render.\n\n\n\n\n// bad\nclass extends React.Component {\n  onClickDiv() {\n    // do stuff\n  }\n\n  render() {\n    return \ndiv onClick={this.onClickDiv.bind(this)} /\n\n  }\n}\n\n// good\nclass extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickDiv = this.onClickDiv.bind(this);\n  }\n\n  onClickDiv() {\n    // do stuff\n  }\n\n  render() {\n    return \ndiv onClick={this.onClickDiv} /\n\n  }\n}\n\n\n\n\n\n\n\nDo not use underscore prefix for internal methods of a React component.\n\n\nWhy? Underscore prefixes are sometimes used as a convention in other languages to denote privacy. But, unlike those languages, there is no native support for privacy in JavaScript, everything is public. Regardless of your intentions, adding underscore prefixes to your properties does not actually make them private, and any property (underscore-prefixed or not) should be treated as being public. See issues \n#1024\n, and \n#490\n for a more in-depth discussion.\n\n\n\n\n\n\n\n\n// bad\nReact.createClass({\n  _onClickSubmit() {\n    // do stuff\n  },\n\n  // other stuff\n});\n\n// good\nclass extends React.Component {\n  onClickSubmit() {\n    // do stuff\n  }\n\n  // other stuff\n}\n\n\n\n\n\n\n\nBe sure to return a value in your \nrender\n methods. eslint: \nreact/require-render-return\n\n\n\n\n// bad\nrender() {\n  (\ndiv /\n);\n}\n\n// good\nrender() {\n  return (\ndiv /\n);\n}\n\n\n\n\n\nOrdering\n\n\n\n\nOrdering for \nclass extends React.Component\n:\n\n\n\n\noptional \nstatic\n methods\n\n\nconstructor\n\n\ngetChildContext\n\n\ncomponentWillMount\n\n\ncomponentDidMount\n\n\ncomponentWillReceiveProps\n\n\nshouldComponentUpdate\n\n\ncomponentWillUpdate\n\n\ncomponentDidUpdate\n\n\ncomponentWillUnmount\n\n\nclickHandlers or eventHandlers\n like \nonClickSubmit()\n or \nonChangeDescription()\n\n\ngetter methods for \nrender\n like \ngetSelectReason()\n or \ngetFooterContent()\n\n\noptional render methods\n like \nrenderNavigation()\n or \nrenderProfilePicture()\n\n\n\n\nrender\n\n\n\n\n\n\nHow to define \npropTypes\n, \ndefaultProps\n, \ncontextTypes\n, etc...\n\n\n\n\n\n\nimport React, { PropTypes } from \nreact\n;\n\nconst propTypes = {\n  id: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired,\n  text: PropTypes.string,\n};\n\nconst defaultProps = {\n  text: \nHello World\n,\n};\n\nclass Link extends React.Component {\n  static methodsAreOk() {\n    return true;\n  }\n\n  render() {\n    return \na href={this.props.url} data-id={this.props.id}\n{this.props.text}\n/a\n\n  }\n}\n\nLink.propTypes = propTypes;\nLink.defaultProps = defaultProps;\n\nexport default Link;\n\n\n\n\n\nOrdering for \nReact.createClass\n: eslint: \nreact/sort-comp\n\n\n\n\ndisplayName\n\n\npropTypes\n\n\ncontextTypes\n\n\nchildContextTypes\n\n\nmixins\n\n\nstatics\n\n\ndefaultProps\n\n\ngetDefaultProps\n\n\ngetInitialState\n\n\ngetChildContext\n\n\ncomponentWillMount\n\n\ncomponentDidMount\n\n\ncomponentWillReceiveProps\n\n\nshouldComponentUpdate\n\n\ncomponentWillUpdate\n\n\ncomponentDidUpdate\n\n\ncomponentWillUnmount\n\n\nclickHandlers or eventHandlers\n like \nonClickSubmit()\n or \nonChangeDescription()\n\n\ngetter methods for \nrender\n like \ngetSelectReason()\n or \ngetFooterContent()\n\n\noptional render methods\n like \nrenderNavigation()\n or \nrenderProfilePicture()\n\n\nrender\n\n\n\n\nisMounted\n\n\n\n\nDo not use \nisMounted\n. eslint: \nreact/no-is-mounted\n\n\n\n\n\n\nWhy? \nisMounted\n is an anti-pattern\n, is not available when using ES6 classes, and is on its way to being officially deprecated.\n\n\n\n\n\u2b06 back to top", 
            "title": "React Styleguide"
        }, 
        {
            "location": "/js/react/#venngage-reactjsx-style-guide", 
            "text": "A mostly reasonable approach to React and JSX", 
            "title": "Venngage React/JSX Style Guide"
        }, 
        {
            "location": "/js/react/#table-of-contents", 
            "text": "Basic Rules  Class vs  React.createClass  vs stateless  Naming  Declaration  Alignment  Quotes  Spacing  Props  Refs  Parentheses  Tags  Methods  Ordering  isMounted", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/js/react/#basic-rules", 
            "text": "Only include one React component per file.  However, multiple  Stateless, or Pure, Components  are allowed per file. eslint:  react/no-multi-comp .  Always use JSX syntax.  Do not use  React.createElement  unless you're initializing the app from a file that is not JSX.", 
            "title": "Basic Rules"
        }, 
        {
            "location": "/js/react/#class-vs-reactcreateclass-vs-stateless", 
            "text": "If you have internal state and/or refs, prefer  class extends React.Component  over  React.createClass  unless you have a very good reason to use mixins. eslint:  react/prefer-es6-class   react/prefer-stateless-function   // bad\nconst Listing = React.createClass({\n  // ...\n  render() {\n    return  div {this.state.hello} /div ;\n  }\n});\n\n// good\nclass Listing extends React.Component {\n  // ...\n  render() {\n    return  div {this.state.hello} /div ;\n  }\n}  And if you don't have state or refs, prefer normal functions (not arrow functions) over classes:  // bad\nclass Listing extends React.Component {\n  render() {\n    return  div {this.props.hello} /div ;\n  }\n}\n\n// bad (relying on function name inference is discouraged)\nconst Listing = ({ hello }) =  (\n   div {hello} /div \n);\n\n// good\nfunction Listing({ hello }) {\n  return  div {hello} /div ;\n}", 
            "title": "Class vs React.createClass vs stateless"
        }, 
        {
            "location": "/js/react/#naming", 
            "text": "Extensions : Use  .jsx  extension for React components.  Filename : Use PascalCase for filenames. E.g.,  ReservationCard.jsx .  Reference Naming : Use PascalCase for React components and camelCase for their instances. eslint:  react/jsx-pascal-case   // bad\nimport reservationCard from  ./ReservationCard ;\n\n// good\nimport ReservationCard from  ./ReservationCard ;\n\n// bad\nconst ReservationItem =  ReservationCard / ;\n\n// good\nconst reservationItem =  ReservationCard / ;   Component Naming : Use the filename as the component name. For example,  ReservationCard.jsx  should have a reference name of  ReservationCard . However, for root components of a directory, use  index.jsx  as the filename and use the directory name as the component name:   // bad\nimport Footer from  ./Footer/Footer ;\n\n// bad\nimport Footer from  ./Footer/index ;\n\n// good\nimport Footer from  ./Footer ;   Higher-order Component Naming : Use a composite of the higher-order component's name and the passed-in component's name as the  displayName  on the generated component. For example, the higher-order component  withFoo() , when passed a component  Bar  should produce a component with a  displayName  of  withFoo(Bar) .    Why? A component's  displayName  may be used by developer tools or in error messages, and having a value that clearly expresses this relationship helps people understand what is happening.   // bad\nexport default function withFoo(WrappedComponent) {\n  return function WithFoo(props) {\n    return  WrappedComponent {...props} foo / ;\n  }\n}\n\n// good\nexport default function withFoo(WrappedComponent) {\n  function WithFoo(props) {\n    return  WrappedComponent {...props} foo / ;\n  }\n\n  const wrappedComponentName = WrappedComponent.displayName\n    || WrappedComponent.name\n    ||  Component ;\n\n  WithFoo.displayName = `withFoo(${wrappedComponentName})`;\n  return WithFoo;\n}   Props Naming : Avoid using DOM component prop names for different purposes.    Why? People expect props like  style  and  className  to mean one specific thing. Varying this API for a subset of your app makes the code less readable and less maintainable, and may cause bugs.   // bad MyComponent style= fancy  / \n\n// good MyComponent variant= fancy  /", 
            "title": "Naming"
        }, 
        {
            "location": "/js/react/#declaration", 
            "text": "Do not use  displayName  for naming components. Instead, name the component by reference.   // bad\nexport default React.createClass({\n  displayName:  ReservationCard ,\n  // stuff goes here\n});\n\n// good\nexport default class ReservationCard extends React.Component {\n}", 
            "title": "Declaration"
        }, 
        {
            "location": "/js/react/#alignment", 
            "text": "Follow these alignment styles for JSX syntax. eslint:  react/jsx-closing-bracket-location   // bad Foo superLongParam= bar \n     anotherSuperLongParam= baz  / \n\n// good Foo\n  superLongParam= bar \n  anotherSuperLongParam= baz \n/ \n\n// if props fit in one line then keep it on the same line Foo bar= bar  / \n\n// children get indented normally Foo\n  superLongParam= bar \n  anotherSuperLongParam= baz  \n   Quux /  /Foo", 
            "title": "Alignment"
        }, 
        {
            "location": "/js/react/#quotes", 
            "text": "Always use double quotes ( \" ) for JSX attributes, but single quotes ( ' ) for all other JS. eslint:  jsx-quotes    Why? Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention.   // bad Foo bar= bar  / \n\n// good Foo bar= bar  / \n\n// bad Foo style={{ left:  20px  }} / \n\n// good Foo style={{ left:  20px  }} /", 
            "title": "Quotes"
        }, 
        {
            "location": "/js/react/#spacing", 
            "text": "Always include a single space in your self-closing tag. eslint:  no-multi-spaces ,  react/jsx-space-before-closing   // bad Foo/ \n\n// very bad Foo                 / \n\n// bad Foo\n / \n\n// good Foo /    Do not pad JSX curly braces with spaces. eslint:  react/jsx-curly-spacing   // bad Foo bar={ baz } / \n\n// good Foo bar={baz} /", 
            "title": "Spacing"
        }, 
        {
            "location": "/js/react/#props", 
            "text": "Always use camelCase for prop names.     // bad\n   Foo\n    UserName= hello \n    phone_number={12345678}\n  / \n\n  // good\n   Foo\n    userName= hello \n    phoneNumber={12345678}\n  /    Omit the value of the prop when it is explicitly  true . eslint:  react/jsx-boolean-value     // bad\n   Foo\n    hidden={true}\n  / \n\n  // good\n   Foo\n    hidden\n  /    Always include an  alt  prop on  img  tags. If the image is presentational,  alt  can be an empty string or the  img  must have  role=\"presentation\" . eslint:  jsx-a11y/img-has-alt   // bad img src= hello.jpg  / \n\n// good img src= hello.jpg  alt= Me waving hello  / \n\n// good img src= hello.jpg  alt=  / \n\n// good img src= hello.jpg  role= presentation  /    Do not use words like \"image\", \"photo\", or \"picture\" in  img   alt  props. eslint:  jsx-a11y/img-redundant-alt    Why? Screenreaders already announce  img  elements as images, so there is no need to include this information in the alt text.   // bad img src= hello.jpg  alt= Picture of me waving hello  / \n\n// good img src= hello.jpg  alt= Me waving hello  /    Use only valid, non-abstract  ARIA roles . eslint:  jsx-a11y/aria-role   // bad - not an ARIA role div role= datepicker  / \n\n// bad - abstract ARIA role div role= range  / \n\n// good div role= button  /    Do not use  accessKey  on elements. eslint:  jsx-a11y/no-access-key    Why? Inconsistencies between keyboard shortcuts and keyboard commands used by people using screenreaders and keyboards complicate accessibility.   // bad div accessKey= h  / \n\n// good div /    Avoid using an array index as  key  prop, prefer a unique ID. ( why? )   // bad\n{todos.map((todo, index) =  Todo\n  {...todo}\n  key={index}\n/ \n)}\n\n// good\n{todos.map(todo =  ( Todo\n  {...todo}\n  key={todo.id}\n/ \n))}   Always define explicit defaultProps for all non-required props.    Why? propTypes are a form of documentation, and providing defaultProps means the reader of your code doesn\u2019t have to assume as much. In addition, it can mean that your code can omit certain type checks.   // bad\nfunction SFC({ foo, bar, children }) {\nreturn  div {foo}{bar}{children} /div ;\n}\nSFC.propTypes = {\nfoo: PropTypes.number.isRequired,\nbar: PropTypes.string,\nchildren: PropTypes.node,\n};\n\n// good\nfunction SFC({ foo, bar }) {\nreturn  div {foo}{bar} /div ;\n}\nSFC.propTypes = {\nfoo: PropTypes.number.isRequired,\nbar: PropTypes.string,\nchildren: PropTypes.node,\n};\nSFC.defaultProps = {\nbar:  ,\nchildren: null,\n};", 
            "title": "Props"
        }, 
        {
            "location": "/js/react/#refs", 
            "text": "Always use ref callbacks. eslint:  react/no-string-refs   // bad Foo\n  ref= myRef \n/ \n\n// good Foo\n  ref={(ref) =  { this.myRef = ref; }}\n/", 
            "title": "Refs"
        }, 
        {
            "location": "/js/react/#parentheses", 
            "text": "Wrap JSX tags in parentheses when they span more than one line. eslint:  react/wrap-multilines   // bad\nrender() {\n  return  MyComponent className= long body  foo= bar \n            MyChild / \n          /MyComponent ;\n}\n\n// good\nrender() {\n  return (\n     MyComponent className= long body  foo= bar \n       MyChild / \n     /MyComponent \n  );\n}\n\n// good, when single line\nrender() {\n  const body =  div hello /div ;\n  return  MyComponent {body} /MyComponent ;\n}", 
            "title": "Parentheses"
        }, 
        {
            "location": "/js/react/#tags", 
            "text": "Always self-close tags that have no children. eslint:  react/self-closing-comp   // bad Foo className= stuff /Foo \n\n// good Foo className= stuff  /    If your component has multi-line properties, close its tag on a new line. eslint:  react/jsx-closing-bracket-location   // bad Foo\n  bar= bar \n  baz= baz  / \n\n// good Foo\n  bar= bar \n  baz= baz \n/", 
            "title": "Tags"
        }, 
        {
            "location": "/js/react/#methods", 
            "text": "Use arrow functions to close over local variables.   function ItemList(props) {\n  return (\n     ul \n      {props.items.map((item, index) =  (\n         Item\n          key={item.key}\n          onClick={() =  doSomethingWith(item.name, index)}\n        / \n      ))}\n     /ul \n  );\n}   Bind event handlers for the render method in the constructor. eslint:  react/jsx-no-bind    Why? A bind call in the render path creates a brand new function on every single render.   // bad\nclass extends React.Component {\n  onClickDiv() {\n    // do stuff\n  }\n\n  render() {\n    return  div onClick={this.onClickDiv.bind(this)} / \n  }\n}\n\n// good\nclass extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickDiv = this.onClickDiv.bind(this);\n  }\n\n  onClickDiv() {\n    // do stuff\n  }\n\n  render() {\n    return  div onClick={this.onClickDiv} / \n  }\n}   Do not use underscore prefix for internal methods of a React component.  Why? Underscore prefixes are sometimes used as a convention in other languages to denote privacy. But, unlike those languages, there is no native support for privacy in JavaScript, everything is public. Regardless of your intentions, adding underscore prefixes to your properties does not actually make them private, and any property (underscore-prefixed or not) should be treated as being public. See issues  #1024 , and  #490  for a more in-depth discussion.     // bad\nReact.createClass({\n  _onClickSubmit() {\n    // do stuff\n  },\n\n  // other stuff\n});\n\n// good\nclass extends React.Component {\n  onClickSubmit() {\n    // do stuff\n  }\n\n  // other stuff\n}   Be sure to return a value in your  render  methods. eslint:  react/require-render-return   // bad\nrender() {\n  ( div / );\n}\n\n// good\nrender() {\n  return ( div / );\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/js/react/#ordering", 
            "text": "Ordering for  class extends React.Component :   optional  static  methods  constructor  getChildContext  componentWillMount  componentDidMount  componentWillReceiveProps  shouldComponentUpdate  componentWillUpdate  componentDidUpdate  componentWillUnmount  clickHandlers or eventHandlers  like  onClickSubmit()  or  onChangeDescription()  getter methods for  render  like  getSelectReason()  or  getFooterContent()  optional render methods  like  renderNavigation()  or  renderProfilePicture()   render    How to define  propTypes ,  defaultProps ,  contextTypes , etc...    import React, { PropTypes } from  react ;\n\nconst propTypes = {\n  id: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired,\n  text: PropTypes.string,\n};\n\nconst defaultProps = {\n  text:  Hello World ,\n};\n\nclass Link extends React.Component {\n  static methodsAreOk() {\n    return true;\n  }\n\n  render() {\n    return  a href={this.props.url} data-id={this.props.id} {this.props.text} /a \n  }\n}\n\nLink.propTypes = propTypes;\nLink.defaultProps = defaultProps;\n\nexport default Link;  Ordering for  React.createClass : eslint:  react/sort-comp   displayName  propTypes  contextTypes  childContextTypes  mixins  statics  defaultProps  getDefaultProps  getInitialState  getChildContext  componentWillMount  componentDidMount  componentWillReceiveProps  shouldComponentUpdate  componentWillUpdate  componentDidUpdate  componentWillUnmount  clickHandlers or eventHandlers  like  onClickSubmit()  or  onChangeDescription()  getter methods for  render  like  getSelectReason()  or  getFooterContent()  optional render methods  like  renderNavigation()  or  renderProfilePicture()  render", 
            "title": "Ordering"
        }, 
        {
            "location": "/js/react/#ismounted", 
            "text": "Do not use  isMounted . eslint:  react/no-is-mounted    Why?  isMounted  is an anti-pattern , is not available when using ES6 classes, and is on its way to being officially deprecated.   \u2b06 back to top", 
            "title": "isMounted"
        }, 
        {
            "location": "/js/css-js/", 
            "text": "Venngage CSS-in-JavaScript Style Guide\n\n\n\n\nNaming\n\n\nOrdering\n\n\nNesting\n\n\nInline\n\n\nThemes\n\n\n\n\nNaming\n\n\n\n\nUse camelCase for object keys (i.e. \"selectors\").\n\n\n\n\n\n\nWhy? We access these keys as properties on the \nstyles\n object in the component, so it is most convenient to use camelCase.\n\n\n\n\n// bad\n\n\n{\n\n  \nbermuda-triangle\n:\n \n{\n\n    \ndisplay\n:\n \nnone\n,\n\n  \n},\n\n\n}\n\n\n\n// good\n\n\n{\n\n  \nbermudaTriangle\n:\n \n{\n\n    \ndisplay\n:\n \nnone\n,\n\n  \n},\n\n\n}\n\n\n\n\n\n\n\n\nUse an underscore for modifiers to other styles.\n\n\n\n\n\n\nWhy? Similar to BEM, this naming convention makes it clear that the styles are intended to modify the element preceded by the underscore. Underscores do not need to be quoted, so they are preferred over other characters, such as dashes.\n\n\n\n\n// bad\n\n\n{\n\n  \nbruceBanner\n:\n \n{\n\n    \ncolor\n:\n \npink\n,\n\n    \ntransition\n:\n \ncolor 10s\n,\n\n  \n},\n\n\n  \nbruceBannerTheHulk\n:\n \n{\n\n    \ncolor\n:\n \ngreen\n,\n\n  \n},\n\n\n}\n\n\n\n// good\n\n\n{\n\n  \nbruceBanner\n:\n \n{\n\n    \ncolor\n:\n \npink\n,\n\n    \ntransition\n:\n \ncolor 10s\n,\n\n  \n},\n\n\n  \nbruceBanner_theHulk\n:\n \n{\n\n    \ncolor\n:\n \ngreen\n,\n\n  \n},\n\n\n}\n\n\n\n\n\n\n\n\nUse \nselectorName_fallback\n for sets of fallback styles.\n\n\n\n\n\n\nWhy? Similar to modifiers, keeping the naming consistent helps reveal the relationship of these styles to the styles that override them in more adequate browsers.\n\n\n\n\n// bad\n\n\n{\n\n  \nmuscles\n:\n \n{\n\n    \ndisplay\n:\n \nflex\n,\n\n  \n},\n\n\n  \nmuscles_sadBears\n:\n \n{\n\n    \nwidth\n:\n \n100%\n,\n\n  \n},\n\n\n}\n\n\n\n// good\n\n\n{\n\n  \nmuscles\n:\n \n{\n\n    \ndisplay\n:\n \nflex\n,\n\n  \n},\n\n\n  \nmuscles_fallback\n:\n \n{\n\n    \nwidth\n:\n \n100%\n,\n\n  \n},\n\n\n}\n\n\n\n\n\n\n\n\nUse a separate selector for sets of fallback styles.\n\n\n\n\n\n\nWhy? Keeping fallback styles contained in a separate object clarifies their purpose, which improves readability.\n\n\n\n\n// bad\n\n\n{\n\n  \nmuscles\n:\n \n{\n\n    \ndisplay\n:\n \nflex\n,\n\n  \n},\n\n\n  \nleft\n:\n \n{\n\n    \nflexGrow\n:\n \n1\n,\n\n    \ndisplay\n:\n \ninline-block\n,\n\n  \n},\n\n\n  \nright\n:\n \n{\n\n    \ndisplay\n:\n \ninline-block\n,\n\n  \n},\n\n\n}\n\n\n\n// good\n\n\n{\n\n  \nmuscles\n:\n \n{\n\n    \ndisplay\n:\n \nflex\n,\n\n  \n},\n\n\n  \nleft\n:\n \n{\n\n    \nflexGrow\n:\n \n1\n,\n\n  \n},\n\n\n  \nleft_fallback\n:\n \n{\n\n    \ndisplay\n:\n \ninline-block\n,\n\n  \n},\n\n\n  \nright_fallback\n:\n \n{\n\n    \ndisplay\n:\n \ninline-block\n,\n\n  \n},\n\n\n}\n\n\n\n\n\n\n\n\nUse device-agnostic names (e.g. \"small\", \"medium\", and \"large\") to name media query breakpoints.\n\n\n\n\n\n\nWhy? Commonly used names like \"phone\", \"tablet\", and \"desktop\" do not match the characteristics of the devices in the real world. Using these names sets the wrong expectations.\n\n\n\n\n// bad\n\n\nconst\n \nbreakpoints\n \n=\n \n{\n\n  \nmobile\n:\n \n@media (max-width: 639px)\n,\n\n  \ntablet\n:\n \n@media (max-width: 1047px)\n,\n\n  \ndesktop\n:\n \n@media (min-width: 1048px)\n,\n\n\n};\n\n\n\n// good\n\n\nconst\n \nbreakpoints\n \n=\n \n{\n\n  \nsmall\n:\n \n@media (max-width: 639px)\n,\n\n  \nmedium\n:\n \n@media (max-width: 1047px)\n,\n\n  \nlarge\n:\n \n@media (min-width: 1048px)\n,\n\n\n};\n\n\n\n\n\n\nOrdering\n\n\n\n\nDefine styles after the component.\n\n\n\n\n\n\nWhy? We use a higher-order component to theme our styles, which is naturally used after the component definition. Passing the styles object directly to this function reduces indirection.\n\n\n\n\n// bad\nconst styles = {\n  container: {\n    display: \ninline-block\n,\n  },\n};\n\nfunction MyComponent({ styles }) {\n  return (\n    \ndiv {...css(styles.container)}\n\n      Never doubt that a small group of thoughtful, committed citizens can\n      change the world. Indeed, it\u2019s the only thing that ever has.\n    \n/div\n\n  );\n}\n\nexport default withStyles(() =\n styles)(MyComponent);\n\n\n// good\nfunction MyComponent({ styles }) {\n  return (\n    \ndiv {...css(styles.container)}\n\n      Never doubt that a small group of thoughtful, committed citizens can\n      change the world. Indeed, it\u2019s the only thing that ever has.\n    \n/div\n\n  );\n}\n\nexport default withStyles(() =\n ({\n  container: {\n    display: \ninline-block\n,\n  },\n}))(MyComponent);\n\n\n\n\n\nNesting\n\n\n\n\nLeave a blank line between adjacent blocks at the same indentation level.\n\n\n\n\n\n\nWhy? The whitespace improves readability and reduces the likelihood of merge conflicts.\n\n\n\n\n// bad\n\n\n{\n\n  \nbigBang\n:\n \n{\n\n    \ndisplay\n:\n \ninline-block\n,\n\n    \n::before\n:\n \n{\n\n      \ncontent\n:\n \n,\n\n    \n},\n\n  \n},\n\n  \nuniverse\n:\n \n{\n\n    \nborder\n:\n \nnone\n,\n\n  \n},\n\n\n}\n\n\n\n// good\n\n\n{\n\n  \nbigBang\n:\n \n{\n\n    \ndisplay\n:\n \ninline-block\n,\n\n\n    \n::before\n:\n \n{\n\n      \ncontent\n:\n \n,\n\n    \n},\n\n  \n},\n\n\n  \nuniverse\n:\n \n{\n\n    \nborder\n:\n \nnone\n,\n\n  \n},\n\n\n}\n\n\n\n\n\n\nInline\n\n\n\n\nUse inline styles for styles that have a high cardinality (e.g. uses the value of a prop) and not for styles that have a low cardinality.\n\n\n\n\n\n\nWhy? Generating themed stylesheets can be expensive, so they are best for discrete sets of styles.\n\n\n\n\n// bad\nexport default function MyComponent({ spacing }) {\n  return (\n    \ndiv style={{ display: \ntable\n, margin: spacing }} /\n\n  );\n}\n\n// good\nfunction MyComponent({ styles, spacing }) {\n  return (\n    \ndiv {...css(styles.periodic, { margin: spacing })} /\n\n  );\n}\nexport default withStyles(() =\n ({\n  periodic: {\n    display: \ntable\n,\n  },\n}))(MyComponent);\n\n\n\n\n\nThemes\n\n\n\n\nUse an abstraction layer such as \nreact-with-styles\n that enables theming. \nreact-with-styles gives us things like \nwithStyles()\n, \nThemedStyleSheet\n, and \ncss()\n which are used in some of the examples in this document.\n\n\n\n\n\n\nWhy? It is useful to have a set of shared variables for styling your components. Using an abstraction layer makes this more convenient. Additionally, this can help prevent your components from being tightly coupled to any particular underlying implementation, which gives you more freedom.\n\n\n\n\n\n\nDefine colors only in themes.\n\n\n\n\n// bad\n\n\nexport\n \ndefault\n \nwithStyles\n(()\n \n=\n \n({\n\n  \nchuckNorris\n:\n \n{\n\n    \ncolor\n:\n \n#bada55\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \ncolor\n \n})\n \n=\n \n({\n\n  \nchuckNorris\n:\n \n{\n\n    \ncolor\n:\n \ncolor\n.\nbadass\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n\n\n\n\n\nDefine fonts only in themes.\n\n\n\n\n// bad\n\n\nexport\n \ndefault\n \nwithStyles\n(()\n \n=\n \n({\n\n  \ntowerOfPisa\n:\n \n{\n\n    \nfontStyle\n:\n \nitalic\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \nfont\n \n})\n \n=\n \n({\n\n  \ntowerOfPisa\n:\n \n{\n\n    \nfontStyle\n:\n \nfont\n.\nitalic\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n\n\n\n\n\nDefine fonts as sets of related styles.\n\n\n\n\n// bad\n\n\nexport\n \ndefault\n \nwithStyles\n(()\n \n=\n \n({\n\n  \ntowerOfPisa\n:\n \n{\n\n    \nfontFamily\n:\n \nItaliana, \nTimes New Roman\n, serif\n,\n\n    \nfontSize\n:\n \n2em\n,\n\n    \nfontStyle\n:\n \nitalic\n,\n\n    \nlineHeight\n:\n \n1.5\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \nfont\n \n})\n \n=\n \n({\n\n  \ntowerOfPisa\n:\n \n{\n\n    \n...\nfont\n.\nitalian\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n\n\n\n\n\nDefine base grid units in theme (either as a value or a function that takes a multiplier).\n\n\n\n\n// bad\n\n\nexport\n \ndefault\n \nwithStyles\n(()\n \n=\n \n({\n\n  \nrip\n:\n \n{\n\n    \nbottom\n:\n \n-6912px\n,\n \n// 6 feet\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \nunits\n \n})\n \n=\n \n({\n\n  \nrip\n:\n \n{\n\n    \nbottom\n:\n \nunits\n(\n864\n),\n \n// 6 feet, assuming our unit is 8px\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \nunit\n \n})\n \n=\n \n({\n\n  \nrip\n:\n \n{\n\n    \nbottom\n:\n \n864\n \n*\n \nunit\n,\n \n// 6 feet, assuming our unit is 8px\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n\n\n\n\n\nDefine media queries only in themes.\n\n\n\n\n// bad\n\n\nexport\n \ndefault\n \nwithStyles\n(()\n \n=\n \n({\n\n  \ncontainer\n:\n \n{\n\n    \nwidth\n:\n \n100%\n,\n\n\n    \n@media (max-width: 1047px)\n:\n \n{\n\n      \nwidth\n:\n \n50%\n,\n\n    \n},\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \nbreakpoint\n \n})\n \n=\n \n({\n\n  \ncontainer\n:\n \n{\n\n    \nwidth\n:\n \n100%\n,\n\n\n    \n[\nbreakpoint\n.\nmedium\n]\n:\n \n{\n\n      \nwidth\n:\n \n50%\n,\n\n    \n},\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n\n\n\n\n\nDefine tricky fallback properties in themes.\n\n\n\n\n\n\nWhy? Many CSS-in-JavaScript implementations merge style objects together which makes specifying fallbacks for the same property (e.g. \ndisplay\n) a little tricky. To keep the approach unified, put these fallbacks in the theme.\n\n\n\n\n// bad\n\n\nexport\n \ndefault\n \nwithStyles\n(()\n \n=\n \n({\n\n  \n.\nmuscles\n \n{\n\n    \ndisplay\n:\n \nflex\n,\n\n  \n},\n\n\n  \n.\nmuscles_fallback\n \n{\n\n    \ndisplay \n:\n \ntable\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \nfallbacks\n \n})\n \n=\n \n({\n\n  \n.\nmuscles\n \n{\n\n    \ndisplay\n:\n \nflex\n,\n\n  \n},\n\n\n  \n.\nmuscles_fallback\n \n{\n\n    \n[\nfallbacks\n.\ndisplay\n]\n:\n \ntable\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n// good\n\n\nexport\n \ndefault\n \nwithStyles\n(({\n \nfallback\n \n})\n \n=\n \n({\n\n  \n.\nmuscles\n \n{\n\n    \ndisplay\n:\n \nflex\n,\n\n  \n},\n\n\n  \n.\nmuscles_fallback\n \n{\n\n    \n[\nfallback\n(\ndisplay\n)]\n:\n \ntable\n,\n\n  \n},\n\n\n}))(\nMyComponent\n);\n\n\n\n\n\n\n\n\n\n\nCreate as few custom themes as possible. Many applications may only have one theme.\n\n\n\n\n\n\nNamespace custom theme settings under a nested object with a unique and descriptive key.\n\n\n\n\n\n\n// bad\n\n\nThemedStyleSheet\n.\nregisterTheme\n(\nmySection\n,\n \n{\n\n  \nmySectionPrimaryColor\n:\n \ngreen\n,\n\n\n});\n\n\n\n// good\n\n\nThemedStyleSheet\n.\nregisterTheme\n(\nmySection\n,\n \n{\n\n  \nmySection\n:\n \n{\n\n    \nprimaryColor\n:\n \ngreen\n,\n\n  \n},\n\n\n});\n\n\n\n\n\n\n\n\nCSS puns adapted from \nSaijo George\n.", 
            "title": "CSS in Javascript"
        }, 
        {
            "location": "/js/css-js/#venngage-css-in-javascript-style-guide", 
            "text": "Naming  Ordering  Nesting  Inline  Themes", 
            "title": "Venngage CSS-in-JavaScript Style Guide"
        }, 
        {
            "location": "/js/css-js/#naming", 
            "text": "Use camelCase for object keys (i.e. \"selectors\").    Why? We access these keys as properties on the  styles  object in the component, so it is most convenient to use camelCase.   // bad  { \n   bermuda-triangle :   { \n     display :   none , \n   },  }  // good  { \n   bermudaTriangle :   { \n     display :   none , \n   },  }    Use an underscore for modifiers to other styles.    Why? Similar to BEM, this naming convention makes it clear that the styles are intended to modify the element preceded by the underscore. Underscores do not need to be quoted, so they are preferred over other characters, such as dashes.   // bad  { \n   bruceBanner :   { \n     color :   pink , \n     transition :   color 10s , \n   }, \n\n   bruceBannerTheHulk :   { \n     color :   green , \n   },  }  // good  { \n   bruceBanner :   { \n     color :   pink , \n     transition :   color 10s , \n   }, \n\n   bruceBanner_theHulk :   { \n     color :   green , \n   },  }    Use  selectorName_fallback  for sets of fallback styles.    Why? Similar to modifiers, keeping the naming consistent helps reveal the relationship of these styles to the styles that override them in more adequate browsers.   // bad  { \n   muscles :   { \n     display :   flex , \n   }, \n\n   muscles_sadBears :   { \n     width :   100% , \n   },  }  // good  { \n   muscles :   { \n     display :   flex , \n   }, \n\n   muscles_fallback :   { \n     width :   100% , \n   },  }    Use a separate selector for sets of fallback styles.    Why? Keeping fallback styles contained in a separate object clarifies their purpose, which improves readability.   // bad  { \n   muscles :   { \n     display :   flex , \n   }, \n\n   left :   { \n     flexGrow :   1 , \n     display :   inline-block , \n   }, \n\n   right :   { \n     display :   inline-block , \n   },  }  // good  { \n   muscles :   { \n     display :   flex , \n   }, \n\n   left :   { \n     flexGrow :   1 , \n   }, \n\n   left_fallback :   { \n     display :   inline-block , \n   }, \n\n   right_fallback :   { \n     display :   inline-block , \n   },  }    Use device-agnostic names (e.g. \"small\", \"medium\", and \"large\") to name media query breakpoints.    Why? Commonly used names like \"phone\", \"tablet\", and \"desktop\" do not match the characteristics of the devices in the real world. Using these names sets the wrong expectations.   // bad  const   breakpoints   =   { \n   mobile :   @media (max-width: 639px) , \n   tablet :   @media (max-width: 1047px) , \n   desktop :   @media (min-width: 1048px) ,  };  // good  const   breakpoints   =   { \n   small :   @media (max-width: 639px) , \n   medium :   @media (max-width: 1047px) , \n   large :   @media (min-width: 1048px) ,  };", 
            "title": "Naming"
        }, 
        {
            "location": "/js/css-js/#ordering", 
            "text": "Define styles after the component.    Why? We use a higher-order component to theme our styles, which is naturally used after the component definition. Passing the styles object directly to this function reduces indirection.   // bad\nconst styles = {\n  container: {\n    display:  inline-block ,\n  },\n};\n\nfunction MyComponent({ styles }) {\n  return (\n     div {...css(styles.container)} \n      Never doubt that a small group of thoughtful, committed citizens can\n      change the world. Indeed, it\u2019s the only thing that ever has.\n     /div \n  );\n}\n\nexport default withStyles(() =  styles)(MyComponent);\n\n\n// good\nfunction MyComponent({ styles }) {\n  return (\n     div {...css(styles.container)} \n      Never doubt that a small group of thoughtful, committed citizens can\n      change the world. Indeed, it\u2019s the only thing that ever has.\n     /div \n  );\n}\n\nexport default withStyles(() =  ({\n  container: {\n    display:  inline-block ,\n  },\n}))(MyComponent);", 
            "title": "Ordering"
        }, 
        {
            "location": "/js/css-js/#nesting", 
            "text": "Leave a blank line between adjacent blocks at the same indentation level.    Why? The whitespace improves readability and reduces the likelihood of merge conflicts.   // bad  { \n   bigBang :   { \n     display :   inline-block , \n     ::before :   { \n       content :   , \n     }, \n   }, \n   universe :   { \n     border :   none , \n   },  }  // good  { \n   bigBang :   { \n     display :   inline-block , \n\n     ::before :   { \n       content :   , \n     }, \n   }, \n\n   universe :   { \n     border :   none , \n   },  }", 
            "title": "Nesting"
        }, 
        {
            "location": "/js/css-js/#inline", 
            "text": "Use inline styles for styles that have a high cardinality (e.g. uses the value of a prop) and not for styles that have a low cardinality.    Why? Generating themed stylesheets can be expensive, so they are best for discrete sets of styles.   // bad\nexport default function MyComponent({ spacing }) {\n  return (\n     div style={{ display:  table , margin: spacing }} / \n  );\n}\n\n// good\nfunction MyComponent({ styles, spacing }) {\n  return (\n     div {...css(styles.periodic, { margin: spacing })} / \n  );\n}\nexport default withStyles(() =  ({\n  periodic: {\n    display:  table ,\n  },\n}))(MyComponent);", 
            "title": "Inline"
        }, 
        {
            "location": "/js/css-js/#themes", 
            "text": "Use an abstraction layer such as  react-with-styles  that enables theming.  react-with-styles gives us things like  withStyles() ,  ThemedStyleSheet , and  css()  which are used in some of the examples in this document.    Why? It is useful to have a set of shared variables for styling your components. Using an abstraction layer makes this more convenient. Additionally, this can help prevent your components from being tightly coupled to any particular underlying implementation, which gives you more freedom.    Define colors only in themes.   // bad  export   default   withStyles (()   =   ({ \n   chuckNorris :   { \n     color :   #bada55 , \n   },  }))( MyComponent );  // good  export   default   withStyles (({   color   })   =   ({ \n   chuckNorris :   { \n     color :   color . badass , \n   },  }))( MyComponent );    Define fonts only in themes.   // bad  export   default   withStyles (()   =   ({ \n   towerOfPisa :   { \n     fontStyle :   italic , \n   },  }))( MyComponent );  // good  export   default   withStyles (({   font   })   =   ({ \n   towerOfPisa :   { \n     fontStyle :   font . italic , \n   },  }))( MyComponent );    Define fonts as sets of related styles.   // bad  export   default   withStyles (()   =   ({ \n   towerOfPisa :   { \n     fontFamily :   Italiana,  Times New Roman , serif , \n     fontSize :   2em , \n     fontStyle :   italic , \n     lineHeight :   1.5 , \n   },  }))( MyComponent );  // good  export   default   withStyles (({   font   })   =   ({ \n   towerOfPisa :   { \n     ... font . italian , \n   },  }))( MyComponent );    Define base grid units in theme (either as a value or a function that takes a multiplier).   // bad  export   default   withStyles (()   =   ({ \n   rip :   { \n     bottom :   -6912px ,   // 6 feet \n   },  }))( MyComponent );  // good  export   default   withStyles (({   units   })   =   ({ \n   rip :   { \n     bottom :   units ( 864 ),   // 6 feet, assuming our unit is 8px \n   },  }))( MyComponent );  // good  export   default   withStyles (({   unit   })   =   ({ \n   rip :   { \n     bottom :   864   *   unit ,   // 6 feet, assuming our unit is 8px \n   },  }))( MyComponent );    Define media queries only in themes.   // bad  export   default   withStyles (()   =   ({ \n   container :   { \n     width :   100% , \n\n     @media (max-width: 1047px) :   { \n       width :   50% , \n     }, \n   },  }))( MyComponent );  // good  export   default   withStyles (({   breakpoint   })   =   ({ \n   container :   { \n     width :   100% , \n\n     [ breakpoint . medium ] :   { \n       width :   50% , \n     }, \n   },  }))( MyComponent );    Define tricky fallback properties in themes.    Why? Many CSS-in-JavaScript implementations merge style objects together which makes specifying fallbacks for the same property (e.g.  display ) a little tricky. To keep the approach unified, put these fallbacks in the theme.   // bad  export   default   withStyles (()   =   ({ \n   . muscles   { \n     display :   flex , \n   }, \n\n   . muscles_fallback   { \n     display  :   table , \n   },  }))( MyComponent );  // good  export   default   withStyles (({   fallbacks   })   =   ({ \n   . muscles   { \n     display :   flex , \n   }, \n\n   . muscles_fallback   { \n     [ fallbacks . display ] :   table , \n   },  }))( MyComponent );  // good  export   default   withStyles (({   fallback   })   =   ({ \n   . muscles   { \n     display :   flex , \n   }, \n\n   . muscles_fallback   { \n     [ fallback ( display )] :   table , \n   },  }))( MyComponent );     Create as few custom themes as possible. Many applications may only have one theme.    Namespace custom theme settings under a nested object with a unique and descriptive key.    // bad  ThemedStyleSheet . registerTheme ( mySection ,   { \n   mySectionPrimaryColor :   green ,  });  // good  ThemedStyleSheet . registerTheme ( mySection ,   { \n   mySection :   { \n     primaryColor :   green , \n   },  });    CSS puns adapted from  Saijo George .", 
            "title": "Themes"
        }, 
        {
            "location": "/php/php-standard/", 
            "text": "PHP Basic Coding Standard\n\n\n\n\nThis section of the standard comprises what should be considered the standard\ncoding elements that are required to ensure a high level of technical\ninteroperability between shared PHP code.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nFiles MUST use only \n?php\n and \n?=\n tags.\n\n\n\n\n\n\nFiles MUST use only UTF-8 without BOM for PHP code.\n\n\n\n\n\n\nFiles SHOULD \neither\n declare symbols (classes, functions, constants, etc.)\n  \nor\n cause side-effects (e.g. generate output, change .ini settings, etc.)\n  but SHOULD NOT do both.\n\n\n\n\n\n\nNamespaces and classes MUST follow an \"autoloading\".\n\n\n\n\n\n\nClass names MUST be declared in \nStudlyCaps\n.\n\n\n\n\n\n\nClass constants MUST be declared in all upper case with underscore separators.\n\n\n\n\n\n\nMethod names MUST be declared in \ncamelCase\n.\n\n\n\n\n\n\n2. Files\n\n\n\n\n2.1. PHP Tags\n\n\nPHP code \nMUST\n use the long \n?php ?\n tags or the short-echo \n?= ?\n tags; it\nMUST NOT use the other tag variations.\n\n\n2.2. Character Encoding\n\n\nPHP code MUST use only UTF-8 without BOM.\n\n\n2.3. Side Effects\n\n\nA file SHOULD declare new symbols (classes, functions, constants,\netc.) and cause no other side effects, or it SHOULD execute logic with side\neffects, but SHOULD NOT do both.\n\n\nThe phrase \"side effects\" means execution of logic not directly related to\ndeclaring classes, functions, constants, etc., \nmerely from including the\nfile\n.\n\n\n\"Side effects\" include but are not limited to: generating output, explicit\nuse of \nrequire\n or \ninclude\n, connecting to external services, modifying ini\nsettings, emitting errors or exceptions, modifying global or static variables,\nreading from or writing to a file, and so on.\n\n\nThe following is an example of a file with both declarations and side effects;\ni.e, an example of what to avoid:\n\n\n?php\n\n\n// side effect: change ini settings\n\n\nini_set\n(\nerror_reporting\n,\n \nE_ALL\n);\n\n\n\n// side effect: loads a file\n\n\ninclude\n \nfile.php\n;\n\n\n\n// side effect: generates output\n\n\necho\n \nhtml\n\\n\n;\n\n\n\n// declaration\n\n\nfunction\n \nfoo\n()\n\n\n{\n\n    \n// function body\n\n\n}\n\n\n\n\n\n\nThe following example is of a file that contains declarations without side\neffects; i.e., an example of what to emulate:\n\n\n?php\n\n\n// declaration\n\n\nfunction\n \nfoo\n()\n\n\n{\n\n    \n// function body\n\n\n}\n\n\n\n// conditional declaration is *not* a side effect\n\n\nif\n \n(\n!\n \nfunction_exists\n(\nbar\n))\n \n{\n\n    \nfunction\n \nbar\n()\n\n    \n{\n\n        \n// function body\n\n    \n}\n\n\n}\n\n\n\n\n\n\n3. Namespace and Class Names\n\n\n\n\nNamespaces and classes \nMUST\n follow an \"autoloading\" PSR: [[PSR-0], [PSR-4]].\n\n\nThis means each class is in a file by itself, and is in a namespace of at\nleast one level: a top-level vendor name.\n\n\nClass names \nMUST\n be declared in \nStudlyCaps\n.\n\n\nCode written for PHP 5.3 and after \nMUST\n use formal namespaces.\n\n\nFor example:\n\n\n?php\n\n\n// PHP 5.3 and later:\n\n\nnamespace\n \nVendor\\Model\n;\n\n\n\nclass\n \nFoo\n\n\n{\n\n\n}\n\n\n\n\n\n\nCode written for 5.2.x and before SHOULD use the pseudo-namespacing convention\nof \nVendor_\n prefixes on class names.\n\n\n?php\n\n\n// PHP 5.2.x and earlier:\n\n\nclass\n \nVendor_Model_Foo\n\n\n{\n\n\n}\n\n\n\n\n\n\n4. Class Constants, Properties, and Methods\n\n\n\n\n\n\nNote\n\n\nThe term \nclass\n refers to all classes, interfaces, and traits.\n\n\n\n\n4.1. Constants\n\n\nClass constants MUST be declared in all upper case with underscore separators.\nFor example:\n\n\n?php\n\n\nnamespace\n \nVendor\\Model\n;\n\n\n\nclass\n \nFoo\n\n\n{\n\n    \nconst\n \nVERSION\n \n=\n \n1.0\n;\n\n    \nconst\n \nDATE_APPROVED\n \n=\n \n2012-06-01\n;\n\n\n}\n\n\n\n\n\n\n4.2. Properties\n\n\nThis guide intentionally avoids any recommendation regarding the use of\n\n$StudlyCaps\n, \n$camelCase\n, or \n$under_score\n property names.\n\n\n\n\nSummary\n\n\nWhatever naming convention is used SHOULD be applied consistently within a\nreasonable scope. That scope may be vendor-level, package-level, class-level,\nor method-level.\n\n\n\n\n4.3. Methods\n\n\nMethod names \nMUST\n be declared in \ncamelCase()\n.\n\n\n\u2b06 back to top", 
            "title": "Basic Coding Standard"
        }, 
        {
            "location": "/php/php-standard/#php-basic-coding-standard", 
            "text": "This section of the standard comprises what should be considered the standard\ncoding elements that are required to ensure a high level of technical\ninteroperability between shared PHP code.", 
            "title": "PHP Basic Coding Standard"
        }, 
        {
            "location": "/php/php-standard/#overview", 
            "text": "Files MUST use only  ?php  and  ?=  tags.    Files MUST use only UTF-8 without BOM for PHP code.    Files SHOULD  either  declare symbols (classes, functions, constants, etc.)\n   or  cause side-effects (e.g. generate output, change .ini settings, etc.)\n  but SHOULD NOT do both.    Namespaces and classes MUST follow an \"autoloading\".    Class names MUST be declared in  StudlyCaps .    Class constants MUST be declared in all upper case with underscore separators.    Method names MUST be declared in  camelCase .", 
            "title": "Overview"
        }, 
        {
            "location": "/php/php-standard/#2-files", 
            "text": "", 
            "title": "2. Files"
        }, 
        {
            "location": "/php/php-standard/#21-php-tags", 
            "text": "PHP code  MUST  use the long  ?php ?  tags or the short-echo  ?= ?  tags; it\nMUST NOT use the other tag variations.", 
            "title": "2.1. PHP Tags"
        }, 
        {
            "location": "/php/php-standard/#22-character-encoding", 
            "text": "PHP code MUST use only UTF-8 without BOM.", 
            "title": "2.2. Character Encoding"
        }, 
        {
            "location": "/php/php-standard/#23-side-effects", 
            "text": "A file SHOULD declare new symbols (classes, functions, constants,\netc.) and cause no other side effects, or it SHOULD execute logic with side\neffects, but SHOULD NOT do both.  The phrase \"side effects\" means execution of logic not directly related to\ndeclaring classes, functions, constants, etc.,  merely from including the\nfile .  \"Side effects\" include but are not limited to: generating output, explicit\nuse of  require  or  include , connecting to external services, modifying ini\nsettings, emitting errors or exceptions, modifying global or static variables,\nreading from or writing to a file, and so on.  The following is an example of a file with both declarations and side effects;\ni.e, an example of what to avoid:  ?php  // side effect: change ini settings  ini_set ( error_reporting ,   E_ALL );  // side effect: loads a file  include   file.php ;  // side effect: generates output  echo   html \\n ;  // declaration  function   foo ()  { \n     // function body  }   The following example is of a file that contains declarations without side\neffects; i.e., an example of what to emulate:  ?php  // declaration  function   foo ()  { \n     // function body  }  // conditional declaration is *not* a side effect  if   ( !   function_exists ( bar ))   { \n     function   bar () \n     { \n         // function body \n     }  }", 
            "title": "2.3. Side Effects"
        }, 
        {
            "location": "/php/php-standard/#3-namespace-and-class-names", 
            "text": "Namespaces and classes  MUST  follow an \"autoloading\" PSR: [[PSR-0], [PSR-4]].  This means each class is in a file by itself, and is in a namespace of at\nleast one level: a top-level vendor name.  Class names  MUST  be declared in  StudlyCaps .  Code written for PHP 5.3 and after  MUST  use formal namespaces.  For example:  ?php  // PHP 5.3 and later:  namespace   Vendor\\Model ;  class   Foo  {  }   Code written for 5.2.x and before SHOULD use the pseudo-namespacing convention\nof  Vendor_  prefixes on class names.  ?php  // PHP 5.2.x and earlier:  class   Vendor_Model_Foo  {  }", 
            "title": "3. Namespace and Class Names"
        }, 
        {
            "location": "/php/php-standard/#4-class-constants-properties-and-methods", 
            "text": "Note  The term  class  refers to all classes, interfaces, and traits.", 
            "title": "4. Class Constants, Properties, and Methods"
        }, 
        {
            "location": "/php/php-standard/#41-constants", 
            "text": "Class constants MUST be declared in all upper case with underscore separators.\nFor example:  ?php  namespace   Vendor\\Model ;  class   Foo  { \n     const   VERSION   =   1.0 ; \n     const   DATE_APPROVED   =   2012-06-01 ;  }", 
            "title": "4.1. Constants"
        }, 
        {
            "location": "/php/php-standard/#42-properties", 
            "text": "This guide intentionally avoids any recommendation regarding the use of $StudlyCaps ,  $camelCase , or  $under_score  property names.   Summary  Whatever naming convention is used SHOULD be applied consistently within a\nreasonable scope. That scope may be vendor-level, package-level, class-level,\nor method-level.", 
            "title": "4.2. Properties"
        }, 
        {
            "location": "/php/php-standard/#43-methods", 
            "text": "Method names  MUST  be declared in  camelCase() .  \u2b06 back to top", 
            "title": "4.3. Methods"
        }, 
        {
            "location": "/php/php-styleguide/", 
            "text": "Coding Style Guide\n\n\n\n\nThe intent of this guide is to reduce cognitive friction when scanning code\nfrom different authors. It does so by enumerating a shared set of rules and\nexpectations about how to format PHP code.\n\n\n\n\n1. Overview\n\n\n\n\n\n\n\n\nCode MUST follow a \"coding style guide\".\n\n\n\n\n\n\nCode MUST use 4 spaces for indenting, not tabs.\n\n\n\n\n\n\nThere MUST NOT be a hard limit on line length; the soft limit MUST be 120\n  characters; lines SHOULD be 80 characters or less.\n\n\n\n\n\n\nThere MUST be one blank line after the \nnamespace\n declaration, and there\n  MUST be one blank line after the block of \nuse\n declarations.\n\n\n\n\n\n\nOpening braces for classes MUST go on the next line, and closing braces MUST\n  go on the next line after the body.\n\n\n\n\n\n\nOpening braces for methods MUST go on the next line, and closing braces MUST\n  go on the next line after the body.\n\n\n\n\n\n\nVisibility MUST be declared on all properties and methods; \nabstract\n and\n  \nfinal\n MUST be declared before the visibility; \nstatic\n MUST be declared\n  after the visibility.\n\n\n\n\n\n\nControl structure keywords MUST have one space after them; method and\n  function calls MUST NOT.\n\n\n\n\n\n\nOpening braces for control structures MUST go on the same line, and closing\n  braces MUST go on the next line after the body.\n\n\n\n\n\n\nOpening parentheses for control structures MUST NOT have a space after them,\n  and closing parentheses for control structures MUST NOT have a space before.\n\n\n\n\n\n\n1.1. Example\n\n\nThis example encompasses some of the rules below as a quick overview:\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nuse\n \nFooInterface\n;\n\n\nuse\n \nBarClass\n \nas\n \nBar\n;\n\n\nuse\n \nOtherVendor\\OtherPackage\\BazClass\n;\n\n\n\nclass\n \nFoo\n \nextends\n \nBar\n \nimplements\n \nFooInterface\n\n\n{\n\n    \npublic\n \nfunction\n \nsampleMethod\n(\n$a\n,\n \n$b\n \n=\n \nnull\n)\n\n    \n{\n\n        \nif\n \n(\n$a\n \n===\n \n$b\n)\n \n{\n\n            \nbar\n();\n\n        \n}\n \nelseif\n \n(\n$a\n \n \n$b\n)\n \n{\n\n            \n$foo\n-\nbar\n(\n$arg1\n);\n\n        \n}\n \nelse\n \n{\n\n            \nBazClass\n::\nbar\n(\n$arg2\n,\n \n$arg3\n);\n\n        \n}\n\n    \n}\n\n\n    \nfinal\n \npublic\n \nstatic\n \nfunction\n \nbar\n()\n\n    \n{\n\n        \n// method body\n\n    \n}\n\n\n}\n\n\n\n\n\n\n2. General\n\n\n\n\n2.1. Basic Coding Standard\n\n\nCode MUST follow all rules outlined in [PSR-1].\n\n\n2.2. Files\n\n\nAll PHP files MUST use the Unix LF (linefeed) line ending.\n\n\nAll PHP files MUST end with a single blank line.\n\n\nThe closing \n?\n tag MUST be omitted from files containing only PHP.\n\n\n2.3. Lines\n\n\nThere MUST NOT be a hard limit on line length.\n\n\nThe soft limit on line length MUST be 120 characters; automated style checkers\nMUST warn but MUST NOT error at the soft limit.\n\n\nLines SHOULD NOT be longer than 80 characters; lines longer than that SHOULD\nbe split into multiple subsequent lines of no more than 80 characters each.\n\n\nThere MUST NOT be trailing whitespace at the end of non-blank lines.\n\n\nBlank lines MAY be added to improve readability and to indicate related\nblocks of code.\n\n\nThere MUST NOT be more than one statement per line.\n\n\n2.4. Indenting\n\n\nCode MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting.\n\n\n\n\nN.b.: Using only spaces, and not mixing spaces with tabs, helps to avoid\nproblems with diffs, patches, history, and annotations. The use of spaces\nalso makes it easy to insert fine-grained sub-indentation for inter-line\nalignment.\n\n\n\n\n2.5. Keywords and True/False/Null\n\n\nPHP \nkeywords\n MUST be in lower case.\n\n\nThe PHP constants \ntrue\n, \nfalse\n, and \nnull\n MUST be in lower case.\n\n\n3. Namespace and Use Declarations\n\n\n\n\nWhen present, there MUST be one blank line after the \nnamespace\n declaration.\n\n\nWhen present, all \nuse\n declarations MUST go after the \nnamespace\n\ndeclaration.\n\n\nThere MUST be one \nuse\n keyword per declaration.\n\n\nThere MUST be one blank line after the \nuse\n block.\n\n\nFor example:\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nuse\n \nFooClass\n;\n\n\nuse\n \nBarClass\n \nas\n \nBar\n;\n\n\nuse\n \nOtherVendor\\OtherPackage\\BazClass\n;\n\n\n\n// ... additional PHP code ...\n\n\n\n\n\n\n4. Classes, Properties, and Methods\n\n\n\n\nThe term \"class\" refers to all classes, interfaces, and traits.\n\n\n4.1. Extends and Implements\n\n\nThe \nextends\n and \nimplements\n keywords MUST be declared on the same line as\nthe class name.\n\n\nThe opening brace for the class MUST go on its own line; the closing brace\nfor the class MUST go on the next line after the body.\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nuse\n \nFooClass\n;\n\n\nuse\n \nBarClass\n \nas\n \nBar\n;\n\n\nuse\n \nOtherVendor\\OtherPackage\\BazClass\n;\n\n\n\nclass\n \nClassName\n \nextends\n \nParentClass\n \nimplements\n \n\\ArrayAccess\n,\n \n\\Countable\n\n\n{\n\n    \n// constants, properties, methods\n\n\n}\n\n\n\n\n\n\nLists of \nimplements\n MAY be split across multiple lines, where each\nsubsequent line is indented once. When doing so, the first item in the list\nMUST be on the next line, and there MUST be only one interface per line.\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nuse\n \nFooClass\n;\n\n\nuse\n \nBarClass\n \nas\n \nBar\n;\n\n\nuse\n \nOtherVendor\\OtherPackage\\BazClass\n;\n\n\n\nclass\n \nClassName\n \nextends\n \nParentClass\n \nimplements\n\n    \n\\ArrayAccess\n,\n\n    \n\\Countable\n,\n\n    \n\\Serializable\n\n\n{\n\n    \n// constants, properties, methods\n\n\n}\n\n\n\n\n\n\n4.2. Properties\n\n\nVisibility MUST be declared on all properties.\n\n\nThe \nvar\n keyword MUST NOT be used to declare a property.\n\n\nThere MUST NOT be more than one property declared per statement.\n\n\nProperty names SHOULD NOT be prefixed with a single underscore to indicate\nprotected or private visibility.\n\n\nA property declaration looks like the following.\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nclass\n \nClassName\n\n\n{\n\n    \npublic\n \n$foo\n \n=\n \nnull\n;\n\n\n}\n\n\n\n\n\n\n4.3. Methods\n\n\nVisibility MUST be declared on all methods.\n\n\nMethod names SHOULD NOT be prefixed with a single underscore to indicate\nprotected or private visibility.\n\n\nMethod names MUST NOT be declared with a space after the method name. The\nopening brace MUST go on its own line, and the closing brace MUST go on the\nnext line following the body. There MUST NOT be a space after the opening\nparenthesis, and there MUST NOT be a space before the closing parenthesis.\n\n\nA method declaration looks like the following. Note the placement of\nparentheses, commas, spaces, and braces:\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nclass\n \nClassName\n\n\n{\n\n    \npublic\n \nfunction\n \nfooBarBaz\n(\n$arg1\n,\n \n$arg2\n,\n \n$arg3\n \n=\n \n[])\n\n    \n{\n\n        \n// method body\n\n    \n}\n\n\n}\n\n\n\n\n\n\n4.4. Method Arguments\n\n\nIn the argument list, there MUST NOT be a space before each comma, and there\nMUST be one space after each comma.\n\n\nMethod arguments with default values MUST go at the end of the argument\nlist.\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nclass\n \nClassName\n\n\n{\n\n    \npublic\n \nfunction\n \nfoo\n(\n$arg1\n,\n \n$arg2\n,\n \n$arg3\n \n=\n \n[])\n\n    \n{\n\n        \n// method body\n\n    \n}\n\n\n}\n\n\n\n\n\n\nArgument lists MAY be split across multiple lines, where each subsequent line\nis indented once. When doing so, the first item in the list MUST be on the\nnext line, and there MUST be only one argument per line.\n\n\nWhen the argument list is split across multiple lines, the closing parenthesis\nand opening brace MUST be placed together on their own line with one space\nbetween them.\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nclass\n \nClassName\n\n\n{\n\n    \npublic\n \nfunction\n \naVeryLongMethodName\n(\n\n        \nClassTypeHint\n \n$arg1\n,\n\n        \n$arg2\n,\n\n        \narray\n \n$arg3\n \n=\n \n[]\n\n    \n)\n \n{\n\n        \n// method body\n\n    \n}\n\n\n}\n\n\n\n\n\n\n4.5. \nabstract\n, \nfinal\n, and \nstatic\n\n\nWhen present, the \nabstract\n and \nfinal\n declarations MUST precede the\nvisibility declaration.\n\n\nWhen present, the \nstatic\n declaration MUST come after the visibility\ndeclaration.\n\n\n?php\n\n\nnamespace\n \nVendor\\Package\n;\n\n\n\nabstract\n \nclass\n \nClassName\n\n\n{\n\n    \nprotected\n \nstatic\n \n$foo\n;\n\n\n    \nabstract\n \nprotected\n \nfunction\n \nzim\n();\n\n\n    \nfinal\n \npublic\n \nstatic\n \nfunction\n \nbar\n()\n\n    \n{\n\n        \n// method body\n\n    \n}\n\n\n}\n\n\n\n\n\n\n4.6. Method and Function Calls\n\n\nWhen making a method or function call, there MUST NOT be a space between the\nmethod or function name and the opening parenthesis, there MUST NOT be a space\nafter the opening parenthesis, and there MUST NOT be a space before the\nclosing parenthesis. In the argument list, there MUST NOT be a space before\neach comma, and there MUST be one space after each comma.\n\n\n?php\n\n\nbar\n();\n\n\n$foo\n-\nbar\n(\n$arg1\n);\n\n\nFoo\n::\nbar\n(\n$arg2\n,\n \n$arg3\n);\n\n\n\n\n\n\nArgument lists MAY be split across multiple lines, where each subsequent line\nis indented once. When doing so, the first item in the list MUST be on the\nnext line, and there MUST be only one argument per line.\n\n\n?php\n\n\n$foo\n-\nbar\n(\n\n    \n$longArgument\n,\n\n    \n$longerArgument\n,\n\n    \n$muchLongerArgument\n\n\n);\n\n\n\n\n\n\n5. Control Structures\n\n\n\n\nThe general style rules for control structures are as follows:\n\n\n\n\nThere MUST be one space after the control structure keyword\n\n\nThere MUST NOT be a space after the opening parenthesis\n\n\nThere MUST NOT be a space before the closing parenthesis\n\n\nThere MUST be one space between the closing parenthesis and the opening\n  brace\n\n\nThe structure body MUST be indented once\n\n\nThe closing brace MUST be on the next line after the body\n\n\n\n\nThe body of each structure MUST be enclosed by braces. This standardizes how\nthe structures look, and reduces the likelihood of introducing errors as new\nlines get added to the body.\n\n\n5.1. \nif\n, \nelseif\n, \nelse\n\n\nAn \nif\n structure looks like the following. Note the placement of parentheses,\nspaces, and braces; and that \nelse\n and \nelseif\n are on the same line as the\nclosing brace from the earlier body.\n\n\n?php\n\n\nif\n \n(\n$expr1\n)\n \n{\n\n    \n// if body\n\n\n}\n \nelseif\n \n(\n$expr2\n)\n \n{\n\n    \n// elseif body\n\n\n}\n \nelse\n \n{\n\n    \n// else body;\n\n\n}\n\n\n\n\n\n\nThe keyword \nelseif\n SHOULD be used instead of \nelse if\n so that all control\nkeywords look like single words.\n\n\n5.2. \nswitch\n, \ncase\n\n\nA \nswitch\n structure looks like the following. Note the placement of\nparentheses, spaces, and braces. The \ncase\n statement MUST be indented once\nfrom \nswitch\n, and the \nbreak\n keyword (or other terminating keyword) MUST be\nindented at the same level as the \ncase\n body. There MUST be a comment such as\n\n// no break\n when fall-through is intentional in a non-empty \ncase\n body.\n\n\n?php\n\n\nswitch\n \n(\n$expr\n)\n \n{\n\n    \ncase\n \n0\n:\n\n        \necho\n \nFirst case, with a break\n;\n\n        \nbreak\n;\n\n    \ncase\n \n1\n:\n\n        \necho\n \nSecond case, which falls through\n;\n\n        \n// no break\n\n    \ncase\n \n2\n:\n\n    \ncase\n \n3\n:\n\n    \ncase\n \n4\n:\n\n        \necho\n \nThird case, return instead of break\n;\n\n        \nreturn\n;\n\n    \ndefault\n:\n\n        \necho\n \nDefault case\n;\n\n        \nbreak\n;\n\n\n}\n\n\n\n\n\n\n5.3. \nwhile\n, \ndo while\n\n\nA \nwhile\n statement looks like the following. Note the placement of\nparentheses, spaces, and braces.\n\n\n?php\n\n\nwhile\n \n(\n$expr\n)\n \n{\n\n    \n// structure body\n\n\n}\n\n\n\n\n\n\nSimilarly, a \ndo while\n statement looks like the following. Note the placement\nof parentheses, spaces, and braces.\n\n\n?php\n\n\ndo\n \n{\n\n    \n// structure body;\n\n\n}\n \nwhile\n \n(\n$expr\n);\n\n\n\n\n\n\n5.4. \nfor\n\n\nA \nfor\n statement looks like the following. Note the placement of parentheses,\nspaces, and braces.\n\n\n?php\n\n\nfor\n \n(\n$i\n \n=\n \n0\n;\n \n$i\n \n \n10\n;\n \n$i\n++\n)\n \n{\n\n    \n// for body\n\n\n}\n\n\n\n\n\n\n5.5. \nforeach\n\n\nA \nforeach\n statement looks like the following. Note the placement of\nparentheses, spaces, and braces.\n\n\n?php\n\n\nforeach\n \n(\n$iterable\n \nas\n \n$key\n \n=\n \n$value\n)\n \n{\n\n    \n// foreach body\n\n\n}\n\n\n\n\n\n\n5.6. \ntry\n, \ncatch\n\n\nA \ntry catch\n block looks like the following. Note the placement of\nparentheses, spaces, and braces.\n\n\n?php\n\n\ntry\n \n{\n\n    \n// try body\n\n\n}\n \ncatch\n \n(\nFirstExceptionType\n \n$e\n)\n \n{\n\n    \n// catch body\n\n\n}\n \ncatch\n \n(\nOtherExceptionType\n \n$e\n)\n \n{\n\n    \n// catch body\n\n\n}\n\n\n\n\n\n\n6. Closures\n\n\n\n\nClosures MUST be declared with a space after the \nfunction\n keyword, and a\nspace before and after the \nuse\n keyword.\n\n\nThe opening brace MUST go on the same line, and the closing brace MUST go on\nthe next line following the body.\n\n\nThere MUST NOT be a space after the opening parenthesis of the argument list\nor variable list, and there MUST NOT be a space before the closing parenthesis\nof the argument list or variable list.\n\n\nIn the argument list and variable list, there MUST NOT be a space before each\ncomma, and there MUST be one space after each comma.\n\n\nClosure arguments with default values MUST go at the end of the argument\nlist.\n\n\nA closure declaration looks like the following. Note the placement of\nparentheses, commas, spaces, and braces:\n\n\n?php\n\n\n$closureWithArgs\n \n=\n \nfunction\n \n(\n$arg1\n,\n \n$arg2\n)\n \n{\n\n    \n// body\n\n\n};\n\n\n\n$closureWithArgsAndVars\n \n=\n \nfunction\n \n(\n$arg1\n,\n \n$arg2\n)\n \nuse\n \n(\n$var1\n,\n \n$var2\n)\n \n{\n\n    \n// body\n\n\n};\n\n\n\n\n\n\nArgument lists and variable lists MAY be split across multiple lines, where\neach subsequent line is indented once. When doing so, the first item in the\nlist MUST be on the next line, and there MUST be only one argument or variable\nper line.\n\n\nWhen the ending list (whether of arguments or variables) is split across\nmultiple lines, the closing parenthesis and opening brace MUST be placed\ntogether on their own line with one space between them.\n\n\nThe following are examples of closures with and without argument lists and\nvariable lists split across multiple lines.\n\n\n?php\n\n\n$longArgs_noVars\n \n=\n \nfunction\n \n(\n\n    \n$longArgument\n,\n\n    \n$longerArgument\n,\n\n    \n$muchLongerArgument\n\n\n)\n \n{\n\n    \n// body\n\n\n};\n\n\n\n$noArgs_longVars\n \n=\n \nfunction\n \n()\n \nuse\n \n(\n\n    \n$longVar1\n,\n\n    \n$longerVar2\n,\n\n    \n$muchLongerVar3\n\n\n)\n \n{\n\n    \n// body\n\n\n};\n\n\n\n$longArgs_longVars\n \n=\n \nfunction\n \n(\n\n    \n$longArgument\n,\n\n    \n$longerArgument\n,\n\n    \n$muchLongerArgument\n\n\n)\n \nuse\n \n(\n\n    \n$longVar1\n,\n\n    \n$longerVar2\n,\n\n    \n$muchLongerVar3\n\n\n)\n \n{\n\n    \n// body\n\n\n};\n\n\n\n$longArgs_shortVars\n \n=\n \nfunction\n \n(\n\n    \n$longArgument\n,\n\n    \n$longerArgument\n,\n\n    \n$muchLongerArgument\n\n\n)\n \nuse\n \n(\n$var1\n)\n \n{\n\n    \n// body\n\n\n};\n\n\n\n$shortArgs_longVars\n \n=\n \nfunction\n \n(\n$arg\n)\n \nuse\n \n(\n\n    \n$longVar1\n,\n\n    \n$longerVar2\n,\n\n    \n$muchLongerVar3\n\n\n)\n \n{\n\n    \n// body\n\n\n};\n\n\n\n\n\n\nNote that the formatting rules also apply when the closure is used directly\nin a function or method call as an argument.\n\n\n?php\n\n\n$foo\n-\nbar\n(\n\n    \n$arg1\n,\n\n    \nfunction\n \n(\n$arg2\n)\n \nuse\n \n(\n$var1\n)\n \n{\n\n        \n// body\n\n    \n},\n\n    \n$arg3\n\n\n);\n\n\n\n\n\n\n7. Conclusion\n\n\n\n\nThere are many elements of style and practice intentionally omitted by this\nguide. These include but are not limited to:\n\n\n\n\n\n\nDeclaration of global variables and global constants\n\n\n\n\n\n\nDeclaration of functions\n\n\n\n\n\n\nOperators and assignment\n\n\n\n\n\n\nInter-line alignment\n\n\n\n\n\n\nComments and documentation blocks\n\n\n\n\n\n\nClass name prefixes and suffixes\n\n\n\n\n\n\nBest practices\n\n\n\n\n\n\nFuture recommendations MAY revise and extend this guide to address those or\nother elements of style and practice.", 
            "title": "Coding Styleguide"
        }, 
        {
            "location": "/php/php-styleguide/#coding-style-guide", 
            "text": "The intent of this guide is to reduce cognitive friction when scanning code\nfrom different authors. It does so by enumerating a shared set of rules and\nexpectations about how to format PHP code.", 
            "title": "Coding Style Guide"
        }, 
        {
            "location": "/php/php-styleguide/#1-overview", 
            "text": "Code MUST follow a \"coding style guide\".    Code MUST use 4 spaces for indenting, not tabs.    There MUST NOT be a hard limit on line length; the soft limit MUST be 120\n  characters; lines SHOULD be 80 characters or less.    There MUST be one blank line after the  namespace  declaration, and there\n  MUST be one blank line after the block of  use  declarations.    Opening braces for classes MUST go on the next line, and closing braces MUST\n  go on the next line after the body.    Opening braces for methods MUST go on the next line, and closing braces MUST\n  go on the next line after the body.    Visibility MUST be declared on all properties and methods;  abstract  and\n   final  MUST be declared before the visibility;  static  MUST be declared\n  after the visibility.    Control structure keywords MUST have one space after them; method and\n  function calls MUST NOT.    Opening braces for control structures MUST go on the same line, and closing\n  braces MUST go on the next line after the body.    Opening parentheses for control structures MUST NOT have a space after them,\n  and closing parentheses for control structures MUST NOT have a space before.", 
            "title": "1. Overview"
        }, 
        {
            "location": "/php/php-styleguide/#11-example", 
            "text": "This example encompasses some of the rules below as a quick overview:  ?php  namespace   Vendor\\Package ;  use   FooInterface ;  use   BarClass   as   Bar ;  use   OtherVendor\\OtherPackage\\BazClass ;  class   Foo   extends   Bar   implements   FooInterface  { \n     public   function   sampleMethod ( $a ,   $b   =   null ) \n     { \n         if   ( $a   ===   $b )   { \n             bar (); \n         }   elseif   ( $a     $b )   { \n             $foo - bar ( $arg1 ); \n         }   else   { \n             BazClass :: bar ( $arg2 ,   $arg3 ); \n         } \n     } \n\n     final   public   static   function   bar () \n     { \n         // method body \n     }  }", 
            "title": "1.1. Example"
        }, 
        {
            "location": "/php/php-styleguide/#2-general", 
            "text": "", 
            "title": "2. General"
        }, 
        {
            "location": "/php/php-styleguide/#21-basic-coding-standard", 
            "text": "Code MUST follow all rules outlined in [PSR-1].", 
            "title": "2.1. Basic Coding Standard"
        }, 
        {
            "location": "/php/php-styleguide/#22-files", 
            "text": "All PHP files MUST use the Unix LF (linefeed) line ending.  All PHP files MUST end with a single blank line.  The closing  ?  tag MUST be omitted from files containing only PHP.", 
            "title": "2.2. Files"
        }, 
        {
            "location": "/php/php-styleguide/#23-lines", 
            "text": "There MUST NOT be a hard limit on line length.  The soft limit on line length MUST be 120 characters; automated style checkers\nMUST warn but MUST NOT error at the soft limit.  Lines SHOULD NOT be longer than 80 characters; lines longer than that SHOULD\nbe split into multiple subsequent lines of no more than 80 characters each.  There MUST NOT be trailing whitespace at the end of non-blank lines.  Blank lines MAY be added to improve readability and to indicate related\nblocks of code.  There MUST NOT be more than one statement per line.", 
            "title": "2.3. Lines"
        }, 
        {
            "location": "/php/php-styleguide/#24-indenting", 
            "text": "Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting.   N.b.: Using only spaces, and not mixing spaces with tabs, helps to avoid\nproblems with diffs, patches, history, and annotations. The use of spaces\nalso makes it easy to insert fine-grained sub-indentation for inter-line\nalignment.", 
            "title": "2.4. Indenting"
        }, 
        {
            "location": "/php/php-styleguide/#25-keywords-and-truefalsenull", 
            "text": "PHP  keywords  MUST be in lower case.  The PHP constants  true ,  false , and  null  MUST be in lower case.", 
            "title": "2.5. Keywords and True/False/Null"
        }, 
        {
            "location": "/php/php-styleguide/#3-namespace-and-use-declarations", 
            "text": "When present, there MUST be one blank line after the  namespace  declaration.  When present, all  use  declarations MUST go after the  namespace \ndeclaration.  There MUST be one  use  keyword per declaration.  There MUST be one blank line after the  use  block.  For example:  ?php  namespace   Vendor\\Package ;  use   FooClass ;  use   BarClass   as   Bar ;  use   OtherVendor\\OtherPackage\\BazClass ;  // ... additional PHP code ...", 
            "title": "3. Namespace and Use Declarations"
        }, 
        {
            "location": "/php/php-styleguide/#4-classes-properties-and-methods", 
            "text": "The term \"class\" refers to all classes, interfaces, and traits.", 
            "title": "4. Classes, Properties, and Methods"
        }, 
        {
            "location": "/php/php-styleguide/#41-extends-and-implements", 
            "text": "The  extends  and  implements  keywords MUST be declared on the same line as\nthe class name.  The opening brace for the class MUST go on its own line; the closing brace\nfor the class MUST go on the next line after the body.  ?php  namespace   Vendor\\Package ;  use   FooClass ;  use   BarClass   as   Bar ;  use   OtherVendor\\OtherPackage\\BazClass ;  class   ClassName   extends   ParentClass   implements   \\ArrayAccess ,   \\Countable  { \n     // constants, properties, methods  }   Lists of  implements  MAY be split across multiple lines, where each\nsubsequent line is indented once. When doing so, the first item in the list\nMUST be on the next line, and there MUST be only one interface per line.  ?php  namespace   Vendor\\Package ;  use   FooClass ;  use   BarClass   as   Bar ;  use   OtherVendor\\OtherPackage\\BazClass ;  class   ClassName   extends   ParentClass   implements \n     \\ArrayAccess , \n     \\Countable , \n     \\Serializable  { \n     // constants, properties, methods  }", 
            "title": "4.1. Extends and Implements"
        }, 
        {
            "location": "/php/php-styleguide/#42-properties", 
            "text": "Visibility MUST be declared on all properties.  The  var  keyword MUST NOT be used to declare a property.  There MUST NOT be more than one property declared per statement.  Property names SHOULD NOT be prefixed with a single underscore to indicate\nprotected or private visibility.  A property declaration looks like the following.  ?php  namespace   Vendor\\Package ;  class   ClassName  { \n     public   $foo   =   null ;  }", 
            "title": "4.2. Properties"
        }, 
        {
            "location": "/php/php-styleguide/#43-methods", 
            "text": "Visibility MUST be declared on all methods.  Method names SHOULD NOT be prefixed with a single underscore to indicate\nprotected or private visibility.  Method names MUST NOT be declared with a space after the method name. The\nopening brace MUST go on its own line, and the closing brace MUST go on the\nnext line following the body. There MUST NOT be a space after the opening\nparenthesis, and there MUST NOT be a space before the closing parenthesis.  A method declaration looks like the following. Note the placement of\nparentheses, commas, spaces, and braces:  ?php  namespace   Vendor\\Package ;  class   ClassName  { \n     public   function   fooBarBaz ( $arg1 ,   $arg2 ,   $arg3   =   []) \n     { \n         // method body \n     }  }", 
            "title": "4.3. Methods"
        }, 
        {
            "location": "/php/php-styleguide/#44-method-arguments", 
            "text": "In the argument list, there MUST NOT be a space before each comma, and there\nMUST be one space after each comma.  Method arguments with default values MUST go at the end of the argument\nlist.  ?php  namespace   Vendor\\Package ;  class   ClassName  { \n     public   function   foo ( $arg1 ,   $arg2 ,   $arg3   =   []) \n     { \n         // method body \n     }  }   Argument lists MAY be split across multiple lines, where each subsequent line\nis indented once. When doing so, the first item in the list MUST be on the\nnext line, and there MUST be only one argument per line.  When the argument list is split across multiple lines, the closing parenthesis\nand opening brace MUST be placed together on their own line with one space\nbetween them.  ?php  namespace   Vendor\\Package ;  class   ClassName  { \n     public   function   aVeryLongMethodName ( \n         ClassTypeHint   $arg1 , \n         $arg2 , \n         array   $arg3   =   [] \n     )   { \n         // method body \n     }  }", 
            "title": "4.4. Method Arguments"
        }, 
        {
            "location": "/php/php-styleguide/#45-abstract-final-and-static", 
            "text": "When present, the  abstract  and  final  declarations MUST precede the\nvisibility declaration.  When present, the  static  declaration MUST come after the visibility\ndeclaration.  ?php  namespace   Vendor\\Package ;  abstract   class   ClassName  { \n     protected   static   $foo ; \n\n     abstract   protected   function   zim (); \n\n     final   public   static   function   bar () \n     { \n         // method body \n     }  }", 
            "title": "4.5. abstract, final, and static"
        }, 
        {
            "location": "/php/php-styleguide/#46-method-and-function-calls", 
            "text": "When making a method or function call, there MUST NOT be a space between the\nmethod or function name and the opening parenthesis, there MUST NOT be a space\nafter the opening parenthesis, and there MUST NOT be a space before the\nclosing parenthesis. In the argument list, there MUST NOT be a space before\neach comma, and there MUST be one space after each comma.  ?php  bar ();  $foo - bar ( $arg1 );  Foo :: bar ( $arg2 ,   $arg3 );   Argument lists MAY be split across multiple lines, where each subsequent line\nis indented once. When doing so, the first item in the list MUST be on the\nnext line, and there MUST be only one argument per line.  ?php  $foo - bar ( \n     $longArgument , \n     $longerArgument , \n     $muchLongerArgument  );", 
            "title": "4.6. Method and Function Calls"
        }, 
        {
            "location": "/php/php-styleguide/#5-control-structures", 
            "text": "The general style rules for control structures are as follows:   There MUST be one space after the control structure keyword  There MUST NOT be a space after the opening parenthesis  There MUST NOT be a space before the closing parenthesis  There MUST be one space between the closing parenthesis and the opening\n  brace  The structure body MUST be indented once  The closing brace MUST be on the next line after the body   The body of each structure MUST be enclosed by braces. This standardizes how\nthe structures look, and reduces the likelihood of introducing errors as new\nlines get added to the body.", 
            "title": "5. Control Structures"
        }, 
        {
            "location": "/php/php-styleguide/#51-if-elseif-else", 
            "text": "An  if  structure looks like the following. Note the placement of parentheses,\nspaces, and braces; and that  else  and  elseif  are on the same line as the\nclosing brace from the earlier body.  ?php  if   ( $expr1 )   { \n     // if body  }   elseif   ( $expr2 )   { \n     // elseif body  }   else   { \n     // else body;  }   The keyword  elseif  SHOULD be used instead of  else if  so that all control\nkeywords look like single words.", 
            "title": "5.1. if, elseif, else"
        }, 
        {
            "location": "/php/php-styleguide/#52-switch-case", 
            "text": "A  switch  structure looks like the following. Note the placement of\nparentheses, spaces, and braces. The  case  statement MUST be indented once\nfrom  switch , and the  break  keyword (or other terminating keyword) MUST be\nindented at the same level as the  case  body. There MUST be a comment such as // no break  when fall-through is intentional in a non-empty  case  body.  ?php  switch   ( $expr )   { \n     case   0 : \n         echo   First case, with a break ; \n         break ; \n     case   1 : \n         echo   Second case, which falls through ; \n         // no break \n     case   2 : \n     case   3 : \n     case   4 : \n         echo   Third case, return instead of break ; \n         return ; \n     default : \n         echo   Default case ; \n         break ;  }", 
            "title": "5.2. switch, case"
        }, 
        {
            "location": "/php/php-styleguide/#53-while-do-while", 
            "text": "A  while  statement looks like the following. Note the placement of\nparentheses, spaces, and braces.  ?php  while   ( $expr )   { \n     // structure body  }   Similarly, a  do while  statement looks like the following. Note the placement\nof parentheses, spaces, and braces.  ?php  do   { \n     // structure body;  }   while   ( $expr );", 
            "title": "5.3. while, do while"
        }, 
        {
            "location": "/php/php-styleguide/#54-for", 
            "text": "A  for  statement looks like the following. Note the placement of parentheses,\nspaces, and braces.  ?php  for   ( $i   =   0 ;   $i     10 ;   $i ++ )   { \n     // for body  }", 
            "title": "5.4. for"
        }, 
        {
            "location": "/php/php-styleguide/#55-foreach", 
            "text": "A  foreach  statement looks like the following. Note the placement of\nparentheses, spaces, and braces.  ?php  foreach   ( $iterable   as   $key   =   $value )   { \n     // foreach body  }", 
            "title": "5.5. foreach"
        }, 
        {
            "location": "/php/php-styleguide/#56-try-catch", 
            "text": "A  try catch  block looks like the following. Note the placement of\nparentheses, spaces, and braces.  ?php  try   { \n     // try body  }   catch   ( FirstExceptionType   $e )   { \n     // catch body  }   catch   ( OtherExceptionType   $e )   { \n     // catch body  }", 
            "title": "5.6. try, catch"
        }, 
        {
            "location": "/php/php-styleguide/#6-closures", 
            "text": "Closures MUST be declared with a space after the  function  keyword, and a\nspace before and after the  use  keyword.  The opening brace MUST go on the same line, and the closing brace MUST go on\nthe next line following the body.  There MUST NOT be a space after the opening parenthesis of the argument list\nor variable list, and there MUST NOT be a space before the closing parenthesis\nof the argument list or variable list.  In the argument list and variable list, there MUST NOT be a space before each\ncomma, and there MUST be one space after each comma.  Closure arguments with default values MUST go at the end of the argument\nlist.  A closure declaration looks like the following. Note the placement of\nparentheses, commas, spaces, and braces:  ?php  $closureWithArgs   =   function   ( $arg1 ,   $arg2 )   { \n     // body  };  $closureWithArgsAndVars   =   function   ( $arg1 ,   $arg2 )   use   ( $var1 ,   $var2 )   { \n     // body  };   Argument lists and variable lists MAY be split across multiple lines, where\neach subsequent line is indented once. When doing so, the first item in the\nlist MUST be on the next line, and there MUST be only one argument or variable\nper line.  When the ending list (whether of arguments or variables) is split across\nmultiple lines, the closing parenthesis and opening brace MUST be placed\ntogether on their own line with one space between them.  The following are examples of closures with and without argument lists and\nvariable lists split across multiple lines.  ?php  $longArgs_noVars   =   function   ( \n     $longArgument , \n     $longerArgument , \n     $muchLongerArgument  )   { \n     // body  };  $noArgs_longVars   =   function   ()   use   ( \n     $longVar1 , \n     $longerVar2 , \n     $muchLongerVar3  )   { \n     // body  };  $longArgs_longVars   =   function   ( \n     $longArgument , \n     $longerArgument , \n     $muchLongerArgument  )   use   ( \n     $longVar1 , \n     $longerVar2 , \n     $muchLongerVar3  )   { \n     // body  };  $longArgs_shortVars   =   function   ( \n     $longArgument , \n     $longerArgument , \n     $muchLongerArgument  )   use   ( $var1 )   { \n     // body  };  $shortArgs_longVars   =   function   ( $arg )   use   ( \n     $longVar1 , \n     $longerVar2 , \n     $muchLongerVar3  )   { \n     // body  };   Note that the formatting rules also apply when the closure is used directly\nin a function or method call as an argument.  ?php  $foo - bar ( \n     $arg1 , \n     function   ( $arg2 )   use   ( $var1 )   { \n         // body \n     }, \n     $arg3  );", 
            "title": "6. Closures"
        }, 
        {
            "location": "/php/php-styleguide/#7-conclusion", 
            "text": "There are many elements of style and practice intentionally omitted by this\nguide. These include but are not limited to:    Declaration of global variables and global constants    Declaration of functions    Operators and assignment    Inter-line alignment    Comments and documentation blocks    Class name prefixes and suffixes    Best practices    Future recommendations MAY revise and extend this guide to address those or\nother elements of style and practice.", 
            "title": "7. Conclusion"
        }, 
        {
            "location": "/php/php-interface/", 
            "text": "Logger Interface\n\n\nThis document describes a common interface for logging libraries.\n\n\nThe main goal is to allow libraries to receive a \nPsr\\Log\\LoggerInterface\n\nobject and write logs to it in a simple and universal way. Frameworks\nand CMSs that have custom needs MAY extend the interface for their own\npurpose, but SHOULD remain compatible with this document. This ensures\nthat the third-party libraries an application uses can write to the\ncentralized application logs.\n\n\nThe word \nimplementor\n in this document is to be interpreted as someone\nimplementing the \nLoggerInterface\n in a log-related library or framework.\nUsers of loggers are referred to as \nuser\n.\n\n\n1. Specification\n\n\n1.1 Basics\n\n\n\n\n\n\nThe \nLoggerInterface\n exposes eight methods to write logs to the eight\n  \nRFC 5424\n levels (debug, info, notice, warning, error, critical, alert,\n  emergency).\n\n\n\n\n\n\nA ninth method, \nlog\n, accepts a log level as the first argument. Calling this\n  method with one of the log level constants MUST have the same result as\n  calling the level-specific method. Calling this method with a level not\n  defined by this specification MUST throw a \nPsr\\Log\\InvalidArgumentException\n\n  if the implementation does not know about the level. Users SHOULD NOT use a\n  custom level without knowing for sure the current implementation supports it.\n\n\n\n\n\n\n1.2 Message\n\n\n\n\n\n\nEvery method accepts a string as the message, or an object with a\n  \n__toString()\n method. Implementors MAY have special handling for the passed\n  objects. If that is not the case, implementors MUST cast it to a string.\n\n\n\n\n\n\nThe message MAY contain placeholders which implementors MAY replace with\n  values from the context array.\n\n\n\n\n\n\nPlaceholder names MUST correspond to keys in the context array.\n\n\nPlaceholder names MUST be delimited with a single opening brace \n{\n and\n  a single closing brace \n}\n. There MUST NOT be any whitespace between the\n  delimiters and the placeholder name.\n\n\nPlaceholder names SHOULD be composed only of the characters \nA-Z\n, \na-z\n,\n  \n0-9\n, underscore \n_\n, and period \n.\n. The use of other characters is\n  reserved for future modifications of the placeholders specification.\n\n\nImplementors MAY use placeholders to implement various escaping strategies\n  and translate logs for display. Users SHOULD NOT pre-escape placeholder\n  values since they can not know in which context the data will be displayed.\n\n\nThe following is an example implementation of placeholder interpolation\n  provided for reference purposes only:\n\n\n/**\n\n\n  * Interpolates context values into the message placeholders.\n\n\n  */\n\n\n\nfunction interpolate($message, array $context = array()) {\n\n\n    // build a replacement array with braces around the context keys\n\n\n    $replace = array();\n\n\n    foreach ($context as $key =\n $val) {\n\n\n        // check that the value can be casted to string\n\n\n        if (!is_array($val) \n (!is_object($val) || method_exists($val, \n__toString\n))) {\n\n\n            $replace[\n{\n . $key . \n}\n] = $val;\n\n\n        }\n\n\n    }\n\n\n\n    // interpolate replacement values into the message and return\n\n\n    return strtr($message, $replace);\n\n\n}\n\n\n\n// a message with brace-delimited placeholder names\n\n\n$message = \nUser {username} created\n;\n\n\n\n// a context array of placeholder names =\n replacement values\n\n\n$context = array(\nusername\n =\n \nbolivar\n);\n\n\n\n// echoes \nUser bolivar created\n\n\necho interpolate($message, $context);\n\n\n\n\n\n\n1.3 Context\n\n\n\n\n\n\nEvery method accepts an array as context data. This is meant to hold any\n  extraneous information that does not fit well in a string. The array can\n  contain anything. Implementors MUST ensure they treat context data with\n  as much lenience as possible. A given value in the context MUST NOT throw\n  an exception nor raise any php error, warning or notice.\n\n\n\n\n\n\nIf an \nException\n object is passed in the context data, it MUST be in the\n  \n'exception'\n key. Logging exceptions is a common pattern and this allows\n  implementors to extract a stack trace from the exception when the log\n  backend supports it. Implementors MUST still verify that the \n'exception'\n\n  key is actually an \nException\n before using it as such, as it MAY contain\n  anything.\n\n\n\n\n\n\n1.4 Helper classes and interfaces\n\n\n\n\n\n\nThe \nPsr\\Log\\AbstractLogger\n class lets you implement the \nLoggerInterface\n\n  very easily by extending it and implementing the generic \nlog\n method.\n  The other eight methods are forwarding the message and context to it.\n\n\n\n\n\n\nSimilarly, using the \nPsr\\Log\\LoggerTrait\n only requires you to\n  implement the generic \nlog\n method. Note that since traits can not implement\n  interfaces, in this case you still have to implement \nLoggerInterface\n.\n\n\n\n\n\n\nThe \nPsr\\Log\\NullLogger\n is provided together with the interface. It MAY be\n  used by users of the interface to provide a fall-back \"black hole\"\n  implementation if no logger is given to them. However, conditional logging\n  may be a better approach if context data creation is expensive.\n\n\n\n\n\n\nThe \nPsr\\Log\\LoggerAwareInterface\n only contains a\n  \nsetLogger(LoggerInterface $logger)\n method and can be used by frameworks to\n  auto-wire arbitrary instances with a logger.\n\n\n\n\n\n\nThe \nPsr\\Log\\LoggerAwareTrait\n trait can be used to implement the equivalent\n  interface easily in any class. It gives you access to \n$this-\nlogger\n.\n\n\n\n\n\n\nThe \nPsr\\Log\\LogLevel\n class holds constants for the eight log levels.\n\n\n\n\n\n\n2. Package\n\n\nThe interfaces and classes described as well as relevant exception classes\nand a test suite to verify your implementation are provided as part of the\n\npsr/log\n package.\n\n\n3. \nPsr\\Log\\LoggerInterface\n\n\n?php\n\n\n\nnamespace\n \nPsr\\Log\n;\n\n\n\n/**\n\n\n * Describes a logger instance\n\n\n *\n\n\n * The message MUST be a string or object implementing __toString().\n\n\n *\n\n\n * The message MAY contain placeholders in the form: {foo} where foo\n\n\n * will be replaced by the context data in key \nfoo\n.\n\n\n *\n\n\n * The context array can contain arbitrary data, the only assumption that\n\n\n * can be made by implementors is that if an Exception instance is given\n\n\n * to produce a stack trace, it MUST be in a key named \nexception\n.\n\n\n *\n\n\n * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md\n\n\n * for the full interface specification.\n\n\n */\n\n\ninterface\n \nLoggerInterface\n\n\n{\n\n    \n/**\n\n\n     * System is unusable.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \nemergency\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Action must be taken immediately.\n\n\n     *\n\n\n     * Example: Entire website down, database unavailable, etc. This should\n\n\n     * trigger the SMS alerts and wake you up.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \nalert\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Critical conditions.\n\n\n     *\n\n\n     * Example: Application component unavailable, unexpected exception.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \ncritical\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Runtime errors that do not require immediate action but should typically\n\n\n     * be logged and monitored.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \nerror\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Exceptional occurrences that are not errors.\n\n\n     *\n\n\n     * Example: Use of deprecated APIs, poor use of an API, undesirable things\n\n\n     * that are not necessarily wrong.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \nwarning\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Normal but significant events.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \nnotice\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Interesting events.\n\n\n     *\n\n\n     * Example: User logs in, SQL logs.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \ninfo\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Detailed debug information.\n\n\n     *\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \ndebug\n(\n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Logs with an arbitrary level.\n\n\n     *\n\n\n     * @param mixed $level\n\n\n     * @param string $message\n\n\n     * @param array $context\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \nlog\n(\n$level\n,\n \n$message\n,\n \narray\n \n$context\n \n=\n \narray\n());\n\n\n}\n\n\n\n\n\n\n4. \nPsr\\Log\\LoggerAwareInterface\n\n\n?php\n\n\n\nnamespace\n \nPsr\\Log\n;\n\n\n\n/**\n\n\n * Describes a logger-aware instance\n\n\n */\n\n\ninterface\n \nLoggerAwareInterface\n\n\n{\n\n    \n/**\n\n\n     * Sets a logger instance on the object\n\n\n     *\n\n\n     * @param LoggerInterface $logger\n\n\n     * @return null\n\n\n     */\n\n    \npublic\n \nfunction\n \nsetLogger\n(\nLoggerInterface\n \n$logger\n);\n\n\n}\n\n\n\n\n\n\n5. \nPsr\\Log\\LogLevel\n\n\n?php\n\n\n\nnamespace\n \nPsr\\Log\n;\n\n\n\n/**\n\n\n * Describes log levels\n\n\n */\n\n\nclass\n \nLogLevel\n\n\n{\n\n    \nconst\n \nEMERGENCY\n \n=\n \nemergency\n;\n\n    \nconst\n \nALERT\n     \n=\n \nalert\n;\n\n    \nconst\n \nCRITICAL\n  \n=\n \ncritical\n;\n\n    \nconst\n \nERROR\n     \n=\n \nerror\n;\n\n    \nconst\n \nWARNING\n   \n=\n \nwarning\n;\n\n    \nconst\n \nNOTICE\n    \n=\n \nnotice\n;\n\n    \nconst\n \nINFO\n      \n=\n \ninfo\n;\n\n    \nconst\n \nDEBUG\n     \n=\n \ndebug\n;\n\n\n}", 
            "title": "Logger Interface"
        }, 
        {
            "location": "/php/php-interface/#logger-interface", 
            "text": "This document describes a common interface for logging libraries.  The main goal is to allow libraries to receive a  Psr\\Log\\LoggerInterface \nobject and write logs to it in a simple and universal way. Frameworks\nand CMSs that have custom needs MAY extend the interface for their own\npurpose, but SHOULD remain compatible with this document. This ensures\nthat the third-party libraries an application uses can write to the\ncentralized application logs.  The word  implementor  in this document is to be interpreted as someone\nimplementing the  LoggerInterface  in a log-related library or framework.\nUsers of loggers are referred to as  user .", 
            "title": "Logger Interface"
        }, 
        {
            "location": "/php/php-interface/#1-specification", 
            "text": "", 
            "title": "1. Specification"
        }, 
        {
            "location": "/php/php-interface/#11-basics", 
            "text": "The  LoggerInterface  exposes eight methods to write logs to the eight\n   RFC 5424  levels (debug, info, notice, warning, error, critical, alert,\n  emergency).    A ninth method,  log , accepts a log level as the first argument. Calling this\n  method with one of the log level constants MUST have the same result as\n  calling the level-specific method. Calling this method with a level not\n  defined by this specification MUST throw a  Psr\\Log\\InvalidArgumentException \n  if the implementation does not know about the level. Users SHOULD NOT use a\n  custom level without knowing for sure the current implementation supports it.", 
            "title": "1.1 Basics"
        }, 
        {
            "location": "/php/php-interface/#12-message", 
            "text": "Every method accepts a string as the message, or an object with a\n   __toString()  method. Implementors MAY have special handling for the passed\n  objects. If that is not the case, implementors MUST cast it to a string.    The message MAY contain placeholders which implementors MAY replace with\n  values from the context array.    Placeholder names MUST correspond to keys in the context array.  Placeholder names MUST be delimited with a single opening brace  {  and\n  a single closing brace  } . There MUST NOT be any whitespace between the\n  delimiters and the placeholder name.  Placeholder names SHOULD be composed only of the characters  A-Z ,  a-z ,\n   0-9 , underscore  _ , and period  . . The use of other characters is\n  reserved for future modifications of the placeholders specification.  Implementors MAY use placeholders to implement various escaping strategies\n  and translate logs for display. Users SHOULD NOT pre-escape placeholder\n  values since they can not know in which context the data will be displayed.  The following is an example implementation of placeholder interpolation\n  provided for reference purposes only:  /**    * Interpolates context values into the message placeholders.    */  function interpolate($message, array $context = array()) {      // build a replacement array with braces around the context keys      $replace = array();      foreach ($context as $key =  $val) {          // check that the value can be casted to string          if (!is_array($val)   (!is_object($val) || method_exists($val,  __toString ))) {              $replace[ {  . $key .  } ] = $val;          }      }      // interpolate replacement values into the message and return      return strtr($message, $replace);  }  // a message with brace-delimited placeholder names  $message =  User {username} created ;  // a context array of placeholder names =  replacement values  $context = array( username  =   bolivar );  // echoes  User bolivar created  echo interpolate($message, $context);", 
            "title": "1.2 Message"
        }, 
        {
            "location": "/php/php-interface/#13-context", 
            "text": "Every method accepts an array as context data. This is meant to hold any\n  extraneous information that does not fit well in a string. The array can\n  contain anything. Implementors MUST ensure they treat context data with\n  as much lenience as possible. A given value in the context MUST NOT throw\n  an exception nor raise any php error, warning or notice.    If an  Exception  object is passed in the context data, it MUST be in the\n   'exception'  key. Logging exceptions is a common pattern and this allows\n  implementors to extract a stack trace from the exception when the log\n  backend supports it. Implementors MUST still verify that the  'exception' \n  key is actually an  Exception  before using it as such, as it MAY contain\n  anything.", 
            "title": "1.3 Context"
        }, 
        {
            "location": "/php/php-interface/#14-helper-classes-and-interfaces", 
            "text": "The  Psr\\Log\\AbstractLogger  class lets you implement the  LoggerInterface \n  very easily by extending it and implementing the generic  log  method.\n  The other eight methods are forwarding the message and context to it.    Similarly, using the  Psr\\Log\\LoggerTrait  only requires you to\n  implement the generic  log  method. Note that since traits can not implement\n  interfaces, in this case you still have to implement  LoggerInterface .    The  Psr\\Log\\NullLogger  is provided together with the interface. It MAY be\n  used by users of the interface to provide a fall-back \"black hole\"\n  implementation if no logger is given to them. However, conditional logging\n  may be a better approach if context data creation is expensive.    The  Psr\\Log\\LoggerAwareInterface  only contains a\n   setLogger(LoggerInterface $logger)  method and can be used by frameworks to\n  auto-wire arbitrary instances with a logger.    The  Psr\\Log\\LoggerAwareTrait  trait can be used to implement the equivalent\n  interface easily in any class. It gives you access to  $this- logger .    The  Psr\\Log\\LogLevel  class holds constants for the eight log levels.", 
            "title": "1.4 Helper classes and interfaces"
        }, 
        {
            "location": "/php/php-interface/#2-package", 
            "text": "The interfaces and classes described as well as relevant exception classes\nand a test suite to verify your implementation are provided as part of the psr/log  package.", 
            "title": "2. Package"
        }, 
        {
            "location": "/php/php-interface/#3-psrlogloggerinterface", 
            "text": "?php  namespace   Psr\\Log ;  /**   * Describes a logger instance   *   * The message MUST be a string or object implementing __toString().   *   * The message MAY contain placeholders in the form: {foo} where foo   * will be replaced by the context data in key  foo .   *   * The context array can contain arbitrary data, the only assumption that   * can be made by implementors is that if an Exception instance is given   * to produce a stack trace, it MUST be in a key named  exception .   *   * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md   * for the full interface specification.   */  interface   LoggerInterface  { \n     /**       * System is unusable.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   emergency ( $message ,   array   $context   =   array ()); \n\n     /**       * Action must be taken immediately.       *       * Example: Entire website down, database unavailable, etc. This should       * trigger the SMS alerts and wake you up.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   alert ( $message ,   array   $context   =   array ()); \n\n     /**       * Critical conditions.       *       * Example: Application component unavailable, unexpected exception.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   critical ( $message ,   array   $context   =   array ()); \n\n     /**       * Runtime errors that do not require immediate action but should typically       * be logged and monitored.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   error ( $message ,   array   $context   =   array ()); \n\n     /**       * Exceptional occurrences that are not errors.       *       * Example: Use of deprecated APIs, poor use of an API, undesirable things       * that are not necessarily wrong.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   warning ( $message ,   array   $context   =   array ()); \n\n     /**       * Normal but significant events.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   notice ( $message ,   array   $context   =   array ()); \n\n     /**       * Interesting events.       *       * Example: User logs in, SQL logs.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   info ( $message ,   array   $context   =   array ()); \n\n     /**       * Detailed debug information.       *       * @param string $message       * @param array $context       * @return null       */ \n     public   function   debug ( $message ,   array   $context   =   array ()); \n\n     /**       * Logs with an arbitrary level.       *       * @param mixed $level       * @param string $message       * @param array $context       * @return null       */ \n     public   function   log ( $level ,   $message ,   array   $context   =   array ());  }", 
            "title": "3. Psr\\Log\\LoggerInterface"
        }, 
        {
            "location": "/php/php-interface/#4-psrlogloggerawareinterface", 
            "text": "?php  namespace   Psr\\Log ;  /**   * Describes a logger-aware instance   */  interface   LoggerAwareInterface  { \n     /**       * Sets a logger instance on the object       *       * @param LoggerInterface $logger       * @return null       */ \n     public   function   setLogger ( LoggerInterface   $logger );  }", 
            "title": "4. Psr\\Log\\LoggerAwareInterface"
        }, 
        {
            "location": "/php/php-interface/#5-psrlogloglevel", 
            "text": "?php  namespace   Psr\\Log ;  /**   * Describes log levels   */  class   LogLevel  { \n     const   EMERGENCY   =   emergency ; \n     const   ALERT       =   alert ; \n     const   CRITICAL    =   critical ; \n     const   ERROR       =   error ; \n     const   WARNING     =   warning ; \n     const   NOTICE      =   notice ; \n     const   INFO        =   info ; \n     const   DEBUG       =   debug ;  }", 
            "title": "5. Psr\\Log\\LogLevel"
        }, 
        {
            "location": "/php/php-autoloader/", 
            "text": "Autoloader\n\n\n1. Overview\n\n\nThis PSR describes a specification for \nautoloading\n classes from file\npaths. It is fully interoperable, and can be used in addition to any other\nautoloading specification, including \nPSR-0\n. This PSR also describes where\nto place files that will be autoloaded according to the specification.\n\n\n2. Specification\n\n\n\n\n\n\nThe term \"class\" refers to classes, interfaces, traits, and other similar\n   structures.\n\n\n\n\n\n\nA fully qualified class name has the following form:\n\n\n\\\nNamespaceName\n(\\\nSubNamespaceNames\n)*\\\nClassName\n\n\n\n\n\n\n\n\n\n\nThe fully qualified class name MUST have a top-level namespace name,\n   also known as a \"vendor namespace\".\n\n\n\n\n\n\nThe fully qualified class name MAY have one or more sub-namespace\n   names.\n\n\n\n\n\n\nThe fully qualified class name MUST have a terminating class name.\n\n\n\n\n\n\nUnderscores have no special meaning in any portion of the fully\n   qualified class name.\n\n\n\n\n\n\nAlphabetic characters in the fully qualified class name MAY be any\n   combination of lower case and upper case.\n\n\n\n\n\n\nAll class names MUST be referenced in a case-sensitive fashion.\n\n\n\n\n\n\n\n\n\n\nWhen loading a file that corresponds to a fully qualified class name ...\n\n\n\n\n\n\nA contiguous series of one or more leading namespace and sub-namespace\n   names, not including the leading namespace separator, in the fully\n   qualified class name (a \"namespace prefix\") corresponds to at least one\n   \"base directory\".\n\n\n\n\n\n\nThe contiguous sub-namespace names after the \"namespace prefix\"\n   correspond to a subdirectory within a \"base directory\", in which the\n   namespace separators represent directory separators. The subdirectory\n   name MUST match the case of the sub-namespace names.\n\n\n\n\n\n\nThe terminating class name corresponds to a file name ending in \n.php\n.\n   The file name MUST match the case of the terminating class name.\n\n\n\n\n\n\n\n\n\n\nAutoloader implementations MUST NOT throw exceptions, MUST NOT raise errors\n   of any level, and SHOULD NOT return a value.\n\n\n\n\n\n\n3. Examples\n\n\nThe table below shows the corresponding file path for a given fully qualified\nclass name, namespace prefix, and base directory.\n\n\n\n\n\n\n\n\nFully Qualified Class Name\n\n\nNamespace Prefix\n\n\nBase Directory\n\n\nResulting File Path\n\n\n\n\n\n\n\n\n\n\n\\Acme\\Log\\Writer\\File_Writer\n\n\nAcme\\Log\\Writer\n\n\n./acme-log-writer/lib/\n\n\n./acme-log-writer/lib/File_Writer.php\n\n\n\n\n\n\n\\Aura\\Web\\Response\\Status\n\n\nAura\\Web\n\n\n/path/to/aura-web/src/\n\n\n/path/to/aura-web/src/Response/Status.php\n\n\n\n\n\n\n\\Symfony\\Core\\Request\n\n\nSymfony\\Core\n\n\n./vendor/Symfony/Core/\n\n\n./vendor/Symfony/Core/Request.php\n\n\n\n\n\n\n\\Zend\\Acl\n\n\nZend\n\n\n/usr/includes/Zend/\n\n\n/usr/includes/Zend/Acl.php\n\n\n\n\n\n\n\n\nFor example implementations of autoloaders conforming to the specification,\nplease see the \nexamples file\n. Example implementations MUST NOT be regarded\nas part of the specification and MAY change at any time.", 
            "title": "Autoloader"
        }, 
        {
            "location": "/php/php-autoloader/#autoloader", 
            "text": "", 
            "title": "Autoloader"
        }, 
        {
            "location": "/php/php-autoloader/#1-overview", 
            "text": "This PSR describes a specification for  autoloading  classes from file\npaths. It is fully interoperable, and can be used in addition to any other\nautoloading specification, including  PSR-0 . This PSR also describes where\nto place files that will be autoloaded according to the specification.", 
            "title": "1. Overview"
        }, 
        {
            "location": "/php/php-autoloader/#2-specification", 
            "text": "The term \"class\" refers to classes, interfaces, traits, and other similar\n   structures.    A fully qualified class name has the following form:  \\ NamespaceName (\\ SubNamespaceNames )*\\ ClassName     The fully qualified class name MUST have a top-level namespace name,\n   also known as a \"vendor namespace\".    The fully qualified class name MAY have one or more sub-namespace\n   names.    The fully qualified class name MUST have a terminating class name.    Underscores have no special meaning in any portion of the fully\n   qualified class name.    Alphabetic characters in the fully qualified class name MAY be any\n   combination of lower case and upper case.    All class names MUST be referenced in a case-sensitive fashion.      When loading a file that corresponds to a fully qualified class name ...    A contiguous series of one or more leading namespace and sub-namespace\n   names, not including the leading namespace separator, in the fully\n   qualified class name (a \"namespace prefix\") corresponds to at least one\n   \"base directory\".    The contiguous sub-namespace names after the \"namespace prefix\"\n   correspond to a subdirectory within a \"base directory\", in which the\n   namespace separators represent directory separators. The subdirectory\n   name MUST match the case of the sub-namespace names.    The terminating class name corresponds to a file name ending in  .php .\n   The file name MUST match the case of the terminating class name.      Autoloader implementations MUST NOT throw exceptions, MUST NOT raise errors\n   of any level, and SHOULD NOT return a value.", 
            "title": "2. Specification"
        }, 
        {
            "location": "/php/php-autoloader/#3-examples", 
            "text": "The table below shows the corresponding file path for a given fully qualified\nclass name, namespace prefix, and base directory.     Fully Qualified Class Name  Namespace Prefix  Base Directory  Resulting File Path      \\Acme\\Log\\Writer\\File_Writer  Acme\\Log\\Writer  ./acme-log-writer/lib/  ./acme-log-writer/lib/File_Writer.php    \\Aura\\Web\\Response\\Status  Aura\\Web  /path/to/aura-web/src/  /path/to/aura-web/src/Response/Status.php    \\Symfony\\Core\\Request  Symfony\\Core  ./vendor/Symfony/Core/  ./vendor/Symfony/Core/Request.php    \\Zend\\Acl  Zend  /usr/includes/Zend/  /usr/includes/Zend/Acl.php     For example implementations of autoloaders conforming to the specification,\nplease see the  examples file . Example implementations MUST NOT be regarded\nas part of the specification and MAY change at any time.", 
            "title": "3. Examples"
        }, 
        {
            "location": "/php/php-cache/", 
            "text": "Introduction\n\n\nCaching is a common way to improve the performance of any project, making\ncaching libraries one of the most common features of many frameworks and\nlibraries. This has lead to a situation where many libraries roll their own\ncaching libraries, with various levels of functionality. These differences are\ncausing developers to have to learn multiple systems which may or may not\nprovide the functionality they need. In addition, the developers of caching\nlibraries themselves face a choice between only supporting a limited number\nof frameworks or creating a large number of adapter classes.\n\n\nA common interface for caching systems will solve these problems. Library and\nframework developers can count on the caching systems working the way they're\nexpecting, while the developers of caching systems will only have to implement\na single set of interfaces rather than a whole assortment of adapters.\n\n\nGoal\n\n\n\n\nThe goal of this PSR is to allow developers to create cache-aware libraries that\ncan be integrated into existing frameworks and systems without the need for\ncustom development.\n\n\n\n\nDefinitions\n\n\n\n\n\n\nCalling Library\n - The library or code that actually needs the cache\nservices. This library will utilize caching services that implement this\nstandard's interfaces, but will otherwise have no knowledge of the\nimplementation of those caching services.\n\n\n\n\n\n\nImplementing Library\n - This library is responsible for implementing\nthis standard in order to provide caching services to any Calling Library. The\nImplementing Library MUST provide classes which implement the\nCache\\CacheItemPoolInterface and Cache\\CacheItemInterface interfaces.\nImplementing Libraries MUST support at minimum TTL functionality as described\nbelow with whole-second granularity.\n\n\n\n\n\n\nTTL\n - The Time To Live (TTL) of an item is the amount of time between\nwhen that item is stored and it is considered stale. The TTL is normally defined\nby an integer representing time in seconds, or a DateInterval object.\n\n\n\n\n\n\nExpiration\n - The actual time when an item is set to go stale. This it\ntypically calculated by adding the TTL to the time when an object is stored, but\nmay also be explicitly set with DateTime object.\n\n\nAn item with a 300 second TTL stored at 1:30:00 will have an expiration of\n1:35:00.\n\n\nImplementing Libraries MAY expire an item before its requested Expiration Time,\nbut MUST treat an item as expired once its Expiration Time is reached. If a calling\nlibrary asks for an item to be saved but does not specify an expiration time, or\nspecifies a null expiration time or TTL, an Implementing Library MAY use a configured\ndefault duration. If no default duration has been set, the Implementing Library\nMUST interpret that as a request to cache the item forever, or for as long as the\nunderlying implementation supports.\n\n\n\n\n\n\nKey\n - A string of at least one character that uniquely identifies a\ncached item. Implementing libraries MUST support keys consisting of the\ncharacters \nA-Z\n, \na-z\n, \n0-9\n, \n_\n, and \n.\n in any order in UTF-8 encoding and a\nlength of up to 64 characters. Implementing libraries MAY support additional\ncharacters and encodings or longer lengths, but must support at least that\nminimum.  Libraries are responsible for their own escaping of key strings\nas appropriate, but MUST be able to return the original unmodified key string.\nThe following characters are reserved for future extensions and MUST NOT be\nsupported by implementing libraries: \n{}()/\\@:\n\n\n\n\n\n\nHit\n - A cache hit occurs when a Calling Library requests an Item by key\nand a matching value is found for that key, and that value has not expired, and\nthe value is not invalid for some other reason. Calling Libraries SHOULD make\nsure to verify isHit() on all get() calls.\n\n\n\n\n\n\nMiss\n - A cache miss is the opposite of a cache hit. A cache miss occurs\nwhen a Calling Library requests an item by key and that value not found for that\nkey, or the value was found but has expired, or the value is invalid for some\nother reason. An expired value MUST always be considered a cache miss.\n\n\n\n\n\n\nDeferred\n - A deferred cache save indicates that a cache item may not be\npersisted immediately by the pool. A Pool object MAY delay persisting a deferred\ncache item in order to take advantage of bulk-set operations supported by some\nstorage engines. A Pool MUST ensure that any deferred cache items are eventually\npersisted and data is not lost, and MAY persist them before a Calling Library\nrequests that they be persisted. When a Calling Library invokes the commit()\nmethod all outstanding deferred items MUST be persisted. An Implementing Library\nMAY use whatever logic is appropriate to determine when to persist deferred\nitems, such as an object destructor, persisting all on save(), a timeout or\nmax-items check or any other appropriate logic. Requests for a cache item that\nhas been deferred MUST return the deferred but not-yet-persisted item.\n\n\n\n\n\n\nData\n\n\nImplementing libraries MUST support all serializable PHP data types, including:\n\n\n\n\nStrings\n - Character strings of arbitrary size in any PHP-compatible encoding.\n\n\nIntegers\n - All integers of any size supported by PHP, up to 64-bit signed.\n\n\nFloats\n - All signed floating point values.\n\n\nBoolean\n - True and False.\n\n\nNull\n - The actual null value.\n\n\nArrays\n - Indexed, associative and multidimensional arrays of arbitrary depth.\n\n\nObject\n - Any object that supports lossless serialization and\ndeserialization such that $o == unserialize(serialize($o)). Objects MAY\nleverage PHP's Serializable interface, \n__sleep()\n or \n__wakeup()\n magic methods,\nor similar language functionality if appropriate.\n\n\n\n\nAll data passed into the Implementing Library MUST be returned exactly as\npassed. That includes the variable type. That is, it is an error to return\n(string) 5 if (int) 5 was the value saved.  Implementing Libraries MAY use PHP's\nserialize()/unserialize() functions internally but are not required to do so.\nCompatibility with them is simply used as a baseline for acceptable object values.\n\n\nIf it is not possible to return the exact saved value for any reason, implementing\nlibraries MUST respond with a cache miss rather than corrupted data.\n\n\nKey Concepts\n\n\nPool\n\n\nThe Pool represents a collection of items in a caching system. The pool is\na logical Repository of all items it contains.  All cacheable items are retrieved\nfrom the Pool as an Item object, and all interaction with the whole universe of\ncached objects happens through the Pool.\n\n\nItems\n\n\nAn Item represents a single key/value pair within a Pool. The key is the primary\nunique identifier for an Item and MUST be immutable. The Value MAY be changed\nat any time.\n\n\nError handling\n\n\nWhile caching is often an important part of application performance, it should never\nbe a critical part of application functionality. Thus, an error in a cache system SHOULD NOT\nresult in application failure.  For that reason, Implementing Libraries MUST NOT\nthrow exceptions other than those defined by the interface, and SHOULD trap any errors\nor exceptions triggered by an underlying data store and not allow them to bubble.\n\n\nAn Implementing Library SHOULD log such errors or otherwise report them to an\nadministrator as appropriate.\n\n\nIf a Calling Library requests that one or more Items be deleted, or that a pool be cleared,\nit MUST NOT be considered an error condition if the specified key does not exist. The\npost-condition is the same (the key does not exist, or the pool is empty), thus there is\nno error condition.\n\n\nInterfaces\n\n\nCacheItemInterface\n\n\nCacheItemInterface defines an item inside a cache system.  Each Item object\nMUST be associated with a specific key, which can be set according to the\nimplementing system and is typically passed by the Cache\\CacheItemPoolInterface\nobject.\n\n\nThe Cache\\CacheItemInterface object encapsulates the storage and retrieval of\ncache items. Each Cache\\CacheItemInterface is generated by a\nCache\\CacheItemPoolInterface object, which is responsible for any required\nsetup as well as associating the object with a unique Key.\nCache\\CacheItemInterface objects MUST be able to store and retrieve any type of\nPHP value defined in the Data section of this document.\n\n\nCalling Libraries MUST NOT instantiate Item objects themselves. They may only\nbe requested from a Pool object via the getItem() method.  Calling Libraries\nSHOULD NOT assume that an Item created by one Implementing Library is\ncompatible with a Pool from another Implementing Library.\n\n\n?php\n\n\n\nnamespace\n \nPsr\\Cache\n;\n\n\n\n/**\n\n\n * CacheItemInterface defines an interface for interacting with objects inside a cache.\n\n\n */\n\n\ninterface\n \nCacheItemInterface\n\n\n{\n\n    \n/**\n\n\n     * Returns the key for the current cache item.\n\n\n     *\n\n\n     * The key is loaded by the Implementing Library, but should be available to\n\n\n     * the higher level callers when needed.\n\n\n     *\n\n\n     * @return string\n\n\n     *   The key string for this cache item.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetKey\n();\n\n\n    \n/**\n\n\n     * Retrieves the value of the item from the cache associated with this object\ns key.\n\n\n     *\n\n\n     * The value returned must be identical to the value originally stored by set().\n\n\n     *\n\n\n     * If isHit() returns false, this method MUST return null. Note that null\n\n\n     * is a legitimate cached value, so the isHit() method SHOULD be used to\n\n\n     * differentiate between \nnull value was found\n and \nno value was found.\n\n\n     *\n\n\n     * @return mixed\n\n\n     *   The value corresponding to this cache item\ns key, or null if not found.\n\n\n     */\n\n    \npublic\n \nfunction\n \nget\n();\n\n\n    \n/**\n\n\n     * Confirms if the cache item lookup resulted in a cache hit.\n\n\n     *\n\n\n     * Note: This method MUST NOT have a race condition between calling isHit()\n\n\n     * and calling get().\n\n\n     *\n\n\n     * @return bool\n\n\n     *   True if the request resulted in a cache hit. False otherwise.\n\n\n     */\n\n    \npublic\n \nfunction\n \nisHit\n();\n\n\n    \n/**\n\n\n     * Sets the value represented by this cache item.\n\n\n     *\n\n\n     * The $value argument may be any item that can be serialized by PHP,\n\n\n     * although the method of serialization is left up to the Implementing\n\n\n     * Library.\n\n\n     *\n\n\n     * @param mixed $value\n\n\n     *   The serializable value to be stored.\n\n\n     *\n\n\n     * @return static\n\n\n     *   The invoked object.\n\n\n     */\n\n    \npublic\n \nfunction\n \nset\n(\n$value\n);\n\n\n    \n/**\n\n\n     * Sets the expiration time for this cache item.\n\n\n     *\n\n\n     * @param \\DateTimeInterface|null $expiration\n\n\n     *   The point in time after which the item MUST be considered expired.\n\n\n     *   If null is passed explicitly, a default value MAY be used. If none is set,\n\n\n     *   the value should be stored permanently or for as long as the\n\n\n     *   implementation allows.\n\n\n     *\n\n\n     * @return static\n\n\n     *   The called object.\n\n\n     */\n\n    \npublic\n \nfunction\n \nexpiresAt\n(\n$expiration\n);\n\n\n    \n/**\n\n\n     * Sets the expiration time for this cache item.\n\n\n     *\n\n\n     * @param int|\\DateInterval|null $time\n\n\n     *   The period of time from the present after which the item MUST be considered\n\n\n     *   expired. An integer parameter is understood to be the time in seconds until\n\n\n     *   expiration. If null is passed explicitly, a default value MAY be used.\n\n\n     *   If none is set, the value should be stored permanently or for as long as the\n\n\n     *   implementation allows.\n\n\n     *\n\n\n     * @return static\n\n\n     *   The called object.\n\n\n     */\n\n    \npublic\n \nfunction\n \nexpiresAfter\n(\n$time\n);\n\n\n\n}\n\n\n\n\n\n\nCacheItemPoolInterface\n\n\nThe primary purpose of Cache\\CacheItemPoolInterface is to accept a key from the\nCalling Library and return the associated Cache\\CacheItemInterface object.\nIt is also the primary point of interaction with the entire cache collection.\nAll configuration and initialization of the Pool is left up to an Implementing\nLibrary.\n\n\n?php\n\n\n\nnamespace\n \nPsr\\Cache\n;\n\n\n\n/**\n\n\n * CacheItemPoolInterface generates CacheItemInterface objects.\n\n\n */\n\n\ninterface\n \nCacheItemPoolInterface\n\n\n{\n\n    \n/**\n\n\n     * Returns a Cache Item representing the specified key.\n\n\n     *\n\n\n     * This method must always return a CacheItemInterface object, even in case of\n\n\n     * a cache miss. It MUST NOT return null.\n\n\n     *\n\n\n     * @param string $key\n\n\n     *   The key for which to return the corresponding Cache Item.\n\n\n     *\n\n\n     * @throws InvalidArgumentException\n\n\n     *   If the $key string is not a legal value a \\Psr\\Cache\\InvalidArgumentException\n\n\n     *   MUST be thrown.\n\n\n     *\n\n\n     * @return CacheItemInterface\n\n\n     *   The corresponding Cache Item.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetItem\n(\n$key\n);\n\n\n    \n/**\n\n\n     * Returns a traversable set of cache items.\n\n\n     *\n\n\n     * @param string[] $keys\n\n\n     *   An indexed array of keys of items to retrieve.\n\n\n     *\n\n\n     * @throws InvalidArgumentException\n\n\n     *   If any of the keys in $keys are not a legal value a \\Psr\\Cache\\InvalidArgumentException\n\n\n     *   MUST be thrown.\n\n\n     *\n\n\n     * @return array|\\Traversable\n\n\n     *   A traversable collection of Cache Items keyed by the cache keys of\n\n\n     *   each item. A Cache item will be returned for each key, even if that\n\n\n     *   key is not found. However, if no keys are specified then an empty\n\n\n     *   traversable MUST be returned instead.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetItems\n(\narray\n \n$keys\n \n=\n \narray\n());\n\n\n    \n/**\n\n\n     * Confirms if the cache contains specified cache item.\n\n\n     *\n\n\n     * Note: This method MAY avoid retrieving the cached value for performance reasons.\n\n\n     * This could result in a race condition with CacheItemInterface::get(). To avoid\n\n\n     * such situation use CacheItemInterface::isHit() instead.\n\n\n     *\n\n\n     * @param string $key\n\n\n     *   The key for which to check existence.\n\n\n     *\n\n\n     * @throws InvalidArgumentException\n\n\n     *   If the $key string is not a legal value a \\Psr\\Cache\\InvalidArgumentException\n\n\n     *   MUST be thrown.\n\n\n     *\n\n\n     * @return bool\n\n\n     *   True if item exists in the cache, false otherwise.\n\n\n     */\n\n    \npublic\n \nfunction\n \nhasItem\n(\n$key\n);\n\n\n    \n/**\n\n\n     * Deletes all items in the pool.\n\n\n     *\n\n\n     * @return bool\n\n\n     *   True if the pool was successfully cleared. False if there was an error.\n\n\n     */\n\n    \npublic\n \nfunction\n \nclear\n();\n\n\n    \n/**\n\n\n     * Removes the item from the pool.\n\n\n     *\n\n\n     * @param string $key\n\n\n     *   The key to delete.\n\n\n     *\n\n\n     * @throws InvalidArgumentException\n\n\n     *   If the $key string is not a legal value a \\Psr\\Cache\\InvalidArgumentException\n\n\n     *   MUST be thrown.\n\n\n     *\n\n\n     * @return bool\n\n\n     *   True if the item was successfully removed. False if there was an error.\n\n\n     */\n\n    \npublic\n \nfunction\n \ndeleteItem\n(\n$key\n);\n\n\n    \n/**\n\n\n     * Removes multiple items from the pool.\n\n\n     *\n\n\n     * @param string[] $keys\n\n\n     *   An array of keys that should be removed from the pool.\n\n\n\n     * @throws InvalidArgumentException\n\n\n     *   If any of the keys in $keys are not a legal value a \\Psr\\Cache\\InvalidArgumentException\n\n\n     *   MUST be thrown.\n\n\n     *\n\n\n     * @return bool\n\n\n     *   True if the items were successfully removed. False if there was an error.\n\n\n     */\n\n    \npublic\n \nfunction\n \ndeleteItems\n(\narray\n \n$keys\n);\n\n\n    \n/**\n\n\n     * Persists a cache item immediately.\n\n\n     *\n\n\n     * @param CacheItemInterface $item\n\n\n     *   The cache item to save.\n\n\n     *\n\n\n     * @return bool\n\n\n     *   True if the item was successfully persisted. False if there was an error.\n\n\n     */\n\n    \npublic\n \nfunction\n \nsave\n(\nCacheItemInterface\n \n$item\n);\n\n\n    \n/**\n\n\n     * Sets a cache item to be persisted later.\n\n\n     *\n\n\n     * @param CacheItemInterface $item\n\n\n     *   The cache item to save.\n\n\n     *\n\n\n     * @return bool\n\n\n     *   False if the item could not be queued or if a commit was attempted and failed. True otherwise.\n\n\n     */\n\n    \npublic\n \nfunction\n \nsaveDeferred\n(\nCacheItemInterface\n \n$item\n);\n\n\n    \n/**\n\n\n     * Persists any deferred cache items.\n\n\n     *\n\n\n     * @return bool\n\n\n     *   True if all not-yet-saved items were successfully saved or there were none. False otherwise.\n\n\n     */\n\n    \npublic\n \nfunction\n \ncommit\n();\n\n\n}\n\n\n\n\n\n\nCacheException\n\n\nThis exception interface is intended for use when critical errors occur,\nincluding but not limited to \ncache setup\n such as connecting to a cache server\nor invalid credentials supplied.\n\n\nAny exception thrown by an Implementing Library MUST implement this interface.\n\n\n?php\n\n\n\nnamespace\n \nPsr\\Cache\n;\n\n\n\n/**\n\n\n * Exception interface for all exceptions thrown by an Implementing Library.\n\n\n */\n\n\ninterface\n \nCacheException\n\n\n{\n\n\n}\n\n\n\n\n\n\nInvalidArgumentException\n\n\n?php\n\n\n\nnamespace\n \nPsr\\Cache\n;\n\n\n\n/**\n\n\n * Exception interface for invalid cache arguments.\n\n\n *\n\n\n * Any time an invalid argument is passed into a method it must throw an\n\n\n * exception class which implements Psr\\Cache\\InvalidArgumentException.\n\n\n */\n\n\ninterface\n \nInvalidArgumentException\n \nextends\n \nCacheException\n\n\n{\n\n\n}", 
            "title": "Cache"
        }, 
        {
            "location": "/php/php-cache/#introduction", 
            "text": "Caching is a common way to improve the performance of any project, making\ncaching libraries one of the most common features of many frameworks and\nlibraries. This has lead to a situation where many libraries roll their own\ncaching libraries, with various levels of functionality. These differences are\ncausing developers to have to learn multiple systems which may or may not\nprovide the functionality they need. In addition, the developers of caching\nlibraries themselves face a choice between only supporting a limited number\nof frameworks or creating a large number of adapter classes.  A common interface for caching systems will solve these problems. Library and\nframework developers can count on the caching systems working the way they're\nexpecting, while the developers of caching systems will only have to implement\na single set of interfaces rather than a whole assortment of adapters.", 
            "title": "Introduction"
        }, 
        {
            "location": "/php/php-cache/#goal", 
            "text": "The goal of this PSR is to allow developers to create cache-aware libraries that\ncan be integrated into existing frameworks and systems without the need for\ncustom development.", 
            "title": "Goal"
        }, 
        {
            "location": "/php/php-cache/#definitions", 
            "text": "Calling Library  - The library or code that actually needs the cache\nservices. This library will utilize caching services that implement this\nstandard's interfaces, but will otherwise have no knowledge of the\nimplementation of those caching services.    Implementing Library  - This library is responsible for implementing\nthis standard in order to provide caching services to any Calling Library. The\nImplementing Library MUST provide classes which implement the\nCache\\CacheItemPoolInterface and Cache\\CacheItemInterface interfaces.\nImplementing Libraries MUST support at minimum TTL functionality as described\nbelow with whole-second granularity.    TTL  - The Time To Live (TTL) of an item is the amount of time between\nwhen that item is stored and it is considered stale. The TTL is normally defined\nby an integer representing time in seconds, or a DateInterval object.    Expiration  - The actual time when an item is set to go stale. This it\ntypically calculated by adding the TTL to the time when an object is stored, but\nmay also be explicitly set with DateTime object.  An item with a 300 second TTL stored at 1:30:00 will have an expiration of\n1:35:00.  Implementing Libraries MAY expire an item before its requested Expiration Time,\nbut MUST treat an item as expired once its Expiration Time is reached. If a calling\nlibrary asks for an item to be saved but does not specify an expiration time, or\nspecifies a null expiration time or TTL, an Implementing Library MAY use a configured\ndefault duration. If no default duration has been set, the Implementing Library\nMUST interpret that as a request to cache the item forever, or for as long as the\nunderlying implementation supports.    Key  - A string of at least one character that uniquely identifies a\ncached item. Implementing libraries MUST support keys consisting of the\ncharacters  A-Z ,  a-z ,  0-9 ,  _ , and  .  in any order in UTF-8 encoding and a\nlength of up to 64 characters. Implementing libraries MAY support additional\ncharacters and encodings or longer lengths, but must support at least that\nminimum.  Libraries are responsible for their own escaping of key strings\nas appropriate, but MUST be able to return the original unmodified key string.\nThe following characters are reserved for future extensions and MUST NOT be\nsupported by implementing libraries:  {}()/\\@:    Hit  - A cache hit occurs when a Calling Library requests an Item by key\nand a matching value is found for that key, and that value has not expired, and\nthe value is not invalid for some other reason. Calling Libraries SHOULD make\nsure to verify isHit() on all get() calls.    Miss  - A cache miss is the opposite of a cache hit. A cache miss occurs\nwhen a Calling Library requests an item by key and that value not found for that\nkey, or the value was found but has expired, or the value is invalid for some\nother reason. An expired value MUST always be considered a cache miss.    Deferred  - A deferred cache save indicates that a cache item may not be\npersisted immediately by the pool. A Pool object MAY delay persisting a deferred\ncache item in order to take advantage of bulk-set operations supported by some\nstorage engines. A Pool MUST ensure that any deferred cache items are eventually\npersisted and data is not lost, and MAY persist them before a Calling Library\nrequests that they be persisted. When a Calling Library invokes the commit()\nmethod all outstanding deferred items MUST be persisted. An Implementing Library\nMAY use whatever logic is appropriate to determine when to persist deferred\nitems, such as an object destructor, persisting all on save(), a timeout or\nmax-items check or any other appropriate logic. Requests for a cache item that\nhas been deferred MUST return the deferred but not-yet-persisted item.", 
            "title": "Definitions"
        }, 
        {
            "location": "/php/php-cache/#data", 
            "text": "Implementing libraries MUST support all serializable PHP data types, including:   Strings  - Character strings of arbitrary size in any PHP-compatible encoding.  Integers  - All integers of any size supported by PHP, up to 64-bit signed.  Floats  - All signed floating point values.  Boolean  - True and False.  Null  - The actual null value.  Arrays  - Indexed, associative and multidimensional arrays of arbitrary depth.  Object  - Any object that supports lossless serialization and\ndeserialization such that $o == unserialize(serialize($o)). Objects MAY\nleverage PHP's Serializable interface,  __sleep()  or  __wakeup()  magic methods,\nor similar language functionality if appropriate.   All data passed into the Implementing Library MUST be returned exactly as\npassed. That includes the variable type. That is, it is an error to return\n(string) 5 if (int) 5 was the value saved.  Implementing Libraries MAY use PHP's\nserialize()/unserialize() functions internally but are not required to do so.\nCompatibility with them is simply used as a baseline for acceptable object values.  If it is not possible to return the exact saved value for any reason, implementing\nlibraries MUST respond with a cache miss rather than corrupted data.", 
            "title": "Data"
        }, 
        {
            "location": "/php/php-cache/#key-concepts", 
            "text": "", 
            "title": "Key Concepts"
        }, 
        {
            "location": "/php/php-cache/#pool", 
            "text": "The Pool represents a collection of items in a caching system. The pool is\na logical Repository of all items it contains.  All cacheable items are retrieved\nfrom the Pool as an Item object, and all interaction with the whole universe of\ncached objects happens through the Pool.", 
            "title": "Pool"
        }, 
        {
            "location": "/php/php-cache/#items", 
            "text": "An Item represents a single key/value pair within a Pool. The key is the primary\nunique identifier for an Item and MUST be immutable. The Value MAY be changed\nat any time.", 
            "title": "Items"
        }, 
        {
            "location": "/php/php-cache/#error-handling", 
            "text": "While caching is often an important part of application performance, it should never\nbe a critical part of application functionality. Thus, an error in a cache system SHOULD NOT\nresult in application failure.  For that reason, Implementing Libraries MUST NOT\nthrow exceptions other than those defined by the interface, and SHOULD trap any errors\nor exceptions triggered by an underlying data store and not allow them to bubble.  An Implementing Library SHOULD log such errors or otherwise report them to an\nadministrator as appropriate.  If a Calling Library requests that one or more Items be deleted, or that a pool be cleared,\nit MUST NOT be considered an error condition if the specified key does not exist. The\npost-condition is the same (the key does not exist, or the pool is empty), thus there is\nno error condition.", 
            "title": "Error handling"
        }, 
        {
            "location": "/php/php-cache/#interfaces", 
            "text": "", 
            "title": "Interfaces"
        }, 
        {
            "location": "/php/php-cache/#cacheiteminterface", 
            "text": "CacheItemInterface defines an item inside a cache system.  Each Item object\nMUST be associated with a specific key, which can be set according to the\nimplementing system and is typically passed by the Cache\\CacheItemPoolInterface\nobject.  The Cache\\CacheItemInterface object encapsulates the storage and retrieval of\ncache items. Each Cache\\CacheItemInterface is generated by a\nCache\\CacheItemPoolInterface object, which is responsible for any required\nsetup as well as associating the object with a unique Key.\nCache\\CacheItemInterface objects MUST be able to store and retrieve any type of\nPHP value defined in the Data section of this document.  Calling Libraries MUST NOT instantiate Item objects themselves. They may only\nbe requested from a Pool object via the getItem() method.  Calling Libraries\nSHOULD NOT assume that an Item created by one Implementing Library is\ncompatible with a Pool from another Implementing Library.  ?php  namespace   Psr\\Cache ;  /**   * CacheItemInterface defines an interface for interacting with objects inside a cache.   */  interface   CacheItemInterface  { \n     /**       * Returns the key for the current cache item.       *       * The key is loaded by the Implementing Library, but should be available to       * the higher level callers when needed.       *       * @return string       *   The key string for this cache item.       */ \n     public   function   getKey (); \n\n     /**       * Retrieves the value of the item from the cache associated with this object s key.       *       * The value returned must be identical to the value originally stored by set().       *       * If isHit() returns false, this method MUST return null. Note that null       * is a legitimate cached value, so the isHit() method SHOULD be used to       * differentiate between  null value was found  and  no value was found.       *       * @return mixed       *   The value corresponding to this cache item s key, or null if not found.       */ \n     public   function   get (); \n\n     /**       * Confirms if the cache item lookup resulted in a cache hit.       *       * Note: This method MUST NOT have a race condition between calling isHit()       * and calling get().       *       * @return bool       *   True if the request resulted in a cache hit. False otherwise.       */ \n     public   function   isHit (); \n\n     /**       * Sets the value represented by this cache item.       *       * The $value argument may be any item that can be serialized by PHP,       * although the method of serialization is left up to the Implementing       * Library.       *       * @param mixed $value       *   The serializable value to be stored.       *       * @return static       *   The invoked object.       */ \n     public   function   set ( $value ); \n\n     /**       * Sets the expiration time for this cache item.       *       * @param \\DateTimeInterface|null $expiration       *   The point in time after which the item MUST be considered expired.       *   If null is passed explicitly, a default value MAY be used. If none is set,       *   the value should be stored permanently or for as long as the       *   implementation allows.       *       * @return static       *   The called object.       */ \n     public   function   expiresAt ( $expiration ); \n\n     /**       * Sets the expiration time for this cache item.       *       * @param int|\\DateInterval|null $time       *   The period of time from the present after which the item MUST be considered       *   expired. An integer parameter is understood to be the time in seconds until       *   expiration. If null is passed explicitly, a default value MAY be used.       *   If none is set, the value should be stored permanently or for as long as the       *   implementation allows.       *       * @return static       *   The called object.       */ \n     public   function   expiresAfter ( $time );  }", 
            "title": "CacheItemInterface"
        }, 
        {
            "location": "/php/php-cache/#cacheitempoolinterface", 
            "text": "The primary purpose of Cache\\CacheItemPoolInterface is to accept a key from the\nCalling Library and return the associated Cache\\CacheItemInterface object.\nIt is also the primary point of interaction with the entire cache collection.\nAll configuration and initialization of the Pool is left up to an Implementing\nLibrary.  ?php  namespace   Psr\\Cache ;  /**   * CacheItemPoolInterface generates CacheItemInterface objects.   */  interface   CacheItemPoolInterface  { \n     /**       * Returns a Cache Item representing the specified key.       *       * This method must always return a CacheItemInterface object, even in case of       * a cache miss. It MUST NOT return null.       *       * @param string $key       *   The key for which to return the corresponding Cache Item.       *       * @throws InvalidArgumentException       *   If the $key string is not a legal value a \\Psr\\Cache\\InvalidArgumentException       *   MUST be thrown.       *       * @return CacheItemInterface       *   The corresponding Cache Item.       */ \n     public   function   getItem ( $key ); \n\n     /**       * Returns a traversable set of cache items.       *       * @param string[] $keys       *   An indexed array of keys of items to retrieve.       *       * @throws InvalidArgumentException       *   If any of the keys in $keys are not a legal value a \\Psr\\Cache\\InvalidArgumentException       *   MUST be thrown.       *       * @return array|\\Traversable       *   A traversable collection of Cache Items keyed by the cache keys of       *   each item. A Cache item will be returned for each key, even if that       *   key is not found. However, if no keys are specified then an empty       *   traversable MUST be returned instead.       */ \n     public   function   getItems ( array   $keys   =   array ()); \n\n     /**       * Confirms if the cache contains specified cache item.       *       * Note: This method MAY avoid retrieving the cached value for performance reasons.       * This could result in a race condition with CacheItemInterface::get(). To avoid       * such situation use CacheItemInterface::isHit() instead.       *       * @param string $key       *   The key for which to check existence.       *       * @throws InvalidArgumentException       *   If the $key string is not a legal value a \\Psr\\Cache\\InvalidArgumentException       *   MUST be thrown.       *       * @return bool       *   True if item exists in the cache, false otherwise.       */ \n     public   function   hasItem ( $key ); \n\n     /**       * Deletes all items in the pool.       *       * @return bool       *   True if the pool was successfully cleared. False if there was an error.       */ \n     public   function   clear (); \n\n     /**       * Removes the item from the pool.       *       * @param string $key       *   The key to delete.       *       * @throws InvalidArgumentException       *   If the $key string is not a legal value a \\Psr\\Cache\\InvalidArgumentException       *   MUST be thrown.       *       * @return bool       *   True if the item was successfully removed. False if there was an error.       */ \n     public   function   deleteItem ( $key ); \n\n     /**       * Removes multiple items from the pool.       *       * @param string[] $keys       *   An array of keys that should be removed from the pool.       * @throws InvalidArgumentException       *   If any of the keys in $keys are not a legal value a \\Psr\\Cache\\InvalidArgumentException       *   MUST be thrown.       *       * @return bool       *   True if the items were successfully removed. False if there was an error.       */ \n     public   function   deleteItems ( array   $keys ); \n\n     /**       * Persists a cache item immediately.       *       * @param CacheItemInterface $item       *   The cache item to save.       *       * @return bool       *   True if the item was successfully persisted. False if there was an error.       */ \n     public   function   save ( CacheItemInterface   $item ); \n\n     /**       * Sets a cache item to be persisted later.       *       * @param CacheItemInterface $item       *   The cache item to save.       *       * @return bool       *   False if the item could not be queued or if a commit was attempted and failed. True otherwise.       */ \n     public   function   saveDeferred ( CacheItemInterface   $item ); \n\n     /**       * Persists any deferred cache items.       *       * @return bool       *   True if all not-yet-saved items were successfully saved or there were none. False otherwise.       */ \n     public   function   commit ();  }", 
            "title": "CacheItemPoolInterface"
        }, 
        {
            "location": "/php/php-cache/#cacheexception", 
            "text": "This exception interface is intended for use when critical errors occur,\nincluding but not limited to  cache setup  such as connecting to a cache server\nor invalid credentials supplied.  Any exception thrown by an Implementing Library MUST implement this interface.  ?php  namespace   Psr\\Cache ;  /**   * Exception interface for all exceptions thrown by an Implementing Library.   */  interface   CacheException  {  }", 
            "title": "CacheException"
        }, 
        {
            "location": "/php/php-cache/#invalidargumentexception", 
            "text": "?php  namespace   Psr\\Cache ;  /**   * Exception interface for invalid cache arguments.   *   * Any time an invalid argument is passed into a method it must throw an   * exception class which implements Psr\\Cache\\InvalidArgumentException.   */  interface   InvalidArgumentException   extends   CacheException  {  }", 
            "title": "InvalidArgumentException"
        }, 
        {
            "location": "/php/php-http-messages/", 
            "text": "HTTP message interfaces\n\n\nHTTP messages are the foundation of web development. Web browsers and HTTP\nclients such as cURL create HTTP request messages that are sent to a web server,\nwhich provides an HTTP response message. Server-side code receives an HTTP\nrequest message, and returns an HTTP response message.\n\n\nHTTP messages are typically abstracted from the end-user consumer, but as\ndevelopers, we typically need to know how they are structured and how to\naccess or manipulate them in order to perform our tasks, whether that might be\nmaking a request to an HTTP API, or handling an incoming request.\n\n\nEvery HTTP request message has a specific form:\n\n\nPOST\n \n/path\n \nHTTP\n/\n1.1\n\n\nHost\n:\n \nexample.com\n\n\nfoo=bar\nbaz=bat\n\n\n\n\n\nThe first line of a request is the \"request line\", and contains, in order, the\nHTTP request method, the request target (usually either an absolute URI or a\npath on the web server), and the HTTP protocol version. This is followed by one\nor more HTTP headers, an empty line, and the message body.\n\n\nHTTP response messages have a similar structure:\n\n\nHTTP\n/\n1.1\n \n200\n \nOK\n\n\nContent-Type\n:\n \ntext/plain\n\n\nThis is the response body\n\n\n\n\n\nThe first line is the \"status line\", and contains, in order, the HTTP protocol\nversion, the HTTP status code, and a \"reason phrase,\" a human-readable\ndescription of the status code. Like the request message, this is then\nfollowed by one or more HTTP headers, an empty line, and the message body.\n\n\nThe interfaces described in this document are abstractions around HTTP messages\nand the elements composing them.\n\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\n\"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be\ninterpreted as described in \nRFC 2119\n.\n\n\nReferences\n\n\n\n\nRFC 2119\n\n\nRFC 3986\n\n\nRFC 7230\n\n\nRFC 7231\n\n\n\n\n1. Specification\n\n\n1.1 Messages\n\n\nAn HTTP message is either a request from a client to a server or a response from\na server to a client. This specification defines interfaces for the HTTP messages\n\nPsr\\Http\\Message\\RequestInterface\n and \nPsr\\Http\\Message\\ResponseInterface\n respectively.\n\n\nBoth \nPsr\\Http\\Message\\RequestInterface\n and \nPsr\\Http\\Message\\ResponseInterface\n extend\n\nPsr\\Http\\Message\\MessageInterface\n. While \nPsr\\Http\\Message\\MessageInterface\n MAY be\nimplemented directly, implementors SHOULD implement\n\nPsr\\Http\\Message\\RequestInterface\n and \nPsr\\Http\\Message\\ResponseInterface\n.\n\n\nFrom here forward, the namespace \nPsr\\Http\\Message\n will be omitted when\nreferring to these interfaces.\n\n\n1.2 HTTP Headers\n\n\nCase-insensitive header field names\n\n\nHTTP messages include case-insensitive header field names. Headers are retrieved\nby name from classes implementing the \nMessageInterface\n in a case-insensitive\nmanner. For example, retrieving the \nfoo\n header will return the same result as\nretrieving the \nFoO\n header. Similarly, setting the \nFoo\n header will overwrite\nany previously set \nfoo\n header value.\n\n\n$message = $message-\nwithHeader(\nfoo\n, \nbar\n);\n\n\n\necho $message-\ngetHeaderLine(\nfoo\n);\n\n\n// Outputs: bar\n\n\n\necho $message-\ngetHeaderLine(\nFOO\n);\n\n\n// Outputs: bar\n\n\n\n$message = $message-\nwithHeader(\nfOO\n, \nbaz\n);\n\n\necho $message-\ngetHeaderLine(\nfoo\n);\n\n\n// Outputs: baz\n\n\n\n\n\n\nDespite that headers may be retrieved case-insensitively, the original case\nMUST be preserved by the implementation, in particular when retrieved with\n\ngetHeaders()\n.\n\n\nNon-conforming HTTP applications may depend on a certain case, so it is useful\nfor a user to be able to dictate the case of the HTTP headers when creating a\nrequest or response.\n\n\nHeaders with multiple values\n\n\nIn order to accommodate headers with multiple values yet still provide the\nconvenience of working with headers as strings, headers can be retrieved from\nan instance of a \nMessageInterface\n as an array or a string. Use the\n\ngetHeaderLine()\n method to retrieve a header value as a string containing all\nheader values of a case-insensitive header by name concatenated with a comma.\nUse \ngetHeader()\n to retrieve an array of all the header values for a\nparticular case-insensitive header by name.\n\n\n$message = $message\n\n\n    -\nwithHeader(\nfoo\n, \nbar\n)\n\n\n    -\nwithAddedHeader(\nfoo\n, \nbaz\n);\n\n\n\n$header = $message-\ngetHeaderLine(\nfoo\n);\n\n\n// $header contains: \nbar, baz\n\n\n\n$header = $message-\ngetHeader(\nfoo\n);\n\n\n// [\nbar\n, \nbaz\n]\n\n\n\n\n\n\nNote: Not all header values can be concatenated using a comma (e.g.,\n\nSet-Cookie\n). When working with such headers, consumers of\n\nMessageInterface\n-based classes SHOULD rely on the \ngetHeader()\n method\nfor retrieving such multi-valued headers.\n\n\nHost header\n\n\nIn requests, the \nHost\n header typically mirrors the host component of the URI, as\nwell as the host used when establishing the TCP connection. However, the HTTP\nspecification allows the \nHost\n header to differ from each of the two.\n\n\nDuring construction, implementations MUST attempt to set the \nHost\n header from\na provided URI if no \nHost\n header is provided.\n\n\nRequestInterface::withUri()\n will, by default, replace the returned request's\n\nHost\n header with a \nHost\n header matching the host component of the passed\n\nUriInterface\n.\n\n\nYou can opt-in to preserving the original state of the \nHost\n header by passing\n\ntrue\n for the second (\n$preserveHost\n) argument. When this argument is set to\n\ntrue\n, the returned request will not update the \nHost\n header of the returned\nmessage -- unless the message contains no \nHost\n header.\n\n\nThis table illustrates what \ngetHeaderLine('Host')\n will return for a request\nreturned by \nwithUri()\n with the \n$preserveHost\n argument set to \ntrue\n for\nvarious initial requests and URIs.\n\n\n\n\n\n\n\n\nRequest Host header\n1\n\n\nRequest host component\n2\n\n\nURI host component\n3\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n''\n\n\n''\n\n\n''\n\n\n''\n\n\n\n\n\n\n''\n\n\nfoo.com\n\n\n''\n\n\nfoo.com\n\n\n\n\n\n\n''\n\n\nfoo.com\n\n\nbar.com\n\n\nfoo.com\n\n\n\n\n\n\nfoo.com\n\n\n''\n\n\nbar.com\n\n\nfoo.com\n\n\n\n\n\n\nfoo.com\n\n\nbar.com\n\n\nbaz.com\n\n\nfoo.com\n\n\n\n\n\n\n\n\n\n\n1\n \nHost\n header value prior to operation.\n\n\n2\n Host component of the URI composed in the request prior\n  to the operation.\n\n\n3\n Host component of the URI being injected via\n  \nwithUri()\n.\n\n\n\n\n1.3 Streams\n\n\nHTTP messages consist of a start-line, headers, and a body. The body of an HTTP\nmessage can be very small or extremely large. Attempting to represent the body\nof a message as a string can easily consume more memory than intended because\nthe body must be stored completely in memory. Attempting to store the body of a\nrequest or response in memory would preclude the use of that implementation from\nbeing able to work with large message bodies. \nStreamInterface\n is used in\norder to hide the implementation details when a stream of data is read from\nor written to. For situations where a string would be an appropriate message\nimplementation, built-in streams such as \nphp://memory\n and \nphp://temp\n may be\nused.\n\n\nStreamInterface\n exposes several methods that enable streams to be read\nfrom, written to, and traversed effectively.\n\n\nStreams expose their capabilities using three methods: \nisReadable()\n,\n\nisWritable()\n, and \nisSeekable()\n. These methods can be used by stream\ncollaborators to determine if a stream is capable of their requirements.\n\n\nEach stream instance will have various capabilities: it can be read-only,\nwrite-only, or read-write. It can also allow arbitrary random access (seeking\nforwards or backwards to any location), or only sequential access (for\nexample in the case of a socket, pipe, or callback-based stream).\n\n\nFinally, \nStreamInterface\n defines a \n__toString()\n method to simplify\nretrieving or emitting the entire body contents at once.\n\n\nUnlike the request and response interfaces, \nStreamInterface\n does not model\nimmutability. In situations where an actual PHP stream is wrapped, immutability\nis impossible to enforce, as any code that interacts with the resource can\npotentially change its state (including cursor position, contents, and more).\nOur recommendation is that implementations use read-only streams for\nserver-side requests and client-side responses. Consumers should be aware of\nthe fact that the stream instance may be mutable, and, as such, could alter\nthe state of the message; when in doubt, create a new stream instance and attach\nit to a message to enforce state.\n\n\n1.4 Request Targets and URIs\n\n\nPer RFC 7230, request messages contain a \"request-target\" as the second segment\nof the request line. The request target can be one of the following forms:\n\n\n\n\norigin-form\n, which consists of the path, and, if present, the query\n  string; this is often referred to as a relative URL. Messages as transmitted\n  over TCP typically are of origin-form; scheme and authority data are usually\n  only present via CGI variables.\n\n\nabsolute-form\n, which consists of the scheme, authority\n  (\"[user-info@]host[:port]\", where items in brackets are optional), path (if\n  present), query string (if present), and fragment (if present). This is often\n  referred to as an absolute URI, and is the only form to specify a URI as\n  detailed in RFC 3986. This form is commonly used when making requests to\n  HTTP proxies.\n\n\nauthority-form\n, which consists of the authority only. This is typically\n  used in CONNECT requests only, to establish a connection between an HTTP\n  client and a proxy server.\n\n\nasterisk-form\n, which consists solely of the string \n*\n, and which is used\n  with the OPTIONS method to determine the general capabilities of a web server.\n\n\n\n\nAside from these request-targets, there is often an 'effective URL' which is\nseparate from the request target. The effective URL is not transmitted within\nan HTTP message, but it is used to determine the protocol (http/https), port\nand hostname for making the request.\n\n\nThe effective URL is represented by \nUriInterface\n. \nUriInterface\n models HTTP\nand HTTPS URIs as specified in RFC 3986 (the primary use case). The interface\nprovides methods for interacting with the various URI parts, which will obviate\nthe need for repeated parsing of the URI. It also specifies a \n__toString()\n\nmethod for casting the modeled URI to its string representation.\n\n\nWhen retrieving the request-target with \ngetRequestTarget()\n, by default this\nmethod will use the URI object and extract all the necessary components to\nconstruct the \norigin-form\n. The \norigin-form\n is by far the most common\nrequest-target.\n\n\nIf it's desired by an end-user to use one of the other three forms, or if the\nuser wants to explicitly override the request-target, it is possible to do so\nwith \nwithRequestTarget()\n.\n\n\nCalling this method does not affect the URI, as it is returned from \ngetUri()\n.\n\n\nFor example, a user may want to make an asterisk-form request to a server:\n\n\n$request = $request\n\n\n    -\nwithMethod(\nOPTIONS\n)\n\n\n    -\nwithRequestTarget(\n*\n)\n\n\n    -\nwithUri(new Uri(\nhttps://example.org/\n));\n\n\n\n\n\n\nThis example may ultimately result in an HTTP request that looks like this:\n\n\nOPTIONS\n \n*\n \nHTTP\n/\n1.1\n\n\n\n\n\n\nBut the HTTP client will be able to use the effective URL (from \ngetUri()\n),\nto determine the protocol, hostname and TCP port.\n\n\nAn HTTP client MUST ignore the values of \nUri::getPath()\n and \nUri::getQuery()\n,\nand instead use the value returned by \ngetRequestTarget()\n, which defaults\nto concatenating these two values.\n\n\nClients that choose to not implement 1 or more of the 4 request-target forms,\nMUST still use \ngetRequestTarget()\n. These clients MUST reject request-targets\nthey do not support, and MUST NOT fall back on the values from \ngetUri()\n.\n\n\nRequestInterface\n provides methods for retrieving the request-target or\ncreating a new instance with the provided request-target. By default, if no\nrequest-target is specifically composed in the instance, \ngetRequestTarget()\n\nwill return the origin-form of the composed URI (or \"/\" if no URI is composed).\n\nwithRequestTarget($requestTarget)\n creates a new instance with the\nspecified request target, and thus allows developers to create request messages\nthat represent the other three request-target forms (absolute-form,\nauthority-form, and asterisk-form). When used, the composed URI instance can\nstill be of use, particularly in clients, where it may be used to create the\nconnection to the server.\n\n\n1.5 Server-side Requests\n\n\nRequestInterface\n provides the general representation of an HTTP request\nmessage. However, server-side requests need additional treatment, due to the\nnature of the server-side environment. Server-side processing needs to take into\naccount Common Gateway Interface (CGI), and, more specifically, PHP's\nabstraction and extension of CGI via its Server APIs (SAPI). PHP has provided\nsimplification around input marshaling via superglobals such as:\n\n\n\n\n$_COOKIE\n, which deserializes and provides simplified access to HTTP\n  cookies.\n\n\n$_GET\n, which deserializes and provides simplified access to query string\n  arguments.\n\n\n$_POST\n, which deserializes and provides simplified access for urlencoded\n  parameters submitted via HTTP POST; generically, it can be considered the\n  results of parsing the message body.\n\n\n$_FILES\n, which provides serialized metadata around file uploads.\n\n\n$_SERVER\n, which provides access to CGI/SAPI environment variables, which\n  commonly include the request method, the request scheme, the request URI, and\n  headers.\n\n\n\n\nServerRequestInterface\n extends \nRequestInterface\n to provide an abstraction\naround these various superglobals. This practice helps reduce coupling to the\nsuperglobals by consumers, and encourages and promotes the ability to test\nrequest consumers.\n\n\nThe server request provides one additional property, \"attributes\", to allow\nconsumers the ability to introspect, decompose, and match the request against\napplication-specific rules (such as path matching, scheme matching, host\nmatching, etc.). As such, the server request can also provide messaging between\nmultiple request consumers.\n\n\n1.6 Uploaded files\n\n\nServerRequestInterface\n specifies a method for retrieving a tree of upload\nfiles in a normalized structure, with each leaf an instance of\n\nUploadedFileInterface\n.\n\n\nThe \n$_FILES\n superglobal has some well-known problems when dealing with arrays\nof file inputs. As an example, if you have a form that submits an array of files\n\u2014 e.g., the input name \"files\", submitting \nfiles[0]\n and \nfiles[1]\n \u2014 PHP will\nrepresent this as:\n\n\narray(\n\n\n    \nfiles\n =\n array(\n\n\n        \nname\n =\n array(\n\n\n            0 =\n \nfile0.txt\n,\n\n\n            1 =\n \nfile1.html\n,\n\n\n        ),\n\n\n        \ntype\n =\n array(\n\n\n            0 =\n \ntext/plain\n,\n\n\n            1 =\n \ntext/html\n,\n\n\n        ),\n\n\n        /* etc. */\n\n\n    ),\n\n\n)\n\n\n\n\n\n\ninstead of the expected:\n\n\narray(\n\n\n    \nfiles\n =\n array(\n\n\n        0 =\n array(\n\n\n            \nname\n =\n \nfile0.txt\n,\n\n\n            \ntype\n =\n \ntext/plain\n,\n\n\n            /* etc. */\n\n\n        ),\n\n\n        1 =\n array(\n\n\n            \nname\n =\n \nfile1.html\n,\n\n\n            \ntype\n =\n \ntext/html\n,\n\n\n            /* etc. */\n\n\n        ),\n\n\n    ),\n\n\n)\n\n\n\n\n\n\nThe result is that consumers need to know this language implementation detail,\nand write code for gathering the data for a given upload.\n\n\nAdditionally, scenarios exist where \n$_FILES\n is not populated when file uploads\noccur:\n\n\n\n\nWhen the HTTP method is not \nPOST\n.\n\n\nWhen unit testing.\n\n\nWhen operating under a non-SAPI environment, such as \nReactPHP\n.\n\n\n\n\nIn such cases, the data will need to be seeded differently. As examples:\n\n\n\n\nA process might parse the message body to discover the file uploads. In such\n  cases, the implementation may choose \nnot\n to write the file uploads to the\n  file system, but instead wrap them in a stream in order to reduce memory,\n  I/O, and storage overhead.\n\n\nIn unit testing scenarios, developers need to be able to stub and/or mock the\n  file upload metadata in order to validate and verify different scenarios.\n\n\n\n\ngetUploadedFiles()\n provides the normalized structure for consumers.\nImplementations are expected to:\n\n\n\n\nAggregate all information for a given file upload, and use it to populate a\n  \nPsr\\Http\\Message\\UploadedFileInterface\n instance.\n\n\nRe-create the submitted tree structure, with each leaf being the appropriate\n  \nPsr\\Http\\Message\\UploadedFileInterface\n instance for the given location in\n  the tree.\n\n\n\n\nThe tree structure referenced should mimic the naming structure in which files\nwere submitted.\n\n\nIn the simplest example, this might be a single named form element submitted as:\n\n\ninput\n \ntype\n=\nfile\n \nname\n=\navatar\n \n/\n\n\n\n\n\n\nIn this case, the structure in \n$_FILES\n would look like:\n\n\narray(\n\n\n    \navatar\n =\n array(\n\n\n        \ntmp_name\n =\n \nphpUxcOty\n,\n\n\n        \nname\n =\n \nmy-avatar.png\n,\n\n\n        \nsize\n =\n 90996,\n\n\n        \ntype\n =\n \nimage/png\n,\n\n\n        \nerror\n =\n 0,\n\n\n    ),\n\n\n)\n\n\n\n\n\n\nThe normalized form returned by \ngetUploadedFiles()\n would be:\n\n\narray(\n\n\n    \navatar\n =\n /* UploadedFileInterface instance */\n\n\n)\n\n\n\n\n\n\nIn the case of an input using array notation for the name:\n\n\ninput\n \ntype\n=\nfile\n \nname\n=\nmy-form[details][avatar]\n \n/\n\n\n\n\n\n\n$_FILES\n ends up looking like this:\n\n\narray(\n\n\n    \nmy-form\n =\n array(\n\n\n        \ndetails\n =\n array(\n\n\n            \navatar\n =\n array(\n\n\n                \ntmp_name\n =\n \nphpUxcOty\n,\n\n\n                \nname\n =\n \nmy-avatar.png\n,\n\n\n                \nsize\n =\n 90996,\n\n\n                \ntype\n =\n \nimage/png\n,\n\n\n                \nerror\n =\n 0,\n\n\n            ),\n\n\n        ),\n\n\n    ),\n\n\n)\n\n\n\n\n\n\nAnd the corresponding tree returned by \ngetUploadedFiles()\n should be:\n\n\narray(\n\n\n    \nmy-form\n =\n array(\n\n\n        \ndetails\n =\n array(\n\n\n            \navatar\n =\n /* UploadedFileInterface instance */\n\n\n        ),\n\n\n    ),\n\n\n)\n\n\n\n\n\n\nIn some cases, you may specify an array of files:\n\n\nUpload an avatar: \ninput\n \ntype\n=\nfile\n \nname\n=\nmy-form[details][avatars][]\n \n/\n\nUpload an avatar: \ninput\n \ntype\n=\nfile\n \nname\n=\nmy-form[details][avatars][]\n \n/\n\n\n\n\n\n\n(As an example, JavaScript controls might spawn additional file upload inputs to\nallow uploading multiple files at once.)\n\n\nIn such a case, the specification implementation must aggregate all information\nrelated to the file at the given index. The reason is because \n$_FILES\n deviates\nfrom its normal structure in such cases:\n\n\narray(\n\n\n    \nmy-form\n =\n array(\n\n\n        \ndetails\n =\n array(\n\n\n            \navatars\n =\n array(\n\n\n                \ntmp_name\n =\n array(\n\n\n                    0 =\n \n...\n,\n\n\n                    1 =\n \n...\n,\n\n\n                    2 =\n \n...\n,\n\n\n                ),\n\n\n                \nname\n =\n array(\n\n\n                    0 =\n \n...\n,\n\n\n                    1 =\n \n...\n,\n\n\n                    2 =\n \n...\n,\n\n\n                ),\n\n\n                \nsize\n =\n array(\n\n\n                    0 =\n \n...\n,\n\n\n                    1 =\n \n...\n,\n\n\n                    2 =\n \n...\n,\n\n\n                ),\n\n\n                \ntype\n =\n array(\n\n\n                    0 =\n \n...\n,\n\n\n                    1 =\n \n...\n,\n\n\n                    2 =\n \n...\n,\n\n\n                ),\n\n\n                \nerror\n =\n array(\n\n\n                    0 =\n \n...\n,\n\n\n                    1 =\n \n...\n,\n\n\n                    2 =\n \n...\n,\n\n\n                ),\n\n\n            ),\n\n\n        ),\n\n\n    ),\n\n\n)\n\n\n\n\n\n\nThe above \n$_FILES\n array would correspond to the following structure as\nreturned by \ngetUploadedFiles()\n:\n\n\narray(\n\n\n    \nmy-form\n =\n array(\n\n\n        \ndetails\n =\n array(\n\n\n            \navatars\n =\n array(\n\n\n                0 =\n /* UploadedFileInterface instance */,\n\n\n                1 =\n /* UploadedFileInterface instance */,\n\n\n                2 =\n /* UploadedFileInterface instance */,\n\n\n            ),\n\n\n        ),\n\n\n    ),\n\n\n)\n\n\n\n\n\n\nConsumers would access index \n1\n of the nested array using:\n\n\n$request-\ngetUploadedFiles()[\nmy-form\n][\ndetails\n][\navatars\n][1];\n\n\n\n\n\n\nBecause the uploaded files data is derivative (derived from \n$_FILES\n or the\nrequest body), a mutator method, \nwithUploadedFiles()\n, is also present in the\ninterface, allowing delegation of the normalization to another process.\n\n\nIn the case of the original examples, consumption resembles the following:\n\n\n$file0 = $request-\ngetUploadedFiles()[\nfiles\n][0];\n\n\n$file1 = $request-\ngetUploadedFiles()[\nfiles\n][1];\n\n\n\nprintf(\n\n\n    \nReceived the files %s and %s\n,\n\n\n    $file0-\ngetClientFilename(),\n\n\n    $file1-\ngetClientFilename()\n\n\n);\n\n\n\n// \nReceived the files file0.txt and file1.html\n\n\n\n\n\n\nThis proposal also recognizes that implementations may operate in non-SAPI\nenvironments. As such, \nUploadedFileInterface\n provides methods for ensuring\noperations will work regardless of environment. In particular:\n\n\n\n\nmoveTo($targetPath)\n is provided as a safe and recommended alternative to calling\n  \nmove_uploaded_file()\n directly on the temporary upload file. Implementations\n  will detect the correct operation to use based on environment.\n\n\ngetStream()\n will return a \nStreamInterface\n instance. In non-SAPI\n  environments, one proposed possibility is to parse individual upload files\n  into \nphp://temp\n streams instead of directly to files; in such cases, no\n  upload file is present. \ngetStream()\n is therefore guaranteed to work\n  regardless of environment.\n\n\n\n\nAs examples:\n\n\n// Move a file to an upload directory\n$filename = sprintf(\n    \n%s.%s\n,\n    create_uuid(),\n    pathinfo($file0-\ngetClientFilename(), PATHINFO_EXTENSION)\n);\n$file0-\nmoveTo(DATA_DIR . \n/\n . $filename);\n\n// Stream a file to Amazon S3.\n// Assume $s3wrapper is a PHP stream that will write to S3, and that\n// Psr7StreamWrapper is a class that will decorate a StreamInterface as a PHP\n// StreamWrapper.\n$stream = new Psr7StreamWrapper($file1-\ngetStream());\nstream_copy_to_stream($stream, $s3wrapper);\n\n\n\n\n\n2. Package\n\n\nThe interfaces and classes described are provided as part of the\n\npsr/http-message\n package.\n\n\n3. Interfaces\n\n\n3.1 \nPsr\\Http\\Message\\MessageInterface\n\n\n?php\n\n\nnamespace\n \nPsr\\Http\\Message\n;\n\n\n\n/**\n\n\n * HTTP messages consist of requests from a client to a server and responses\n\n\n * from a server to a client. This interface defines the methods common to\n\n\n * each.\n\n\n *\n\n\n * Messages are considered immutable; all methods that might change state MUST\n\n\n * be implemented such that they retain the internal state of the current\n\n\n * message and return an instance that contains the changed state.\n\n\n *\n\n\n * @see http://www.ietf.org/rfc/rfc7230.txt\n\n\n * @see http://www.ietf.org/rfc/rfc7231.txt\n\n\n */\n\n\ninterface\n \nMessageInterface\n\n\n{\n\n    \n/**\n\n\n     * Retrieves the HTTP protocol version as a string.\n\n\n     *\n\n\n     * The string MUST contain only the HTTP version number (e.g., \n1.1\n, \n1.0\n).\n\n\n     *\n\n\n     * @return string HTTP protocol version.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetProtocolVersion\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specified HTTP protocol version.\n\n\n     *\n\n\n     * The version string MUST contain only the HTTP version number (e.g.,\n\n\n     * \n1.1\n, \n1.0\n).\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * new protocol version.\n\n\n     *\n\n\n     * @param string $version HTTP protocol version\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithProtocolVersion\n(\n$version\n);\n\n\n    \n/**\n\n\n     * Retrieves all message header values.\n\n\n     *\n\n\n     * The keys represent the header name as it will be sent over the wire, and\n\n\n     * each value is an array of strings associated with the header.\n\n\n     *\n\n\n     *     // Represent the headers as a string\n\n\n     *     foreach ($message-\ngetHeaders() as $name =\n $values) {\n\n\n     *         echo $name . \n: \n . implode(\n, \n, $values);\n\n\n     *     }\n\n\n     *\n\n\n     *     // Emit headers iteratively:\n\n\n     *     foreach ($message-\ngetHeaders() as $name =\n $values) {\n\n\n     *         foreach ($values as $value) {\n\n\n     *             header(sprintf(\n%s: %s\n, $name, $value), false);\n\n\n     *         }\n\n\n     *     }\n\n\n     *\n\n\n     * While header names are not case-sensitive, getHeaders() will preserve the\n\n\n     * exact case in which headers were originally specified.\n\n\n     *\n\n\n     * @return string[][] Returns an associative array of the message\ns headers.\n\n\n     *     Each key MUST be a header name, and each value MUST be an array of\n\n\n     *     strings for that header.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetHeaders\n();\n\n\n    \n/**\n\n\n     * Checks if a header exists by the given case-insensitive name.\n\n\n     *\n\n\n     * @param string $name Case-insensitive header field name.\n\n\n     * @return bool Returns true if any header names match the given header\n\n\n     *     name using a case-insensitive string comparison. Returns false if\n\n\n     *     no matching header name is found in the message.\n\n\n     */\n\n    \npublic\n \nfunction\n \nhasHeader\n(\n$name\n);\n\n\n    \n/**\n\n\n     * Retrieves a message header value by the given case-insensitive name.\n\n\n     *\n\n\n     * This method returns an array of all the header values of the given\n\n\n     * case-insensitive header name.\n\n\n     *\n\n\n     * If the header does not appear in the message, this method MUST return an\n\n\n     * empty array.\n\n\n     *\n\n\n     * @param string $name Case-insensitive header field name.\n\n\n     * @return string[] An array of string values as provided for the given\n\n\n     *    header. If the header does not appear in the message, this method MUST\n\n\n     *    return an empty array.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetHeader\n(\n$name\n);\n\n\n    \n/**\n\n\n     * Retrieves a comma-separated string of the values for a single header.\n\n\n     *\n\n\n     * This method returns all of the header values of the given\n\n\n     * case-insensitive header name as a string concatenated together using\n\n\n     * a comma.\n\n\n     *\n\n\n     * NOTE: Not all header values may be appropriately represented using\n\n\n     * comma concatenation. For such headers, use getHeader() instead\n\n\n     * and supply your own delimiter when concatenating.\n\n\n     *\n\n\n     * If the header does not appear in the message, this method MUST return\n\n\n     * an empty string.\n\n\n     *\n\n\n     * @param string $name Case-insensitive header field name.\n\n\n     * @return string A string of values as provided for the given header\n\n\n     *    concatenated together using a comma. If the header does not appear in\n\n\n     *    the message, this method MUST return an empty string.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetHeaderLine\n(\n$name\n);\n\n\n    \n/**\n\n\n     * Return an instance with the provided value replacing the specified header.\n\n\n     *\n\n\n     * While header names are case-insensitive, the casing of the header will\n\n\n     * be preserved by this function, and returned from getHeaders().\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * new and/or updated header and value.\n\n\n     *\n\n\n     * @param string $name Case-insensitive header field name.\n\n\n     * @param string|string[] $value Header value(s).\n\n\n     * @return static\n\n\n     * @throws \\InvalidArgumentException for invalid header names or values.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithHeader\n(\n$name\n,\n \n$value\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified header appended with the given value.\n\n\n     *\n\n\n     * Existing values for the specified header will be maintained. The new\n\n\n     * value(s) will be appended to the existing list. If the header did not\n\n\n     * exist previously, it will be added.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * new header and/or value.\n\n\n     *\n\n\n     * @param string $name Case-insensitive header field name to add.\n\n\n     * @param string|string[] $value Header value(s).\n\n\n     * @return static\n\n\n     * @throws \\InvalidArgumentException for invalid header names.\n\n\n     * @throws \\InvalidArgumentException for invalid header values.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithAddedHeader\n(\n$name\n,\n \n$value\n);\n\n\n    \n/**\n\n\n     * Return an instance without the specified header.\n\n\n     *\n\n\n     * Header resolution MUST be done without case-sensitivity.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that removes\n\n\n     * the named header.\n\n\n     *\n\n\n     * @param string $name Case-insensitive header field name to remove.\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithoutHeader\n(\n$name\n);\n\n\n    \n/**\n\n\n     * Gets the body of the message.\n\n\n     *\n\n\n     * @return StreamInterface Returns the body as a stream.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetBody\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specified message body.\n\n\n     *\n\n\n     * The body MUST be a StreamInterface object.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return a new instance that has the\n\n\n     * new body stream.\n\n\n     *\n\n\n     * @param StreamInterface $body Body.\n\n\n     * @return static\n\n\n     * @throws \\InvalidArgumentException When the body is not valid.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithBody\n(\nStreamInterface\n \n$body\n);\n\n\n}\n\n\n\n\n\n\n3.2 \nPsr\\Http\\Message\\RequestInterface\n\n\n?php\n\n\nnamespace\n \nPsr\\Http\\Message\n;\n\n\n\n/**\n\n\n * Representation of an outgoing, client-side request.\n\n\n *\n\n\n * Per the HTTP specification, this interface includes properties for\n\n\n * each of the following:\n\n\n *\n\n\n * - Protocol version\n\n\n * - HTTP method\n\n\n * - URI\n\n\n * - Headers\n\n\n * - Message body\n\n\n *\n\n\n * During construction, implementations MUST attempt to set the Host header from\n\n\n * a provided URI if no Host header is provided.\n\n\n *\n\n\n * Requests are considered immutable; all methods that might change state MUST\n\n\n * be implemented such that they retain the internal state of the current\n\n\n * message and return an instance that contains the changed state.\n\n\n */\n\n\ninterface\n \nRequestInterface\n \nextends\n \nMessageInterface\n\n\n{\n\n    \n/**\n\n\n     * Retrieves the message\ns request target.\n\n\n     *\n\n\n     * Retrieves the message\ns request-target either as it will appear (for\n\n\n     * clients), as it appeared at request (for servers), or as it was\n\n\n     * specified for the instance (see withRequestTarget()).\n\n\n     *\n\n\n     * In most cases, this will be the origin-form of the composed URI,\n\n\n     * unless a value was provided to the concrete implementation (see\n\n\n     * withRequestTarget() below).\n\n\n     *\n\n\n     * If no URI is available, and no request-target has been specifically\n\n\n     * provided, this method MUST return the string \n/\n.\n\n\n     *\n\n\n     * @return string\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetRequestTarget\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specific request-target.\n\n\n     *\n\n\n     * If the request needs a non-origin-form request-target \u2014 e.g., for\n\n\n     * specifying an absolute-form, authority-form, or asterisk-form \u2014\n\n\n     * this method may be used to create an instance with the specified\n\n\n     * request-target, verbatim.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * changed request target.\n\n\n     *\n\n\n     * @see http://tools.ietf.org/html/rfc7230#section-5.3 (for the various\n\n\n     *     request-target forms allowed in request messages)\n\n\n     * @param mixed $requestTarget\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithRequestTarget\n(\n$requestTarget\n);\n\n\n    \n/**\n\n\n     * Retrieves the HTTP method of the request.\n\n\n     *\n\n\n     * @return string Returns the request method.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetMethod\n();\n\n\n    \n/**\n\n\n     * Return an instance with the provided HTTP method.\n\n\n     *\n\n\n     * While HTTP method names are typically all uppercase characters, HTTP\n\n\n     * method names are case-sensitive and thus implementations SHOULD NOT\n\n\n     * modify the given string.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * changed request method.\n\n\n     *\n\n\n     * @param string $method Case-sensitive method.\n\n\n     * @return static\n\n\n     * @throws \\InvalidArgumentException for invalid HTTP methods.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithMethod\n(\n$method\n);\n\n\n    \n/**\n\n\n     * Retrieves the URI instance.\n\n\n     *\n\n\n     * This method MUST return a UriInterface instance.\n\n\n     *\n\n\n     * @see http://tools.ietf.org/html/rfc3986#section-4.3\n\n\n     * @return UriInterface Returns a UriInterface instance\n\n\n     *     representing the URI of the request.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetUri\n();\n\n\n    \n/**\n\n\n     * Returns an instance with the provided URI.\n\n\n     *\n\n\n     * This method MUST update the Host header of the returned request by\n\n\n     * default if the URI contains a host component. If the URI does not\n\n\n     * contain a host component, any pre-existing Host header MUST be carried\n\n\n     * over to the returned request.\n\n\n     *\n\n\n     * You can opt-in to preserving the original state of the Host header by\n\n\n     * setting `$preserveHost` to `true`. When `$preserveHost` is set to\n\n\n     * `true`, this method interacts with the Host header in the following ways:\n\n\n     *\n\n\n     * - If the Host header is missing or empty, and the new URI contains\n\n\n     *   a host component, this method MUST update the Host header in the returned\n\n\n     *   request.\n\n\n     * - If the Host header is missing or empty, and the new URI does not contain a\n\n\n     *   host component, this method MUST NOT update the Host header in the returned\n\n\n     *   request.\n\n\n     * - If a Host header is present and non-empty, this method MUST NOT update\n\n\n     *   the Host header in the returned request.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * new UriInterface instance.\n\n\n     *\n\n\n     * @see http://tools.ietf.org/html/rfc3986#section-4.3\n\n\n     * @param UriInterface $uri New request URI to use.\n\n\n     * @param bool $preserveHost Preserve the original state of the Host header.\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithUri\n(\nUriInterface\n \n$uri\n,\n \n$preserveHost\n \n=\n \nfalse\n);\n\n\n}\n\n\n\n\n\n\n3.2.1 \nPsr\\Http\\Message\\ServerRequestInterface\n\n\n?php\n\n\nnamespace\n \nPsr\\Http\\Message\n;\n\n\n\n/**\n\n\n * Representation of an incoming, server-side HTTP request.\n\n\n *\n\n\n * Per the HTTP specification, this interface includes properties for\n\n\n * each of the following:\n\n\n *\n\n\n * - Protocol version\n\n\n * - HTTP method\n\n\n * - URI\n\n\n * - Headers\n\n\n * - Message body\n\n\n *\n\n\n * Additionally, it encapsulates all data as it has arrived at the\n\n\n * application from the CGI and/or PHP environment, including:\n\n\n *\n\n\n * - The values represented in $_SERVER.\n\n\n * - Any cookies provided (generally via $_COOKIE)\n\n\n * - Query string arguments (generally via $_GET, or as parsed via parse_str())\n\n\n * - Upload files, if any (as represented by $_FILES)\n\n\n * - Deserialized body parameters (generally from $_POST)\n\n\n *\n\n\n * $_SERVER values MUST be treated as immutable, as they represent application\n\n\n * state at the time of request; as such, no methods are provided to allow\n\n\n * modification of those values. The other values provide such methods, as they\n\n\n * can be restored from $_SERVER or the request body, and may need treatment\n\n\n * during the application (e.g., body parameters may be deserialized based on\n\n\n * content type).\n\n\n *\n\n\n * Additionally, this interface recognizes the utility of introspecting a\n\n\n * request to derive and match additional parameters (e.g., via URI path\n\n\n * matching, decrypting cookie values, deserializing non-form-encoded body\n\n\n * content, matching authorization headers to users, etc). These parameters\n\n\n * are stored in an \nattributes\n property.\n\n\n *\n\n\n * Requests are considered immutable; all methods that might change state MUST\n\n\n * be implemented such that they retain the internal state of the current\n\n\n * message and return an instance that contains the changed state.\n\n\n */\n\n\ninterface\n \nServerRequestInterface\n \nextends\n \nRequestInterface\n\n\n{\n\n    \n/**\n\n\n     * Retrieve server parameters.\n\n\n     *\n\n\n     * Retrieves data related to the incoming request environment,\n\n\n     * typically derived from PHP\ns $_SERVER superglobal. The data IS NOT\n\n\n     * REQUIRED to originate from $_SERVER.\n\n\n     *\n\n\n     * @return array\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetServerParams\n();\n\n\n    \n/**\n\n\n     * Retrieve cookies.\n\n\n     *\n\n\n     * Retrieves cookies sent by the client to the server.\n\n\n     *\n\n\n     * The data MUST be compatible with the structure of the $_COOKIE\n\n\n     * superglobal.\n\n\n     *\n\n\n     * @return array\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetCookieParams\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specified cookies.\n\n\n     *\n\n\n     * The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST\n\n\n     * be compatible with the structure of $_COOKIE. Typically, this data will\n\n\n     * be injected at instantiation.\n\n\n     *\n\n\n     * This method MUST NOT update the related Cookie header of the request\n\n\n     * instance, nor related values in the server params.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * updated cookie values.\n\n\n     *\n\n\n     * @param array $cookies Array of key/value pairs representing cookies.\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithCookieParams\n(\narray\n \n$cookies\n);\n\n\n    \n/**\n\n\n     * Retrieve query string arguments.\n\n\n     *\n\n\n     * Retrieves the deserialized query string arguments, if any.\n\n\n     *\n\n\n     * Note: the query params might not be in sync with the URI or server\n\n\n     * params. If you need to ensure you are only getting the original\n\n\n     * values, you may need to parse the query string from `getUri()-\ngetQuery()`\n\n\n     * or from the `QUERY_STRING` server param.\n\n\n     *\n\n\n     * @return array\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetQueryParams\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specified query string arguments.\n\n\n     *\n\n\n     * These values SHOULD remain immutable over the course of the incoming\n\n\n     * request. They MAY be injected during instantiation, such as from PHP\ns\n\n\n     * $_GET superglobal, or MAY be derived from some other value such as the\n\n\n     * URI. In cases where the arguments are parsed from the URI, the data\n\n\n     * MUST be compatible with what PHP\ns parse_str() would return for\n\n\n     * purposes of how duplicate query parameters are handled, and how nested\n\n\n     * sets are handled.\n\n\n     *\n\n\n     * Setting query string arguments MUST NOT change the URI stored by the\n\n\n     * request, nor the values in the server params.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * updated query string arguments.\n\n\n     *\n\n\n     * @param array $query Array of query string arguments, typically from\n\n\n     *     $_GET.\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithQueryParams\n(\narray\n \n$query\n);\n\n\n    \n/**\n\n\n     * Retrieve normalized file upload data.\n\n\n     *\n\n\n     * This method returns upload metadata in a normalized tree, with each leaf\n\n\n     * an instance of Psr\\Http\\Message\\UploadedFileInterface.\n\n\n     *\n\n\n     * These values MAY be prepared from $_FILES or the message body during\n\n\n     * instantiation, or MAY be injected via withUploadedFiles().\n\n\n     *\n\n\n     * @return array An array tree of UploadedFileInterface instances; an empty\n\n\n     *     array MUST be returned if no data is present.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetUploadedFiles\n();\n\n\n    \n/**\n\n\n     * Create a new instance with the specified uploaded files.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * updated body parameters.\n\n\n     *\n\n\n     * @param array $uploadedFiles An array tree of UploadedFileInterface instances.\n\n\n     * @return static\n\n\n     * @throws \\InvalidArgumentException if an invalid structure is provided.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithUploadedFiles\n(\narray\n \n$uploadedFiles\n);\n\n\n    \n/**\n\n\n     * Retrieve any parameters provided in the request body.\n\n\n     *\n\n\n     * If the request Content-Type is either application/x-www-form-urlencoded\n\n\n     * or multipart/form-data, and the request method is POST, this method MUST\n\n\n     * return the contents of $_POST.\n\n\n     *\n\n\n     * Otherwise, this method may return any results of deserializing\n\n\n     * the request body content; as parsing returns structured content, the\n\n\n     * potential types MUST be arrays or objects only. A null value indicates\n\n\n     * the absence of body content.\n\n\n     *\n\n\n     * @return null|array|object The deserialized body parameters, if any.\n\n\n     *     These will typically be an array or object.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetParsedBody\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specified body parameters.\n\n\n     *\n\n\n     * These MAY be injected during instantiation.\n\n\n     *\n\n\n     * If the request Content-Type is either application/x-www-form-urlencoded\n\n\n     * or multipart/form-data, and the request method is POST, use this method\n\n\n     * ONLY to inject the contents of $_POST.\n\n\n     *\n\n\n     * The data IS NOT REQUIRED to come from $_POST, but MUST be the results of\n\n\n     * deserializing the request body content. Deserialization/parsing returns\n\n\n     * structured data, and, as such, this method ONLY accepts arrays or objects,\n\n\n     * or a null value if nothing was available to parse.\n\n\n     *\n\n\n     * As an example, if content negotiation determines that the request data\n\n\n     * is a JSON payload, this method could be used to create a request\n\n\n     * instance with the deserialized parameters.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * updated body parameters.\n\n\n     *\n\n\n     * @param null|array|object $data The deserialized body data. This will\n\n\n     *     typically be in an array or object.\n\n\n     * @return static\n\n\n     * @throws \\InvalidArgumentException if an unsupported argument type is\n\n\n     *     provided.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithParsedBody\n(\n$data\n);\n\n\n    \n/**\n\n\n     * Retrieve attributes derived from the request.\n\n\n     *\n\n\n     * The request \nattributes\n may be used to allow injection of any\n\n\n     * parameters derived from the request: e.g., the results of path\n\n\n     * match operations; the results of decrypting cookies; the results of\n\n\n     * deserializing non-form-encoded message bodies; etc. Attributes\n\n\n     * will be application and request specific, and CAN be mutable.\n\n\n     *\n\n\n     * @return mixed[] Attributes derived from the request.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetAttributes\n();\n\n\n    \n/**\n\n\n     * Retrieve a single derived request attribute.\n\n\n     *\n\n\n     * Retrieves a single derived request attribute as described in\n\n\n     * getAttributes(). If the attribute has not been previously set, returns\n\n\n     * the default value as provided.\n\n\n     *\n\n\n     * This method obviates the need for a hasAttribute() method, as it allows\n\n\n     * specifying a default value to return if the attribute is not found.\n\n\n     *\n\n\n     * @see getAttributes()\n\n\n     * @param string $name The attribute name.\n\n\n     * @param mixed $default Default value to return if the attribute does not exist.\n\n\n     * @return mixed\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetAttribute\n(\n$name\n,\n \n$default\n \n=\n \nnull\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified derived request attribute.\n\n\n     *\n\n\n     * This method allows setting a single derived request attribute as\n\n\n     * described in getAttributes().\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * updated attribute.\n\n\n     *\n\n\n     * @see getAttributes()\n\n\n     * @param string $name The attribute name.\n\n\n     * @param mixed $value The value of the attribute.\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithAttribute\n(\n$name\n,\n \n$value\n);\n\n\n    \n/**\n\n\n     * Return an instance that removes the specified derived request attribute.\n\n\n     *\n\n\n     * This method allows removing a single derived request attribute as\n\n\n     * described in getAttributes().\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that removes\n\n\n     * the attribute.\n\n\n     *\n\n\n     * @see getAttributes()\n\n\n     * @param string $name The attribute name.\n\n\n     * @return static\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithoutAttribute\n(\n$name\n);\n\n\n}\n\n\n\n\n\n\n3.3 \nPsr\\Http\\Message\\ResponseInterface\n\n\n?php\n\n\nnamespace\n \nPsr\\Http\\Message\n;\n\n\n\n/**\n\n\n * Representation of an outgoing, server-side response.\n\n\n *\n\n\n * Per the HTTP specification, this interface includes properties for\n\n\n * each of the following:\n\n\n *\n\n\n * - Protocol version\n\n\n * - Status code and reason phrase\n\n\n * - Headers\n\n\n * - Message body\n\n\n *\n\n\n * Responses are considered immutable; all methods that might change state MUST\n\n\n * be implemented such that they retain the internal state of the current\n\n\n * message and return an instance that contains the changed state.\n\n\n */\n\n\ninterface\n \nResponseInterface\n \nextends\n \nMessageInterface\n\n\n{\n\n    \n/**\n\n\n     * Gets the response status code.\n\n\n     *\n\n\n     * The status code is a 3-digit integer result code of the server\ns attempt\n\n\n     * to understand and satisfy the request.\n\n\n     *\n\n\n     * @return int Status code.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetStatusCode\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specified status code and, optionally, reason phrase.\n\n\n     *\n\n\n     * If no reason phrase is specified, implementations MAY choose to default\n\n\n     * to the RFC 7231 or IANA recommended reason phrase for the response\ns\n\n\n     * status code.\n\n\n     *\n\n\n     * This method MUST be implemented in such a way as to retain the\n\n\n     * immutability of the message, and MUST return an instance that has the\n\n\n     * updated status and reason phrase.\n\n\n     *\n\n\n     * @see http://tools.ietf.org/html/rfc7231#section-6\n\n\n     * @see http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n\n\n     * @param int $code The 3-digit integer result code to set.\n\n\n     * @param string $reasonPhrase The reason phrase to use with the\n\n\n     *     provided status code; if none is provided, implementations MAY\n\n\n     *     use the defaults as suggested in the HTTP specification.\n\n\n     * @return static\n\n\n     * @throws \\InvalidArgumentException For invalid status code arguments.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithStatus\n(\n$code\n,\n \n$reasonPhrase\n \n=\n \n);\n\n\n    \n/**\n\n\n     * Gets the response reason phrase associated with the status code.\n\n\n     *\n\n\n     * Because a reason phrase is not a required element in a response\n\n\n     * status line, the reason phrase value MAY be empty. Implementations MAY\n\n\n     * choose to return the default RFC 7231 recommended reason phrase (or those\n\n\n     * listed in the IANA HTTP Status Code Registry) for the response\ns\n\n\n     * status code.\n\n\n     *\n\n\n     * @see http://tools.ietf.org/html/rfc7231#section-6\n\n\n     * @see http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n\n\n     * @return string Reason phrase; must return an empty string if none present.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetReasonPhrase\n();\n\n\n}\n\n\n\n\n\n\n3.4 \nPsr\\Http\\Message\\StreamInterface\n\n\n?php\n\n\nnamespace\n \nPsr\\Http\\Message\n;\n\n\n\n/**\n\n\n * Describes a data stream.\n\n\n *\n\n\n * Typically, an instance will wrap a PHP stream; this interface provides\n\n\n * a wrapper around the most common operations, including serialization of\n\n\n * the entire stream to a string.\n\n\n */\n\n\ninterface\n \nStreamInterface\n\n\n{\n\n    \n/**\n\n\n     * Reads all data from the stream into a string, from the beginning to end.\n\n\n     *\n\n\n     * This method MUST attempt to seek to the beginning of the stream before\n\n\n     * reading data and read the stream until the end is reached.\n\n\n     *\n\n\n     * Warning: This could attempt to load a large amount of data into memory.\n\n\n     *\n\n\n     * This method MUST NOT raise an exception in order to conform with PHP\ns\n\n\n     * string casting operations.\n\n\n     *\n\n\n     * @see http://php.net/manual/en/language.oop5.magic.php#object.tostring\n\n\n     * @return string\n\n\n     */\n\n    \npublic\n \nfunction\n \n__toString\n();\n\n\n    \n/**\n\n\n     * Closes the stream and any underlying resources.\n\n\n     *\n\n\n     * @return void\n\n\n     */\n\n    \npublic\n \nfunction\n \nclose\n();\n\n\n    \n/**\n\n\n     * Separates any underlying resources from the stream.\n\n\n     *\n\n\n     * After the stream has been detached, the stream is in an unusable state.\n\n\n     *\n\n\n     * @return resource|null Underlying PHP stream, if any\n\n\n     */\n\n    \npublic\n \nfunction\n \ndetach\n();\n\n\n    \n/**\n\n\n     * Get the size of the stream if known.\n\n\n     *\n\n\n     * @return int|null Returns the size in bytes if known, or null if unknown.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetSize\n();\n\n\n    \n/**\n\n\n     * Returns the current position of the file read/write pointer\n\n\n     *\n\n\n     * @return int Position of the file pointer\n\n\n     * @throws \\RuntimeException on error.\n\n\n     */\n\n    \npublic\n \nfunction\n \ntell\n();\n\n\n    \n/**\n\n\n     * Returns true if the stream is at the end of the stream.\n\n\n     *\n\n\n     * @return bool\n\n\n     */\n\n    \npublic\n \nfunction\n \neof\n();\n\n\n    \n/**\n\n\n     * Returns whether or not the stream is seekable.\n\n\n     *\n\n\n     * @return bool\n\n\n     */\n\n    \npublic\n \nfunction\n \nisSeekable\n();\n\n\n    \n/**\n\n\n     * Seek to a position in the stream.\n\n\n     *\n\n\n     * @see http://www.php.net/manual/en/function.fseek.php\n\n\n     * @param int $offset Stream offset\n\n\n     * @param int $whence Specifies how the cursor position will be calculated\n\n\n     *     based on the seek offset. Valid values are identical to the built-in\n\n\n     *     PHP $whence values for `fseek()`.  SEEK_SET: Set position equal to\n\n\n     *     offset bytes SEEK_CUR: Set position to current location plus offset\n\n\n     *     SEEK_END: Set position to end-of-stream plus offset.\n\n\n     * @throws \\RuntimeException on failure.\n\n\n     */\n\n    \npublic\n \nfunction\n \nseek\n(\n$offset\n,\n \n$whence\n \n=\n \nSEEK_SET\n);\n\n\n    \n/**\n\n\n     * Seek to the beginning of the stream.\n\n\n     *\n\n\n     * If the stream is not seekable, this method will raise an exception;\n\n\n     * otherwise, it will perform a seek(0).\n\n\n     *\n\n\n     * @see seek()\n\n\n     * @see http://www.php.net/manual/en/function.fseek.php\n\n\n     * @throws \\RuntimeException on failure.\n\n\n     */\n\n    \npublic\n \nfunction\n \nrewind\n();\n\n\n    \n/**\n\n\n     * Returns whether or not the stream is writable.\n\n\n     *\n\n\n     * @return bool\n\n\n     */\n\n    \npublic\n \nfunction\n \nisWritable\n();\n\n\n    \n/**\n\n\n     * Write data to the stream.\n\n\n     *\n\n\n     * @param string $string The string that is to be written.\n\n\n     * @return int Returns the number of bytes written to the stream.\n\n\n     * @throws \\RuntimeException on failure.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwrite\n(\n$string\n);\n\n\n    \n/**\n\n\n     * Returns whether or not the stream is readable.\n\n\n     *\n\n\n     * @return bool\n\n\n     */\n\n    \npublic\n \nfunction\n \nisReadable\n();\n\n\n    \n/**\n\n\n     * Read data from the stream.\n\n\n     *\n\n\n     * @param int $length Read up to $length bytes from the object and return\n\n\n     *     them. Fewer than $length bytes may be returned if underlying stream\n\n\n     *     call returns fewer bytes.\n\n\n     * @return string Returns the data read from the stream, or an empty string\n\n\n     *     if no bytes are available.\n\n\n     * @throws \\RuntimeException if an error occurs.\n\n\n     */\n\n    \npublic\n \nfunction\n \nread\n(\n$length\n);\n\n\n    \n/**\n\n\n     * Returns the remaining contents in a string\n\n\n     *\n\n\n     * @return string\n\n\n     * @throws \\RuntimeException if unable to read.\n\n\n     * @throws \\RuntimeException if error occurs while reading.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetContents\n();\n\n\n    \n/**\n\n\n     * Get stream metadata as an associative array or retrieve a specific key.\n\n\n     *\n\n\n     * The keys returned are identical to the keys returned from PHP\ns\n\n\n     * stream_get_meta_data() function.\n\n\n     *\n\n\n     * @see http://php.net/manual/en/function.stream-get-meta-data.php\n\n\n     * @param string $key Specific metadata to retrieve.\n\n\n     * @return array|mixed|null Returns an associative array if no key is\n\n\n     *     provided. Returns a specific key value if a key is provided and the\n\n\n     *     value is found, or null if the key is not found.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetMetadata\n(\n$key\n \n=\n \nnull\n);\n\n\n}\n\n\n\n\n\n\n3.5 \nPsr\\Http\\Message\\UriInterface\n\n\n?php\n\n\nnamespace\n \nPsr\\Http\\Message\n;\n\n\n\n/**\n\n\n * Value object representing a URI.\n\n\n *\n\n\n * This interface is meant to represent URIs according to RFC 3986 and to\n\n\n * provide methods for most common operations. Additional functionality for\n\n\n * working with URIs can be provided on top of the interface or externally.\n\n\n * Its primary use is for HTTP requests, but may also be used in other\n\n\n * contexts.\n\n\n *\n\n\n * Instances of this interface are considered immutable; all methods that\n\n\n * might change state MUST be implemented such that they retain the internal\n\n\n * state of the current instance and return an instance that contains the\n\n\n * changed state.\n\n\n *\n\n\n * Typically the Host header will also be present in the request message.\n\n\n * For server-side requests, the scheme will typically be discoverable in the\n\n\n * server parameters.\n\n\n *\n\n\n * @see http://tools.ietf.org/html/rfc3986 (the URI specification)\n\n\n */\n\n\ninterface\n \nUriInterface\n\n\n{\n\n    \n/**\n\n\n     * Retrieve the scheme component of the URI.\n\n\n     *\n\n\n     * If no scheme is present, this method MUST return an empty string.\n\n\n     *\n\n\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n\n\n     * Section 3.1.\n\n\n     *\n\n\n     * The trailing \n:\n character is not part of the scheme and MUST NOT be\n\n\n     * added.\n\n\n     *\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-3.1\n\n\n     * @return string The URI scheme.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetScheme\n();\n\n\n    \n/**\n\n\n     * Retrieve the authority component of the URI.\n\n\n     *\n\n\n     * If no authority information is present, this method MUST return an empty\n\n\n     * string.\n\n\n     *\n\n\n     * The authority syntax of the URI is:\n\n\n     *\n\n\n     * \npre\n\n\n     * [user-info@]host[:port]\n\n\n     * \n/pre\n\n\n     *\n\n\n     * If the port component is not set or is the standard port for the current\n\n\n     * scheme, it SHOULD NOT be included.\n\n\n     *\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-3.2\n\n\n     * @return string The URI authority, in \n[user-info@]host[:port]\n format.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetAuthority\n();\n\n\n    \n/**\n\n\n     * Retrieve the user information component of the URI.\n\n\n     *\n\n\n     * If no user information is present, this method MUST return an empty\n\n\n     * string.\n\n\n     *\n\n\n     * If a user is present in the URI, this will return that value;\n\n\n     * additionally, if the password is also present, it will be appended to the\n\n\n     * user value, with a colon (\n:\n) separating the values.\n\n\n     *\n\n\n     * The trailing \n@\n character is not part of the user information and MUST\n\n\n     * NOT be added.\n\n\n     *\n\n\n     * @return string The URI user information, in \nusername[:password]\n format.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetUserInfo\n();\n\n\n    \n/**\n\n\n     * Retrieve the host component of the URI.\n\n\n     *\n\n\n     * If no host is present, this method MUST return an empty string.\n\n\n     *\n\n\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n\n\n     * Section 3.2.2.\n\n\n     *\n\n\n     * @see http://tools.ietf.org/html/rfc3986#section-3.2.2\n\n\n     * @return string The URI host.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetHost\n();\n\n\n    \n/**\n\n\n     * Retrieve the port component of the URI.\n\n\n     *\n\n\n     * If a port is present, and it is non-standard for the current scheme,\n\n\n     * this method MUST return it as an integer. If the port is the standard port\n\n\n     * used with the current scheme, this method SHOULD return null.\n\n\n     *\n\n\n     * If no port is present, and no scheme is present, this method MUST return\n\n\n     * a null value.\n\n\n     *\n\n\n     * If no port is present, but a scheme is present, this method MAY return\n\n\n     * the standard port for that scheme, but SHOULD return null.\n\n\n     *\n\n\n     * @return null|int The URI port.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetPort\n();\n\n\n    \n/**\n\n\n     * Retrieve the path component of the URI.\n\n\n     *\n\n\n     * The path can either be empty or absolute (starting with a slash) or\n\n\n     * rootless (not starting with a slash). Implementations MUST support all\n\n\n     * three syntaxes.\n\n\n     *\n\n\n     * Normally, the empty path \n and absolute path \n/\n are considered equal as\n\n\n     * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically\n\n\n     * do this normalization because in contexts with a trimmed base path, e.g.\n\n\n     * the front controller, this difference becomes significant. It\ns the task\n\n\n     * of the user to handle both \n and \n/\n.\n\n\n     *\n\n\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n\n\n     * any characters. To determine what characters to encode, please refer to\n\n\n     * RFC 3986, Sections 2 and 3.3.\n\n\n     *\n\n\n     * As an example, if the value should include a slash (\n/\n) not intended as\n\n\n     * delimiter between path segments, that value MUST be passed in encoded\n\n\n     * form (e.g., \n%2F\n) to the instance.\n\n\n     *\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-3.3\n\n\n     * @return string The URI path.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetPath\n();\n\n\n    \n/**\n\n\n     * Retrieve the query string of the URI.\n\n\n     *\n\n\n     * If no query string is present, this method MUST return an empty string.\n\n\n     *\n\n\n     * The leading \n?\n character is not part of the query and MUST NOT be\n\n\n     * added.\n\n\n     *\n\n\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n\n\n     * any characters. To determine what characters to encode, please refer to\n\n\n     * RFC 3986, Sections 2 and 3.4.\n\n\n     *\n\n\n     * As an example, if a value in a key/value pair of the query string should\n\n\n     * include an ampersand (\n) not intended as a delimiter between values,\n\n\n     * that value MUST be passed in encoded form (e.g., \n%26\n) to the instance.\n\n\n     *\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-3.4\n\n\n     * @return string The URI query string.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetQuery\n();\n\n\n    \n/**\n\n\n     * Retrieve the fragment component of the URI.\n\n\n     *\n\n\n     * If no fragment is present, this method MUST return an empty string.\n\n\n     *\n\n\n     * The leading \n#\n character is not part of the fragment and MUST NOT be\n\n\n     * added.\n\n\n     *\n\n\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n\n\n     * any characters. To determine what characters to encode, please refer to\n\n\n     * RFC 3986, Sections 2 and 3.5.\n\n\n     *\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n\n\n     * @see https://tools.ietf.org/html/rfc3986#section-3.5\n\n\n     * @return string The URI fragment.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetFragment\n();\n\n\n    \n/**\n\n\n     * Return an instance with the specified scheme.\n\n\n     *\n\n\n     * This method MUST retain the state of the current instance, and return\n\n\n     * an instance that contains the specified scheme.\n\n\n     *\n\n\n     * Implementations MUST support the schemes \nhttp\n and \nhttps\n case\n\n\n     * insensitively, and MAY accommodate other schemes if required.\n\n\n     *\n\n\n     * An empty scheme is equivalent to removing the scheme.\n\n\n     *\n\n\n     * @param string $scheme The scheme to use with the new instance.\n\n\n     * @return static A new instance with the specified scheme.\n\n\n     * @throws \\InvalidArgumentException for invalid schemes.\n\n\n     * @throws \\InvalidArgumentException for unsupported schemes.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithScheme\n(\n$scheme\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified user information.\n\n\n     *\n\n\n     * This method MUST retain the state of the current instance, and return\n\n\n     * an instance that contains the specified user information.\n\n\n     *\n\n\n     * Password is optional, but the user information MUST include the\n\n\n     * user; an empty string for the user is equivalent to removing user\n\n\n     * information.\n\n\n     *\n\n\n     * @param string $user The user name to use for authority.\n\n\n     * @param null|string $password The password associated with $user.\n\n\n     * @return static A new instance with the specified user information.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithUserInfo\n(\n$user\n,\n \n$password\n \n=\n \nnull\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified host.\n\n\n     *\n\n\n     * This method MUST retain the state of the current instance, and return\n\n\n     * an instance that contains the specified host.\n\n\n     *\n\n\n     * An empty host value is equivalent to removing the host.\n\n\n     *\n\n\n     * @param string $host The hostname to use with the new instance.\n\n\n     * @return static A new instance with the specified host.\n\n\n     * @throws \\InvalidArgumentException for invalid hostnames.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithHost\n(\n$host\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified port.\n\n\n     *\n\n\n     * This method MUST retain the state of the current instance, and return\n\n\n     * an instance that contains the specified port.\n\n\n     *\n\n\n     * Implementations MUST raise an exception for ports outside the\n\n\n     * established TCP and UDP port ranges.\n\n\n     *\n\n\n     * A null value provided for the port is equivalent to removing the port\n\n\n     * information.\n\n\n     *\n\n\n     * @param null|int $port The port to use with the new instance; a null value\n\n\n     *     removes the port information.\n\n\n     * @return static A new instance with the specified port.\n\n\n     * @throws \\InvalidArgumentException for invalid ports.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithPort\n(\n$port\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified path.\n\n\n     *\n\n\n     * This method MUST retain the state of the current instance, and return\n\n\n     * an instance that contains the specified path.\n\n\n     *\n\n\n     * The path can either be empty or absolute (starting with a slash) or\n\n\n     * rootless (not starting with a slash). Implementations MUST support all\n\n\n     * three syntaxes.\n\n\n     *\n\n\n     * If an HTTP path is intended to be host-relative rather than path-relative\n\n\n     * then it must begin with a slash (\n/\n). HTTP paths not starting with a slash\n\n\n     * are assumed to be relative to some base path known to the application or\n\n\n     * consumer.\n\n\n     *\n\n\n     * Users can provide both encoded and decoded path characters.\n\n\n     * Implementations ensure the correct encoding as outlined in getPath().\n\n\n     *\n\n\n     * @param string $path The path to use with the new instance.\n\n\n     * @return static A new instance with the specified path.\n\n\n     * @throws \\InvalidArgumentException for invalid paths.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithPath\n(\n$path\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified query string.\n\n\n     *\n\n\n     * This method MUST retain the state of the current instance, and return\n\n\n     * an instance that contains the specified query string.\n\n\n     *\n\n\n     * Users can provide both encoded and decoded query characters.\n\n\n     * Implementations ensure the correct encoding as outlined in getQuery().\n\n\n     *\n\n\n     * An empty query string value is equivalent to removing the query string.\n\n\n     *\n\n\n     * @param string $query The query string to use with the new instance.\n\n\n     * @return static A new instance with the specified query string.\n\n\n     * @throws \\InvalidArgumentException for invalid query strings.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithQuery\n(\n$query\n);\n\n\n    \n/**\n\n\n     * Return an instance with the specified URI fragment.\n\n\n     *\n\n\n     * This method MUST retain the state of the current instance, and return\n\n\n     * an instance that contains the specified URI fragment.\n\n\n     *\n\n\n     * Users can provide both encoded and decoded fragment characters.\n\n\n     * Implementations ensure the correct encoding as outlined in getFragment().\n\n\n     *\n\n\n     * An empty fragment value is equivalent to removing the fragment.\n\n\n     *\n\n\n     * @param string $fragment The fragment to use with the new instance.\n\n\n     * @return static A new instance with the specified fragment.\n\n\n     */\n\n    \npublic\n \nfunction\n \nwithFragment\n(\n$fragment\n);\n\n\n    \n/**\n\n\n     * Return the string representation as a URI reference.\n\n\n     *\n\n\n     * Depending on which components of the URI are present, the resulting\n\n\n     * string is either a full URI or relative reference according to RFC 3986,\n\n\n     * Section 4.1. The method concatenates the various components of the URI,\n\n\n     * using the appropriate delimiters:\n\n\n     *\n\n\n     * - If a scheme is present, it MUST be suffixed by \n:\n.\n\n\n     * - If an authority is present, it MUST be prefixed by \n//\n.\n\n\n     * - The path can be concatenated without delimiters. But there are two\n\n\n     *   cases where the path has to be adjusted to make the URI reference\n\n\n     *   valid as PHP does not allow to throw an exception in __toString():\n\n\n     *     - If the path is rootless and an authority is present, the path MUST\n\n\n     *       be prefixed by \n/\n.\n\n\n     *     - If the path is starting with more than one \n/\n and no authority is\n\n\n     *       present, the starting slashes MUST be reduced to one.\n\n\n     * - If a query is present, it MUST be prefixed by \n?\n.\n\n\n     * - If a fragment is present, it MUST be prefixed by \n#\n.\n\n\n     *\n\n\n     * @see http://tools.ietf.org/html/rfc3986#section-4.1\n\n\n     * @return string\n\n\n     */\n\n    \npublic\n \nfunction\n \n__toString\n();\n\n\n}\n\n\n\n\n\n\n3.6 \nPsr\\Http\\Message\\UploadedFileInterface\n\n\n?php\n\n\nnamespace\n \nPsr\\Http\\Message\n;\n\n\n\n/**\n\n\n * Value object representing a file uploaded through an HTTP request.\n\n\n *\n\n\n * Instances of this interface are considered immutable; all methods that\n\n\n * might change state MUST be implemented such that they retain the internal\n\n\n * state of the current instance and return an instance that contains the\n\n\n * changed state.\n\n\n */\n\n\ninterface\n \nUploadedFileInterface\n\n\n{\n\n    \n/**\n\n\n     * Retrieve a stream representing the uploaded file.\n\n\n     *\n\n\n     * This method MUST return a StreamInterface instance, representing the\n\n\n     * uploaded file. The purpose of this method is to allow utilizing native PHP\n\n\n     * stream functionality to manipulate the file upload, such as\n\n\n     * stream_copy_to_stream() (though the result will need to be decorated in a\n\n\n     * native PHP stream wrapper to work with such functions).\n\n\n     *\n\n\n     * If the moveTo() method has been called previously, this method MUST raise\n\n\n     * an exception.\n\n\n     *\n\n\n     * @return StreamInterface Stream representation of the uploaded file.\n\n\n     * @throws \\RuntimeException in cases when no stream is available.\n\n\n     * @throws \\RuntimeException in cases when no stream can be created.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetStream\n();\n\n\n    \n/**\n\n\n     * Move the uploaded file to a new location.\n\n\n     *\n\n\n     * Use this method as an alternative to move_uploaded_file(). This method is\n\n\n     * guaranteed to work in both SAPI and non-SAPI environments.\n\n\n     * Implementations must determine which environment they are in, and use the\n\n\n     * appropriate method (move_uploaded_file(), rename(), or a stream\n\n\n     * operation) to perform the operation.\n\n\n     *\n\n\n     * $targetPath may be an absolute path, or a relative path. If it is a\n\n\n     * relative path, resolution should be the same as used by PHP\ns rename()\n\n\n     * function.\n\n\n     *\n\n\n     * The original file or stream MUST be removed on completion.\n\n\n     *\n\n\n     * If this method is called more than once, any subsequent calls MUST raise\n\n\n     * an exception.\n\n\n     *\n\n\n     * When used in an SAPI environment where $_FILES is populated, when writing\n\n\n     * files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be\n\n\n     * used to ensure permissions and upload status are verified correctly.\n\n\n     *\n\n\n     * If you wish to move to a stream, use getStream(), as SAPI operations\n\n\n     * cannot guarantee writing to stream destinations.\n\n\n     *\n\n\n     * @see http://php.net/is_uploaded_file\n\n\n     * @see http://php.net/move_uploaded_file\n\n\n     * @param string $targetPath Path to which to move the uploaded file.\n\n\n     * @throws \\InvalidArgumentException if the $targetPath specified is invalid.\n\n\n     * @throws \\RuntimeException on any error during the move operation.\n\n\n     * @throws \\RuntimeException on the second or subsequent call to the method.\n\n\n     */\n\n    \npublic\n \nfunction\n \nmoveTo\n(\n$targetPath\n);\n\n\n    \n/**\n\n\n     * Retrieve the file size.\n\n\n     *\n\n\n     * Implementations SHOULD return the value stored in the \nsize\n key of\n\n\n     * the file in the $_FILES array if available, as PHP calculates this based\n\n\n     * on the actual size transmitted.\n\n\n     *\n\n\n     * @return int|null The file size in bytes or null if unknown.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetSize\n();\n\n\n    \n/**\n\n\n     * Retrieve the error associated with the uploaded file.\n\n\n     *\n\n\n     * The return value MUST be one of PHP\ns UPLOAD_ERR_XXX constants.\n\n\n     *\n\n\n     * If the file was uploaded successfully, this method MUST return\n\n\n     * UPLOAD_ERR_OK.\n\n\n     *\n\n\n     * Implementations SHOULD return the value stored in the \nerror\n key of\n\n\n     * the file in the $_FILES array.\n\n\n     *\n\n\n     * @see http://php.net/manual/en/features.file-upload.errors.php\n\n\n     * @return int One of PHP\ns UPLOAD_ERR_XXX constants.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetError\n();\n\n\n    \n/**\n\n\n     * Retrieve the filename sent by the client.\n\n\n     *\n\n\n     * Do not trust the value returned by this method. A client could send\n\n\n     * a malicious filename with the intention to corrupt or hack your\n\n\n     * application.\n\n\n     *\n\n\n     * Implementations SHOULD return the value stored in the \nname\n key of\n\n\n     * the file in the $_FILES array.\n\n\n     *\n\n\n     * @return string|null The filename sent by the client or null if none\n\n\n     *     was provided.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetClientFilename\n();\n\n\n    \n/**\n\n\n     * Retrieve the media type sent by the client.\n\n\n     *\n\n\n     * Do not trust the value returned by this method. A client could send\n\n\n     * a malicious media type with the intention to corrupt or hack your\n\n\n     * application.\n\n\n     *\n\n\n     * Implementations SHOULD return the value stored in the \ntype\n key of\n\n\n     * the file in the $_FILES array.\n\n\n     *\n\n\n     * @return string|null The media type sent by the client or null if none\n\n\n     *     was provided.\n\n\n     */\n\n    \npublic\n \nfunction\n \ngetClientMediaType\n();\n\n\n}", 
            "title": "HTTP Messages"
        }, 
        {
            "location": "/php/php-http-messages/#http-message-interfaces", 
            "text": "HTTP messages are the foundation of web development. Web browsers and HTTP\nclients such as cURL create HTTP request messages that are sent to a web server,\nwhich provides an HTTP response message. Server-side code receives an HTTP\nrequest message, and returns an HTTP response message.  HTTP messages are typically abstracted from the end-user consumer, but as\ndevelopers, we typically need to know how they are structured and how to\naccess or manipulate them in order to perform our tasks, whether that might be\nmaking a request to an HTTP API, or handling an incoming request.  Every HTTP request message has a specific form:  POST   /path   HTTP / 1.1  Host :   example.com \n\nfoo=bar baz=bat  The first line of a request is the \"request line\", and contains, in order, the\nHTTP request method, the request target (usually either an absolute URI or a\npath on the web server), and the HTTP protocol version. This is followed by one\nor more HTTP headers, an empty line, and the message body.  HTTP response messages have a similar structure:  HTTP / 1.1   200   OK  Content-Type :   text/plain \n\nThis is the response body  The first line is the \"status line\", and contains, in order, the HTTP protocol\nversion, the HTTP status code, and a \"reason phrase,\" a human-readable\ndescription of the status code. Like the request message, this is then\nfollowed by one or more HTTP headers, an empty line, and the message body.  The interfaces described in this document are abstractions around HTTP messages\nand the elements composing them.  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\n\"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be\ninterpreted as described in  RFC 2119 .", 
            "title": "HTTP message interfaces"
        }, 
        {
            "location": "/php/php-http-messages/#references", 
            "text": "RFC 2119  RFC 3986  RFC 7230  RFC 7231", 
            "title": "References"
        }, 
        {
            "location": "/php/php-http-messages/#1-specification", 
            "text": "", 
            "title": "1. Specification"
        }, 
        {
            "location": "/php/php-http-messages/#11-messages", 
            "text": "An HTTP message is either a request from a client to a server or a response from\na server to a client. This specification defines interfaces for the HTTP messages Psr\\Http\\Message\\RequestInterface  and  Psr\\Http\\Message\\ResponseInterface  respectively.  Both  Psr\\Http\\Message\\RequestInterface  and  Psr\\Http\\Message\\ResponseInterface  extend Psr\\Http\\Message\\MessageInterface . While  Psr\\Http\\Message\\MessageInterface  MAY be\nimplemented directly, implementors SHOULD implement Psr\\Http\\Message\\RequestInterface  and  Psr\\Http\\Message\\ResponseInterface .  From here forward, the namespace  Psr\\Http\\Message  will be omitted when\nreferring to these interfaces.", 
            "title": "1.1 Messages"
        }, 
        {
            "location": "/php/php-http-messages/#12-http-headers", 
            "text": "", 
            "title": "1.2 HTTP Headers"
        }, 
        {
            "location": "/php/php-http-messages/#case-insensitive-header-field-names", 
            "text": "HTTP messages include case-insensitive header field names. Headers are retrieved\nby name from classes implementing the  MessageInterface  in a case-insensitive\nmanner. For example, retrieving the  foo  header will return the same result as\nretrieving the  FoO  header. Similarly, setting the  Foo  header will overwrite\nany previously set  foo  header value.  $message = $message- withHeader( foo ,  bar );  echo $message- getHeaderLine( foo );  // Outputs: bar  echo $message- getHeaderLine( FOO );  // Outputs: bar  $message = $message- withHeader( fOO ,  baz );  echo $message- getHeaderLine( foo );  // Outputs: baz   Despite that headers may be retrieved case-insensitively, the original case\nMUST be preserved by the implementation, in particular when retrieved with getHeaders() .  Non-conforming HTTP applications may depend on a certain case, so it is useful\nfor a user to be able to dictate the case of the HTTP headers when creating a\nrequest or response.", 
            "title": "Case-insensitive header field names"
        }, 
        {
            "location": "/php/php-http-messages/#headers-with-multiple-values", 
            "text": "In order to accommodate headers with multiple values yet still provide the\nconvenience of working with headers as strings, headers can be retrieved from\nan instance of a  MessageInterface  as an array or a string. Use the getHeaderLine()  method to retrieve a header value as a string containing all\nheader values of a case-insensitive header by name concatenated with a comma.\nUse  getHeader()  to retrieve an array of all the header values for a\nparticular case-insensitive header by name.  $message = $message      - withHeader( foo ,  bar )      - withAddedHeader( foo ,  baz );  $header = $message- getHeaderLine( foo );  // $header contains:  bar, baz  $header = $message- getHeader( foo );  // [ bar ,  baz ]   Note: Not all header values can be concatenated using a comma (e.g., Set-Cookie ). When working with such headers, consumers of MessageInterface -based classes SHOULD rely on the  getHeader()  method\nfor retrieving such multi-valued headers.", 
            "title": "Headers with multiple values"
        }, 
        {
            "location": "/php/php-http-messages/#host-header", 
            "text": "In requests, the  Host  header typically mirrors the host component of the URI, as\nwell as the host used when establishing the TCP connection. However, the HTTP\nspecification allows the  Host  header to differ from each of the two.  During construction, implementations MUST attempt to set the  Host  header from\na provided URI if no  Host  header is provided.  RequestInterface::withUri()  will, by default, replace the returned request's Host  header with a  Host  header matching the host component of the passed UriInterface .  You can opt-in to preserving the original state of the  Host  header by passing true  for the second ( $preserveHost ) argument. When this argument is set to true , the returned request will not update the  Host  header of the returned\nmessage -- unless the message contains no  Host  header.  This table illustrates what  getHeaderLine('Host')  will return for a request\nreturned by  withUri()  with the  $preserveHost  argument set to  true  for\nvarious initial requests and URIs.     Request Host header 1  Request host component 2  URI host component 3  Result      ''  ''  ''  ''    ''  foo.com  ''  foo.com    ''  foo.com  bar.com  foo.com    foo.com  ''  bar.com  foo.com    foo.com  bar.com  baz.com  foo.com      1   Host  header value prior to operation.  2  Host component of the URI composed in the request prior\n  to the operation.  3  Host component of the URI being injected via\n   withUri() .", 
            "title": "Host header"
        }, 
        {
            "location": "/php/php-http-messages/#13-streams", 
            "text": "HTTP messages consist of a start-line, headers, and a body. The body of an HTTP\nmessage can be very small or extremely large. Attempting to represent the body\nof a message as a string can easily consume more memory than intended because\nthe body must be stored completely in memory. Attempting to store the body of a\nrequest or response in memory would preclude the use of that implementation from\nbeing able to work with large message bodies.  StreamInterface  is used in\norder to hide the implementation details when a stream of data is read from\nor written to. For situations where a string would be an appropriate message\nimplementation, built-in streams such as  php://memory  and  php://temp  may be\nused.  StreamInterface  exposes several methods that enable streams to be read\nfrom, written to, and traversed effectively.  Streams expose their capabilities using three methods:  isReadable() , isWritable() , and  isSeekable() . These methods can be used by stream\ncollaborators to determine if a stream is capable of their requirements.  Each stream instance will have various capabilities: it can be read-only,\nwrite-only, or read-write. It can also allow arbitrary random access (seeking\nforwards or backwards to any location), or only sequential access (for\nexample in the case of a socket, pipe, or callback-based stream).  Finally,  StreamInterface  defines a  __toString()  method to simplify\nretrieving or emitting the entire body contents at once.  Unlike the request and response interfaces,  StreamInterface  does not model\nimmutability. In situations where an actual PHP stream is wrapped, immutability\nis impossible to enforce, as any code that interacts with the resource can\npotentially change its state (including cursor position, contents, and more).\nOur recommendation is that implementations use read-only streams for\nserver-side requests and client-side responses. Consumers should be aware of\nthe fact that the stream instance may be mutable, and, as such, could alter\nthe state of the message; when in doubt, create a new stream instance and attach\nit to a message to enforce state.", 
            "title": "1.3 Streams"
        }, 
        {
            "location": "/php/php-http-messages/#14-request-targets-and-uris", 
            "text": "Per RFC 7230, request messages contain a \"request-target\" as the second segment\nof the request line. The request target can be one of the following forms:   origin-form , which consists of the path, and, if present, the query\n  string; this is often referred to as a relative URL. Messages as transmitted\n  over TCP typically are of origin-form; scheme and authority data are usually\n  only present via CGI variables.  absolute-form , which consists of the scheme, authority\n  (\"[user-info@]host[:port]\", where items in brackets are optional), path (if\n  present), query string (if present), and fragment (if present). This is often\n  referred to as an absolute URI, and is the only form to specify a URI as\n  detailed in RFC 3986. This form is commonly used when making requests to\n  HTTP proxies.  authority-form , which consists of the authority only. This is typically\n  used in CONNECT requests only, to establish a connection between an HTTP\n  client and a proxy server.  asterisk-form , which consists solely of the string  * , and which is used\n  with the OPTIONS method to determine the general capabilities of a web server.   Aside from these request-targets, there is often an 'effective URL' which is\nseparate from the request target. The effective URL is not transmitted within\nan HTTP message, but it is used to determine the protocol (http/https), port\nand hostname for making the request.  The effective URL is represented by  UriInterface .  UriInterface  models HTTP\nand HTTPS URIs as specified in RFC 3986 (the primary use case). The interface\nprovides methods for interacting with the various URI parts, which will obviate\nthe need for repeated parsing of the URI. It also specifies a  __toString() \nmethod for casting the modeled URI to its string representation.  When retrieving the request-target with  getRequestTarget() , by default this\nmethod will use the URI object and extract all the necessary components to\nconstruct the  origin-form . The  origin-form  is by far the most common\nrequest-target.  If it's desired by an end-user to use one of the other three forms, or if the\nuser wants to explicitly override the request-target, it is possible to do so\nwith  withRequestTarget() .  Calling this method does not affect the URI, as it is returned from  getUri() .  For example, a user may want to make an asterisk-form request to a server:  $request = $request      - withMethod( OPTIONS )      - withRequestTarget( * )      - withUri(new Uri( https://example.org/ ));   This example may ultimately result in an HTTP request that looks like this:  OPTIONS   *   HTTP / 1.1   But the HTTP client will be able to use the effective URL (from  getUri() ),\nto determine the protocol, hostname and TCP port.  An HTTP client MUST ignore the values of  Uri::getPath()  and  Uri::getQuery() ,\nand instead use the value returned by  getRequestTarget() , which defaults\nto concatenating these two values.  Clients that choose to not implement 1 or more of the 4 request-target forms,\nMUST still use  getRequestTarget() . These clients MUST reject request-targets\nthey do not support, and MUST NOT fall back on the values from  getUri() .  RequestInterface  provides methods for retrieving the request-target or\ncreating a new instance with the provided request-target. By default, if no\nrequest-target is specifically composed in the instance,  getRequestTarget() \nwill return the origin-form of the composed URI (or \"/\" if no URI is composed). withRequestTarget($requestTarget)  creates a new instance with the\nspecified request target, and thus allows developers to create request messages\nthat represent the other three request-target forms (absolute-form,\nauthority-form, and asterisk-form). When used, the composed URI instance can\nstill be of use, particularly in clients, where it may be used to create the\nconnection to the server.", 
            "title": "1.4 Request Targets and URIs"
        }, 
        {
            "location": "/php/php-http-messages/#15-server-side-requests", 
            "text": "RequestInterface  provides the general representation of an HTTP request\nmessage. However, server-side requests need additional treatment, due to the\nnature of the server-side environment. Server-side processing needs to take into\naccount Common Gateway Interface (CGI), and, more specifically, PHP's\nabstraction and extension of CGI via its Server APIs (SAPI). PHP has provided\nsimplification around input marshaling via superglobals such as:   $_COOKIE , which deserializes and provides simplified access to HTTP\n  cookies.  $_GET , which deserializes and provides simplified access to query string\n  arguments.  $_POST , which deserializes and provides simplified access for urlencoded\n  parameters submitted via HTTP POST; generically, it can be considered the\n  results of parsing the message body.  $_FILES , which provides serialized metadata around file uploads.  $_SERVER , which provides access to CGI/SAPI environment variables, which\n  commonly include the request method, the request scheme, the request URI, and\n  headers.   ServerRequestInterface  extends  RequestInterface  to provide an abstraction\naround these various superglobals. This practice helps reduce coupling to the\nsuperglobals by consumers, and encourages and promotes the ability to test\nrequest consumers.  The server request provides one additional property, \"attributes\", to allow\nconsumers the ability to introspect, decompose, and match the request against\napplication-specific rules (such as path matching, scheme matching, host\nmatching, etc.). As such, the server request can also provide messaging between\nmultiple request consumers.", 
            "title": "1.5 Server-side Requests"
        }, 
        {
            "location": "/php/php-http-messages/#16-uploaded-files", 
            "text": "ServerRequestInterface  specifies a method for retrieving a tree of upload\nfiles in a normalized structure, with each leaf an instance of UploadedFileInterface .  The  $_FILES  superglobal has some well-known problems when dealing with arrays\nof file inputs. As an example, if you have a form that submits an array of files\n\u2014 e.g., the input name \"files\", submitting  files[0]  and  files[1]  \u2014 PHP will\nrepresent this as:  array(       files  =  array(           name  =  array(              0 =   file0.txt ,              1 =   file1.html ,          ),           type  =  array(              0 =   text/plain ,              1 =   text/html ,          ),          /* etc. */      ),  )   instead of the expected:  array(       files  =  array(          0 =  array(               name  =   file0.txt ,               type  =   text/plain ,              /* etc. */          ),          1 =  array(               name  =   file1.html ,               type  =   text/html ,              /* etc. */          ),      ),  )   The result is that consumers need to know this language implementation detail,\nand write code for gathering the data for a given upload.  Additionally, scenarios exist where  $_FILES  is not populated when file uploads\noccur:   When the HTTP method is not  POST .  When unit testing.  When operating under a non-SAPI environment, such as  ReactPHP .   In such cases, the data will need to be seeded differently. As examples:   A process might parse the message body to discover the file uploads. In such\n  cases, the implementation may choose  not  to write the file uploads to the\n  file system, but instead wrap them in a stream in order to reduce memory,\n  I/O, and storage overhead.  In unit testing scenarios, developers need to be able to stub and/or mock the\n  file upload metadata in order to validate and verify different scenarios.   getUploadedFiles()  provides the normalized structure for consumers.\nImplementations are expected to:   Aggregate all information for a given file upload, and use it to populate a\n   Psr\\Http\\Message\\UploadedFileInterface  instance.  Re-create the submitted tree structure, with each leaf being the appropriate\n   Psr\\Http\\Message\\UploadedFileInterface  instance for the given location in\n  the tree.   The tree structure referenced should mimic the naming structure in which files\nwere submitted.  In the simplest example, this might be a single named form element submitted as:  input   type = file   name = avatar   /   In this case, the structure in  $_FILES  would look like:  array(       avatar  =  array(           tmp_name  =   phpUxcOty ,           name  =   my-avatar.png ,           size  =  90996,           type  =   image/png ,           error  =  0,      ),  )   The normalized form returned by  getUploadedFiles()  would be:  array(       avatar  =  /* UploadedFileInterface instance */  )   In the case of an input using array notation for the name:  input   type = file   name = my-form[details][avatar]   /   $_FILES  ends up looking like this:  array(       my-form  =  array(           details  =  array(               avatar  =  array(                   tmp_name  =   phpUxcOty ,                   name  =   my-avatar.png ,                   size  =  90996,                   type  =   image/png ,                   error  =  0,              ),          ),      ),  )   And the corresponding tree returned by  getUploadedFiles()  should be:  array(       my-form  =  array(           details  =  array(               avatar  =  /* UploadedFileInterface instance */          ),      ),  )   In some cases, you may specify an array of files:  Upload an avatar:  input   type = file   name = my-form[details][avatars][]   / \nUpload an avatar:  input   type = file   name = my-form[details][avatars][]   /   (As an example, JavaScript controls might spawn additional file upload inputs to\nallow uploading multiple files at once.)  In such a case, the specification implementation must aggregate all information\nrelated to the file at the given index. The reason is because  $_FILES  deviates\nfrom its normal structure in such cases:  array(       my-form  =  array(           details  =  array(               avatars  =  array(                   tmp_name  =  array(                      0 =   ... ,                      1 =   ... ,                      2 =   ... ,                  ),                   name  =  array(                      0 =   ... ,                      1 =   ... ,                      2 =   ... ,                  ),                   size  =  array(                      0 =   ... ,                      1 =   ... ,                      2 =   ... ,                  ),                   type  =  array(                      0 =   ... ,                      1 =   ... ,                      2 =   ... ,                  ),                   error  =  array(                      0 =   ... ,                      1 =   ... ,                      2 =   ... ,                  ),              ),          ),      ),  )   The above  $_FILES  array would correspond to the following structure as\nreturned by  getUploadedFiles() :  array(       my-form  =  array(           details  =  array(               avatars  =  array(                  0 =  /* UploadedFileInterface instance */,                  1 =  /* UploadedFileInterface instance */,                  2 =  /* UploadedFileInterface instance */,              ),          ),      ),  )   Consumers would access index  1  of the nested array using:  $request- getUploadedFiles()[ my-form ][ details ][ avatars ][1];   Because the uploaded files data is derivative (derived from  $_FILES  or the\nrequest body), a mutator method,  withUploadedFiles() , is also present in the\ninterface, allowing delegation of the normalization to another process.  In the case of the original examples, consumption resembles the following:  $file0 = $request- getUploadedFiles()[ files ][0];  $file1 = $request- getUploadedFiles()[ files ][1];  printf(       Received the files %s and %s ,      $file0- getClientFilename(),      $file1- getClientFilename()  );  //  Received the files file0.txt and file1.html   This proposal also recognizes that implementations may operate in non-SAPI\nenvironments. As such,  UploadedFileInterface  provides methods for ensuring\noperations will work regardless of environment. In particular:   moveTo($targetPath)  is provided as a safe and recommended alternative to calling\n   move_uploaded_file()  directly on the temporary upload file. Implementations\n  will detect the correct operation to use based on environment.  getStream()  will return a  StreamInterface  instance. In non-SAPI\n  environments, one proposed possibility is to parse individual upload files\n  into  php://temp  streams instead of directly to files; in such cases, no\n  upload file is present.  getStream()  is therefore guaranteed to work\n  regardless of environment.   As examples:  // Move a file to an upload directory\n$filename = sprintf(\n     %s.%s ,\n    create_uuid(),\n    pathinfo($file0- getClientFilename(), PATHINFO_EXTENSION)\n);\n$file0- moveTo(DATA_DIR .  /  . $filename);\n\n// Stream a file to Amazon S3.\n// Assume $s3wrapper is a PHP stream that will write to S3, and that\n// Psr7StreamWrapper is a class that will decorate a StreamInterface as a PHP\n// StreamWrapper.\n$stream = new Psr7StreamWrapper($file1- getStream());\nstream_copy_to_stream($stream, $s3wrapper);", 
            "title": "1.6 Uploaded files"
        }, 
        {
            "location": "/php/php-http-messages/#2-package", 
            "text": "The interfaces and classes described are provided as part of the psr/http-message  package.", 
            "title": "2. Package"
        }, 
        {
            "location": "/php/php-http-messages/#3-interfaces", 
            "text": "", 
            "title": "3. Interfaces"
        }, 
        {
            "location": "/php/php-http-messages/#31-psrhttpmessagemessageinterface", 
            "text": "?php  namespace   Psr\\Http\\Message ;  /**   * HTTP messages consist of requests from a client to a server and responses   * from a server to a client. This interface defines the methods common to   * each.   *   * Messages are considered immutable; all methods that might change state MUST   * be implemented such that they retain the internal state of the current   * message and return an instance that contains the changed state.   *   * @see http://www.ietf.org/rfc/rfc7230.txt   * @see http://www.ietf.org/rfc/rfc7231.txt   */  interface   MessageInterface  { \n     /**       * Retrieves the HTTP protocol version as a string.       *       * The string MUST contain only the HTTP version number (e.g.,  1.1 ,  1.0 ).       *       * @return string HTTP protocol version.       */ \n     public   function   getProtocolVersion (); \n\n     /**       * Return an instance with the specified HTTP protocol version.       *       * The version string MUST contain only the HTTP version number (e.g.,       *  1.1 ,  1.0 ).       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * new protocol version.       *       * @param string $version HTTP protocol version       * @return static       */ \n     public   function   withProtocolVersion ( $version ); \n\n     /**       * Retrieves all message header values.       *       * The keys represent the header name as it will be sent over the wire, and       * each value is an array of strings associated with the header.       *       *     // Represent the headers as a string       *     foreach ($message- getHeaders() as $name =  $values) {       *         echo $name .  :   . implode( ,  , $values);       *     }       *       *     // Emit headers iteratively:       *     foreach ($message- getHeaders() as $name =  $values) {       *         foreach ($values as $value) {       *             header(sprintf( %s: %s , $name, $value), false);       *         }       *     }       *       * While header names are not case-sensitive, getHeaders() will preserve the       * exact case in which headers were originally specified.       *       * @return string[][] Returns an associative array of the message s headers.       *     Each key MUST be a header name, and each value MUST be an array of       *     strings for that header.       */ \n     public   function   getHeaders (); \n\n     /**       * Checks if a header exists by the given case-insensitive name.       *       * @param string $name Case-insensitive header field name.       * @return bool Returns true if any header names match the given header       *     name using a case-insensitive string comparison. Returns false if       *     no matching header name is found in the message.       */ \n     public   function   hasHeader ( $name ); \n\n     /**       * Retrieves a message header value by the given case-insensitive name.       *       * This method returns an array of all the header values of the given       * case-insensitive header name.       *       * If the header does not appear in the message, this method MUST return an       * empty array.       *       * @param string $name Case-insensitive header field name.       * @return string[] An array of string values as provided for the given       *    header. If the header does not appear in the message, this method MUST       *    return an empty array.       */ \n     public   function   getHeader ( $name ); \n\n     /**       * Retrieves a comma-separated string of the values for a single header.       *       * This method returns all of the header values of the given       * case-insensitive header name as a string concatenated together using       * a comma.       *       * NOTE: Not all header values may be appropriately represented using       * comma concatenation. For such headers, use getHeader() instead       * and supply your own delimiter when concatenating.       *       * If the header does not appear in the message, this method MUST return       * an empty string.       *       * @param string $name Case-insensitive header field name.       * @return string A string of values as provided for the given header       *    concatenated together using a comma. If the header does not appear in       *    the message, this method MUST return an empty string.       */ \n     public   function   getHeaderLine ( $name ); \n\n     /**       * Return an instance with the provided value replacing the specified header.       *       * While header names are case-insensitive, the casing of the header will       * be preserved by this function, and returned from getHeaders().       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * new and/or updated header and value.       *       * @param string $name Case-insensitive header field name.       * @param string|string[] $value Header value(s).       * @return static       * @throws \\InvalidArgumentException for invalid header names or values.       */ \n     public   function   withHeader ( $name ,   $value ); \n\n     /**       * Return an instance with the specified header appended with the given value.       *       * Existing values for the specified header will be maintained. The new       * value(s) will be appended to the existing list. If the header did not       * exist previously, it will be added.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * new header and/or value.       *       * @param string $name Case-insensitive header field name to add.       * @param string|string[] $value Header value(s).       * @return static       * @throws \\InvalidArgumentException for invalid header names.       * @throws \\InvalidArgumentException for invalid header values.       */ \n     public   function   withAddedHeader ( $name ,   $value ); \n\n     /**       * Return an instance without the specified header.       *       * Header resolution MUST be done without case-sensitivity.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that removes       * the named header.       *       * @param string $name Case-insensitive header field name to remove.       * @return static       */ \n     public   function   withoutHeader ( $name ); \n\n     /**       * Gets the body of the message.       *       * @return StreamInterface Returns the body as a stream.       */ \n     public   function   getBody (); \n\n     /**       * Return an instance with the specified message body.       *       * The body MUST be a StreamInterface object.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return a new instance that has the       * new body stream.       *       * @param StreamInterface $body Body.       * @return static       * @throws \\InvalidArgumentException When the body is not valid.       */ \n     public   function   withBody ( StreamInterface   $body );  }", 
            "title": "3.1 Psr\\Http\\Message\\MessageInterface"
        }, 
        {
            "location": "/php/php-http-messages/#32-psrhttpmessagerequestinterface", 
            "text": "?php  namespace   Psr\\Http\\Message ;  /**   * Representation of an outgoing, client-side request.   *   * Per the HTTP specification, this interface includes properties for   * each of the following:   *   * - Protocol version   * - HTTP method   * - URI   * - Headers   * - Message body   *   * During construction, implementations MUST attempt to set the Host header from   * a provided URI if no Host header is provided.   *   * Requests are considered immutable; all methods that might change state MUST   * be implemented such that they retain the internal state of the current   * message and return an instance that contains the changed state.   */  interface   RequestInterface   extends   MessageInterface  { \n     /**       * Retrieves the message s request target.       *       * Retrieves the message s request-target either as it will appear (for       * clients), as it appeared at request (for servers), or as it was       * specified for the instance (see withRequestTarget()).       *       * In most cases, this will be the origin-form of the composed URI,       * unless a value was provided to the concrete implementation (see       * withRequestTarget() below).       *       * If no URI is available, and no request-target has been specifically       * provided, this method MUST return the string  / .       *       * @return string       */ \n     public   function   getRequestTarget (); \n\n     /**       * Return an instance with the specific request-target.       *       * If the request needs a non-origin-form request-target \u2014 e.g., for       * specifying an absolute-form, authority-form, or asterisk-form \u2014       * this method may be used to create an instance with the specified       * request-target, verbatim.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * changed request target.       *       * @see http://tools.ietf.org/html/rfc7230#section-5.3 (for the various       *     request-target forms allowed in request messages)       * @param mixed $requestTarget       * @return static       */ \n     public   function   withRequestTarget ( $requestTarget ); \n\n     /**       * Retrieves the HTTP method of the request.       *       * @return string Returns the request method.       */ \n     public   function   getMethod (); \n\n     /**       * Return an instance with the provided HTTP method.       *       * While HTTP method names are typically all uppercase characters, HTTP       * method names are case-sensitive and thus implementations SHOULD NOT       * modify the given string.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * changed request method.       *       * @param string $method Case-sensitive method.       * @return static       * @throws \\InvalidArgumentException for invalid HTTP methods.       */ \n     public   function   withMethod ( $method ); \n\n     /**       * Retrieves the URI instance.       *       * This method MUST return a UriInterface instance.       *       * @see http://tools.ietf.org/html/rfc3986#section-4.3       * @return UriInterface Returns a UriInterface instance       *     representing the URI of the request.       */ \n     public   function   getUri (); \n\n     /**       * Returns an instance with the provided URI.       *       * This method MUST update the Host header of the returned request by       * default if the URI contains a host component. If the URI does not       * contain a host component, any pre-existing Host header MUST be carried       * over to the returned request.       *       * You can opt-in to preserving the original state of the Host header by       * setting `$preserveHost` to `true`. When `$preserveHost` is set to       * `true`, this method interacts with the Host header in the following ways:       *       * - If the Host header is missing or empty, and the new URI contains       *   a host component, this method MUST update the Host header in the returned       *   request.       * - If the Host header is missing or empty, and the new URI does not contain a       *   host component, this method MUST NOT update the Host header in the returned       *   request.       * - If a Host header is present and non-empty, this method MUST NOT update       *   the Host header in the returned request.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * new UriInterface instance.       *       * @see http://tools.ietf.org/html/rfc3986#section-4.3       * @param UriInterface $uri New request URI to use.       * @param bool $preserveHost Preserve the original state of the Host header.       * @return static       */ \n     public   function   withUri ( UriInterface   $uri ,   $preserveHost   =   false );  }", 
            "title": "3.2 Psr\\Http\\Message\\RequestInterface"
        }, 
        {
            "location": "/php/php-http-messages/#321-psrhttpmessageserverrequestinterface", 
            "text": "?php  namespace   Psr\\Http\\Message ;  /**   * Representation of an incoming, server-side HTTP request.   *   * Per the HTTP specification, this interface includes properties for   * each of the following:   *   * - Protocol version   * - HTTP method   * - URI   * - Headers   * - Message body   *   * Additionally, it encapsulates all data as it has arrived at the   * application from the CGI and/or PHP environment, including:   *   * - The values represented in $_SERVER.   * - Any cookies provided (generally via $_COOKIE)   * - Query string arguments (generally via $_GET, or as parsed via parse_str())   * - Upload files, if any (as represented by $_FILES)   * - Deserialized body parameters (generally from $_POST)   *   * $_SERVER values MUST be treated as immutable, as they represent application   * state at the time of request; as such, no methods are provided to allow   * modification of those values. The other values provide such methods, as they   * can be restored from $_SERVER or the request body, and may need treatment   * during the application (e.g., body parameters may be deserialized based on   * content type).   *   * Additionally, this interface recognizes the utility of introspecting a   * request to derive and match additional parameters (e.g., via URI path   * matching, decrypting cookie values, deserializing non-form-encoded body   * content, matching authorization headers to users, etc). These parameters   * are stored in an  attributes  property.   *   * Requests are considered immutable; all methods that might change state MUST   * be implemented such that they retain the internal state of the current   * message and return an instance that contains the changed state.   */  interface   ServerRequestInterface   extends   RequestInterface  { \n     /**       * Retrieve server parameters.       *       * Retrieves data related to the incoming request environment,       * typically derived from PHP s $_SERVER superglobal. The data IS NOT       * REQUIRED to originate from $_SERVER.       *       * @return array       */ \n     public   function   getServerParams (); \n\n     /**       * Retrieve cookies.       *       * Retrieves cookies sent by the client to the server.       *       * The data MUST be compatible with the structure of the $_COOKIE       * superglobal.       *       * @return array       */ \n     public   function   getCookieParams (); \n\n     /**       * Return an instance with the specified cookies.       *       * The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST       * be compatible with the structure of $_COOKIE. Typically, this data will       * be injected at instantiation.       *       * This method MUST NOT update the related Cookie header of the request       * instance, nor related values in the server params.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * updated cookie values.       *       * @param array $cookies Array of key/value pairs representing cookies.       * @return static       */ \n     public   function   withCookieParams ( array   $cookies ); \n\n     /**       * Retrieve query string arguments.       *       * Retrieves the deserialized query string arguments, if any.       *       * Note: the query params might not be in sync with the URI or server       * params. If you need to ensure you are only getting the original       * values, you may need to parse the query string from `getUri()- getQuery()`       * or from the `QUERY_STRING` server param.       *       * @return array       */ \n     public   function   getQueryParams (); \n\n     /**       * Return an instance with the specified query string arguments.       *       * These values SHOULD remain immutable over the course of the incoming       * request. They MAY be injected during instantiation, such as from PHP s       * $_GET superglobal, or MAY be derived from some other value such as the       * URI. In cases where the arguments are parsed from the URI, the data       * MUST be compatible with what PHP s parse_str() would return for       * purposes of how duplicate query parameters are handled, and how nested       * sets are handled.       *       * Setting query string arguments MUST NOT change the URI stored by the       * request, nor the values in the server params.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * updated query string arguments.       *       * @param array $query Array of query string arguments, typically from       *     $_GET.       * @return static       */ \n     public   function   withQueryParams ( array   $query ); \n\n     /**       * Retrieve normalized file upload data.       *       * This method returns upload metadata in a normalized tree, with each leaf       * an instance of Psr\\Http\\Message\\UploadedFileInterface.       *       * These values MAY be prepared from $_FILES or the message body during       * instantiation, or MAY be injected via withUploadedFiles().       *       * @return array An array tree of UploadedFileInterface instances; an empty       *     array MUST be returned if no data is present.       */ \n     public   function   getUploadedFiles (); \n\n     /**       * Create a new instance with the specified uploaded files.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * updated body parameters.       *       * @param array $uploadedFiles An array tree of UploadedFileInterface instances.       * @return static       * @throws \\InvalidArgumentException if an invalid structure is provided.       */ \n     public   function   withUploadedFiles ( array   $uploadedFiles ); \n\n     /**       * Retrieve any parameters provided in the request body.       *       * If the request Content-Type is either application/x-www-form-urlencoded       * or multipart/form-data, and the request method is POST, this method MUST       * return the contents of $_POST.       *       * Otherwise, this method may return any results of deserializing       * the request body content; as parsing returns structured content, the       * potential types MUST be arrays or objects only. A null value indicates       * the absence of body content.       *       * @return null|array|object The deserialized body parameters, if any.       *     These will typically be an array or object.       */ \n     public   function   getParsedBody (); \n\n     /**       * Return an instance with the specified body parameters.       *       * These MAY be injected during instantiation.       *       * If the request Content-Type is either application/x-www-form-urlencoded       * or multipart/form-data, and the request method is POST, use this method       * ONLY to inject the contents of $_POST.       *       * The data IS NOT REQUIRED to come from $_POST, but MUST be the results of       * deserializing the request body content. Deserialization/parsing returns       * structured data, and, as such, this method ONLY accepts arrays or objects,       * or a null value if nothing was available to parse.       *       * As an example, if content negotiation determines that the request data       * is a JSON payload, this method could be used to create a request       * instance with the deserialized parameters.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * updated body parameters.       *       * @param null|array|object $data The deserialized body data. This will       *     typically be in an array or object.       * @return static       * @throws \\InvalidArgumentException if an unsupported argument type is       *     provided.       */ \n     public   function   withParsedBody ( $data ); \n\n     /**       * Retrieve attributes derived from the request.       *       * The request  attributes  may be used to allow injection of any       * parameters derived from the request: e.g., the results of path       * match operations; the results of decrypting cookies; the results of       * deserializing non-form-encoded message bodies; etc. Attributes       * will be application and request specific, and CAN be mutable.       *       * @return mixed[] Attributes derived from the request.       */ \n     public   function   getAttributes (); \n\n     /**       * Retrieve a single derived request attribute.       *       * Retrieves a single derived request attribute as described in       * getAttributes(). If the attribute has not been previously set, returns       * the default value as provided.       *       * This method obviates the need for a hasAttribute() method, as it allows       * specifying a default value to return if the attribute is not found.       *       * @see getAttributes()       * @param string $name The attribute name.       * @param mixed $default Default value to return if the attribute does not exist.       * @return mixed       */ \n     public   function   getAttribute ( $name ,   $default   =   null ); \n\n     /**       * Return an instance with the specified derived request attribute.       *       * This method allows setting a single derived request attribute as       * described in getAttributes().       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * updated attribute.       *       * @see getAttributes()       * @param string $name The attribute name.       * @param mixed $value The value of the attribute.       * @return static       */ \n     public   function   withAttribute ( $name ,   $value ); \n\n     /**       * Return an instance that removes the specified derived request attribute.       *       * This method allows removing a single derived request attribute as       * described in getAttributes().       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that removes       * the attribute.       *       * @see getAttributes()       * @param string $name The attribute name.       * @return static       */ \n     public   function   withoutAttribute ( $name );  }", 
            "title": "3.2.1 Psr\\Http\\Message\\ServerRequestInterface"
        }, 
        {
            "location": "/php/php-http-messages/#33-psrhttpmessageresponseinterface", 
            "text": "?php  namespace   Psr\\Http\\Message ;  /**   * Representation of an outgoing, server-side response.   *   * Per the HTTP specification, this interface includes properties for   * each of the following:   *   * - Protocol version   * - Status code and reason phrase   * - Headers   * - Message body   *   * Responses are considered immutable; all methods that might change state MUST   * be implemented such that they retain the internal state of the current   * message and return an instance that contains the changed state.   */  interface   ResponseInterface   extends   MessageInterface  { \n     /**       * Gets the response status code.       *       * The status code is a 3-digit integer result code of the server s attempt       * to understand and satisfy the request.       *       * @return int Status code.       */ \n     public   function   getStatusCode (); \n\n     /**       * Return an instance with the specified status code and, optionally, reason phrase.       *       * If no reason phrase is specified, implementations MAY choose to default       * to the RFC 7231 or IANA recommended reason phrase for the response s       * status code.       *       * This method MUST be implemented in such a way as to retain the       * immutability of the message, and MUST return an instance that has the       * updated status and reason phrase.       *       * @see http://tools.ietf.org/html/rfc7231#section-6       * @see http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml       * @param int $code The 3-digit integer result code to set.       * @param string $reasonPhrase The reason phrase to use with the       *     provided status code; if none is provided, implementations MAY       *     use the defaults as suggested in the HTTP specification.       * @return static       * @throws \\InvalidArgumentException For invalid status code arguments.       */ \n     public   function   withStatus ( $code ,   $reasonPhrase   =   ); \n\n     /**       * Gets the response reason phrase associated with the status code.       *       * Because a reason phrase is not a required element in a response       * status line, the reason phrase value MAY be empty. Implementations MAY       * choose to return the default RFC 7231 recommended reason phrase (or those       * listed in the IANA HTTP Status Code Registry) for the response s       * status code.       *       * @see http://tools.ietf.org/html/rfc7231#section-6       * @see http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml       * @return string Reason phrase; must return an empty string if none present.       */ \n     public   function   getReasonPhrase ();  }", 
            "title": "3.3 Psr\\Http\\Message\\ResponseInterface"
        }, 
        {
            "location": "/php/php-http-messages/#34-psrhttpmessagestreaminterface", 
            "text": "?php  namespace   Psr\\Http\\Message ;  /**   * Describes a data stream.   *   * Typically, an instance will wrap a PHP stream; this interface provides   * a wrapper around the most common operations, including serialization of   * the entire stream to a string.   */  interface   StreamInterface  { \n     /**       * Reads all data from the stream into a string, from the beginning to end.       *       * This method MUST attempt to seek to the beginning of the stream before       * reading data and read the stream until the end is reached.       *       * Warning: This could attempt to load a large amount of data into memory.       *       * This method MUST NOT raise an exception in order to conform with PHP s       * string casting operations.       *       * @see http://php.net/manual/en/language.oop5.magic.php#object.tostring       * @return string       */ \n     public   function   __toString (); \n\n     /**       * Closes the stream and any underlying resources.       *       * @return void       */ \n     public   function   close (); \n\n     /**       * Separates any underlying resources from the stream.       *       * After the stream has been detached, the stream is in an unusable state.       *       * @return resource|null Underlying PHP stream, if any       */ \n     public   function   detach (); \n\n     /**       * Get the size of the stream if known.       *       * @return int|null Returns the size in bytes if known, or null if unknown.       */ \n     public   function   getSize (); \n\n     /**       * Returns the current position of the file read/write pointer       *       * @return int Position of the file pointer       * @throws \\RuntimeException on error.       */ \n     public   function   tell (); \n\n     /**       * Returns true if the stream is at the end of the stream.       *       * @return bool       */ \n     public   function   eof (); \n\n     /**       * Returns whether or not the stream is seekable.       *       * @return bool       */ \n     public   function   isSeekable (); \n\n     /**       * Seek to a position in the stream.       *       * @see http://www.php.net/manual/en/function.fseek.php       * @param int $offset Stream offset       * @param int $whence Specifies how the cursor position will be calculated       *     based on the seek offset. Valid values are identical to the built-in       *     PHP $whence values for `fseek()`.  SEEK_SET: Set position equal to       *     offset bytes SEEK_CUR: Set position to current location plus offset       *     SEEK_END: Set position to end-of-stream plus offset.       * @throws \\RuntimeException on failure.       */ \n     public   function   seek ( $offset ,   $whence   =   SEEK_SET ); \n\n     /**       * Seek to the beginning of the stream.       *       * If the stream is not seekable, this method will raise an exception;       * otherwise, it will perform a seek(0).       *       * @see seek()       * @see http://www.php.net/manual/en/function.fseek.php       * @throws \\RuntimeException on failure.       */ \n     public   function   rewind (); \n\n     /**       * Returns whether or not the stream is writable.       *       * @return bool       */ \n     public   function   isWritable (); \n\n     /**       * Write data to the stream.       *       * @param string $string The string that is to be written.       * @return int Returns the number of bytes written to the stream.       * @throws \\RuntimeException on failure.       */ \n     public   function   write ( $string ); \n\n     /**       * Returns whether or not the stream is readable.       *       * @return bool       */ \n     public   function   isReadable (); \n\n     /**       * Read data from the stream.       *       * @param int $length Read up to $length bytes from the object and return       *     them. Fewer than $length bytes may be returned if underlying stream       *     call returns fewer bytes.       * @return string Returns the data read from the stream, or an empty string       *     if no bytes are available.       * @throws \\RuntimeException if an error occurs.       */ \n     public   function   read ( $length ); \n\n     /**       * Returns the remaining contents in a string       *       * @return string       * @throws \\RuntimeException if unable to read.       * @throws \\RuntimeException if error occurs while reading.       */ \n     public   function   getContents (); \n\n     /**       * Get stream metadata as an associative array or retrieve a specific key.       *       * The keys returned are identical to the keys returned from PHP s       * stream_get_meta_data() function.       *       * @see http://php.net/manual/en/function.stream-get-meta-data.php       * @param string $key Specific metadata to retrieve.       * @return array|mixed|null Returns an associative array if no key is       *     provided. Returns a specific key value if a key is provided and the       *     value is found, or null if the key is not found.       */ \n     public   function   getMetadata ( $key   =   null );  }", 
            "title": "3.4 Psr\\Http\\Message\\StreamInterface"
        }, 
        {
            "location": "/php/php-http-messages/#35-psrhttpmessageuriinterface", 
            "text": "?php  namespace   Psr\\Http\\Message ;  /**   * Value object representing a URI.   *   * This interface is meant to represent URIs according to RFC 3986 and to   * provide methods for most common operations. Additional functionality for   * working with URIs can be provided on top of the interface or externally.   * Its primary use is for HTTP requests, but may also be used in other   * contexts.   *   * Instances of this interface are considered immutable; all methods that   * might change state MUST be implemented such that they retain the internal   * state of the current instance and return an instance that contains the   * changed state.   *   * Typically the Host header will also be present in the request message.   * For server-side requests, the scheme will typically be discoverable in the   * server parameters.   *   * @see http://tools.ietf.org/html/rfc3986 (the URI specification)   */  interface   UriInterface  { \n     /**       * Retrieve the scheme component of the URI.       *       * If no scheme is present, this method MUST return an empty string.       *       * The value returned MUST be normalized to lowercase, per RFC 3986       * Section 3.1.       *       * The trailing  :  character is not part of the scheme and MUST NOT be       * added.       *       * @see https://tools.ietf.org/html/rfc3986#section-3.1       * @return string The URI scheme.       */ \n     public   function   getScheme (); \n\n     /**       * Retrieve the authority component of the URI.       *       * If no authority information is present, this method MUST return an empty       * string.       *       * The authority syntax of the URI is:       *       *  pre       * [user-info@]host[:port]       *  /pre       *       * If the port component is not set or is the standard port for the current       * scheme, it SHOULD NOT be included.       *       * @see https://tools.ietf.org/html/rfc3986#section-3.2       * @return string The URI authority, in  [user-info@]host[:port]  format.       */ \n     public   function   getAuthority (); \n\n     /**       * Retrieve the user information component of the URI.       *       * If no user information is present, this method MUST return an empty       * string.       *       * If a user is present in the URI, this will return that value;       * additionally, if the password is also present, it will be appended to the       * user value, with a colon ( : ) separating the values.       *       * The trailing  @  character is not part of the user information and MUST       * NOT be added.       *       * @return string The URI user information, in  username[:password]  format.       */ \n     public   function   getUserInfo (); \n\n     /**       * Retrieve the host component of the URI.       *       * If no host is present, this method MUST return an empty string.       *       * The value returned MUST be normalized to lowercase, per RFC 3986       * Section 3.2.2.       *       * @see http://tools.ietf.org/html/rfc3986#section-3.2.2       * @return string The URI host.       */ \n     public   function   getHost (); \n\n     /**       * Retrieve the port component of the URI.       *       * If a port is present, and it is non-standard for the current scheme,       * this method MUST return it as an integer. If the port is the standard port       * used with the current scheme, this method SHOULD return null.       *       * If no port is present, and no scheme is present, this method MUST return       * a null value.       *       * If no port is present, but a scheme is present, this method MAY return       * the standard port for that scheme, but SHOULD return null.       *       * @return null|int The URI port.       */ \n     public   function   getPort (); \n\n     /**       * Retrieve the path component of the URI.       *       * The path can either be empty or absolute (starting with a slash) or       * rootless (not starting with a slash). Implementations MUST support all       * three syntaxes.       *       * Normally, the empty path   and absolute path  /  are considered equal as       * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically       * do this normalization because in contexts with a trimmed base path, e.g.       * the front controller, this difference becomes significant. It s the task       * of the user to handle both   and  / .       *       * The value returned MUST be percent-encoded, but MUST NOT double-encode       * any characters. To determine what characters to encode, please refer to       * RFC 3986, Sections 2 and 3.3.       *       * As an example, if the value should include a slash ( / ) not intended as       * delimiter between path segments, that value MUST be passed in encoded       * form (e.g.,  %2F ) to the instance.       *       * @see https://tools.ietf.org/html/rfc3986#section-2       * @see https://tools.ietf.org/html/rfc3986#section-3.3       * @return string The URI path.       */ \n     public   function   getPath (); \n\n     /**       * Retrieve the query string of the URI.       *       * If no query string is present, this method MUST return an empty string.       *       * The leading  ?  character is not part of the query and MUST NOT be       * added.       *       * The value returned MUST be percent-encoded, but MUST NOT double-encode       * any characters. To determine what characters to encode, please refer to       * RFC 3986, Sections 2 and 3.4.       *       * As an example, if a value in a key/value pair of the query string should       * include an ampersand ( ) not intended as a delimiter between values,       * that value MUST be passed in encoded form (e.g.,  %26 ) to the instance.       *       * @see https://tools.ietf.org/html/rfc3986#section-2       * @see https://tools.ietf.org/html/rfc3986#section-3.4       * @return string The URI query string.       */ \n     public   function   getQuery (); \n\n     /**       * Retrieve the fragment component of the URI.       *       * If no fragment is present, this method MUST return an empty string.       *       * The leading  #  character is not part of the fragment and MUST NOT be       * added.       *       * The value returned MUST be percent-encoded, but MUST NOT double-encode       * any characters. To determine what characters to encode, please refer to       * RFC 3986, Sections 2 and 3.5.       *       * @see https://tools.ietf.org/html/rfc3986#section-2       * @see https://tools.ietf.org/html/rfc3986#section-3.5       * @return string The URI fragment.       */ \n     public   function   getFragment (); \n\n     /**       * Return an instance with the specified scheme.       *       * This method MUST retain the state of the current instance, and return       * an instance that contains the specified scheme.       *       * Implementations MUST support the schemes  http  and  https  case       * insensitively, and MAY accommodate other schemes if required.       *       * An empty scheme is equivalent to removing the scheme.       *       * @param string $scheme The scheme to use with the new instance.       * @return static A new instance with the specified scheme.       * @throws \\InvalidArgumentException for invalid schemes.       * @throws \\InvalidArgumentException for unsupported schemes.       */ \n     public   function   withScheme ( $scheme ); \n\n     /**       * Return an instance with the specified user information.       *       * This method MUST retain the state of the current instance, and return       * an instance that contains the specified user information.       *       * Password is optional, but the user information MUST include the       * user; an empty string for the user is equivalent to removing user       * information.       *       * @param string $user The user name to use for authority.       * @param null|string $password The password associated with $user.       * @return static A new instance with the specified user information.       */ \n     public   function   withUserInfo ( $user ,   $password   =   null ); \n\n     /**       * Return an instance with the specified host.       *       * This method MUST retain the state of the current instance, and return       * an instance that contains the specified host.       *       * An empty host value is equivalent to removing the host.       *       * @param string $host The hostname to use with the new instance.       * @return static A new instance with the specified host.       * @throws \\InvalidArgumentException for invalid hostnames.       */ \n     public   function   withHost ( $host ); \n\n     /**       * Return an instance with the specified port.       *       * This method MUST retain the state of the current instance, and return       * an instance that contains the specified port.       *       * Implementations MUST raise an exception for ports outside the       * established TCP and UDP port ranges.       *       * A null value provided for the port is equivalent to removing the port       * information.       *       * @param null|int $port The port to use with the new instance; a null value       *     removes the port information.       * @return static A new instance with the specified port.       * @throws \\InvalidArgumentException for invalid ports.       */ \n     public   function   withPort ( $port ); \n\n     /**       * Return an instance with the specified path.       *       * This method MUST retain the state of the current instance, and return       * an instance that contains the specified path.       *       * The path can either be empty or absolute (starting with a slash) or       * rootless (not starting with a slash). Implementations MUST support all       * three syntaxes.       *       * If an HTTP path is intended to be host-relative rather than path-relative       * then it must begin with a slash ( / ). HTTP paths not starting with a slash       * are assumed to be relative to some base path known to the application or       * consumer.       *       * Users can provide both encoded and decoded path characters.       * Implementations ensure the correct encoding as outlined in getPath().       *       * @param string $path The path to use with the new instance.       * @return static A new instance with the specified path.       * @throws \\InvalidArgumentException for invalid paths.       */ \n     public   function   withPath ( $path ); \n\n     /**       * Return an instance with the specified query string.       *       * This method MUST retain the state of the current instance, and return       * an instance that contains the specified query string.       *       * Users can provide both encoded and decoded query characters.       * Implementations ensure the correct encoding as outlined in getQuery().       *       * An empty query string value is equivalent to removing the query string.       *       * @param string $query The query string to use with the new instance.       * @return static A new instance with the specified query string.       * @throws \\InvalidArgumentException for invalid query strings.       */ \n     public   function   withQuery ( $query ); \n\n     /**       * Return an instance with the specified URI fragment.       *       * This method MUST retain the state of the current instance, and return       * an instance that contains the specified URI fragment.       *       * Users can provide both encoded and decoded fragment characters.       * Implementations ensure the correct encoding as outlined in getFragment().       *       * An empty fragment value is equivalent to removing the fragment.       *       * @param string $fragment The fragment to use with the new instance.       * @return static A new instance with the specified fragment.       */ \n     public   function   withFragment ( $fragment ); \n\n     /**       * Return the string representation as a URI reference.       *       * Depending on which components of the URI are present, the resulting       * string is either a full URI or relative reference according to RFC 3986,       * Section 4.1. The method concatenates the various components of the URI,       * using the appropriate delimiters:       *       * - If a scheme is present, it MUST be suffixed by  : .       * - If an authority is present, it MUST be prefixed by  // .       * - The path can be concatenated without delimiters. But there are two       *   cases where the path has to be adjusted to make the URI reference       *   valid as PHP does not allow to throw an exception in __toString():       *     - If the path is rootless and an authority is present, the path MUST       *       be prefixed by  / .       *     - If the path is starting with more than one  /  and no authority is       *       present, the starting slashes MUST be reduced to one.       * - If a query is present, it MUST be prefixed by  ? .       * - If a fragment is present, it MUST be prefixed by  # .       *       * @see http://tools.ietf.org/html/rfc3986#section-4.1       * @return string       */ \n     public   function   __toString ();  }", 
            "title": "3.5 Psr\\Http\\Message\\UriInterface"
        }, 
        {
            "location": "/php/php-http-messages/#36-psrhttpmessageuploadedfileinterface", 
            "text": "?php  namespace   Psr\\Http\\Message ;  /**   * Value object representing a file uploaded through an HTTP request.   *   * Instances of this interface are considered immutable; all methods that   * might change state MUST be implemented such that they retain the internal   * state of the current instance and return an instance that contains the   * changed state.   */  interface   UploadedFileInterface  { \n     /**       * Retrieve a stream representing the uploaded file.       *       * This method MUST return a StreamInterface instance, representing the       * uploaded file. The purpose of this method is to allow utilizing native PHP       * stream functionality to manipulate the file upload, such as       * stream_copy_to_stream() (though the result will need to be decorated in a       * native PHP stream wrapper to work with such functions).       *       * If the moveTo() method has been called previously, this method MUST raise       * an exception.       *       * @return StreamInterface Stream representation of the uploaded file.       * @throws \\RuntimeException in cases when no stream is available.       * @throws \\RuntimeException in cases when no stream can be created.       */ \n     public   function   getStream (); \n\n     /**       * Move the uploaded file to a new location.       *       * Use this method as an alternative to move_uploaded_file(). This method is       * guaranteed to work in both SAPI and non-SAPI environments.       * Implementations must determine which environment they are in, and use the       * appropriate method (move_uploaded_file(), rename(), or a stream       * operation) to perform the operation.       *       * $targetPath may be an absolute path, or a relative path. If it is a       * relative path, resolution should be the same as used by PHP s rename()       * function.       *       * The original file or stream MUST be removed on completion.       *       * If this method is called more than once, any subsequent calls MUST raise       * an exception.       *       * When used in an SAPI environment where $_FILES is populated, when writing       * files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be       * used to ensure permissions and upload status are verified correctly.       *       * If you wish to move to a stream, use getStream(), as SAPI operations       * cannot guarantee writing to stream destinations.       *       * @see http://php.net/is_uploaded_file       * @see http://php.net/move_uploaded_file       * @param string $targetPath Path to which to move the uploaded file.       * @throws \\InvalidArgumentException if the $targetPath specified is invalid.       * @throws \\RuntimeException on any error during the move operation.       * @throws \\RuntimeException on the second or subsequent call to the method.       */ \n     public   function   moveTo ( $targetPath ); \n\n     /**       * Retrieve the file size.       *       * Implementations SHOULD return the value stored in the  size  key of       * the file in the $_FILES array if available, as PHP calculates this based       * on the actual size transmitted.       *       * @return int|null The file size in bytes or null if unknown.       */ \n     public   function   getSize (); \n\n     /**       * Retrieve the error associated with the uploaded file.       *       * The return value MUST be one of PHP s UPLOAD_ERR_XXX constants.       *       * If the file was uploaded successfully, this method MUST return       * UPLOAD_ERR_OK.       *       * Implementations SHOULD return the value stored in the  error  key of       * the file in the $_FILES array.       *       * @see http://php.net/manual/en/features.file-upload.errors.php       * @return int One of PHP s UPLOAD_ERR_XXX constants.       */ \n     public   function   getError (); \n\n     /**       * Retrieve the filename sent by the client.       *       * Do not trust the value returned by this method. A client could send       * a malicious filename with the intention to corrupt or hack your       * application.       *       * Implementations SHOULD return the value stored in the  name  key of       * the file in the $_FILES array.       *       * @return string|null The filename sent by the client or null if none       *     was provided.       */ \n     public   function   getClientFilename (); \n\n     /**       * Retrieve the media type sent by the client.       *       * Do not trust the value returned by this method. A client could send       * a malicious media type with the intention to corrupt or hack your       * application.       *       * Implementations SHOULD return the value stored in the  type  key of       * the file in the $_FILES array.       *       * @return string|null The media type sent by the client or null if none       *     was provided.       */ \n     public   function   getClientMediaType ();  }", 
            "title": "3.6 Psr\\Http\\Message\\UploadedFileInterface"
        }, 
        {
            "location": "/about/license/", 
            "text": "Unless stated otherwise, all content is licensed under the Creative Commons\nAttribution License and code licensed under the MIT License.\n\n\n\n\n(The MIT License)\n\n\nCopyright (c) 2014-2017 Airbnb\n\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "Licenses"
        }
    ]
}